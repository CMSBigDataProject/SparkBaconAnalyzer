/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package baconhep;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TVertex extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TVertex\",\"namespace\":\"baconhep\",\"fields\":[{\"name\":\"nTracksFit\",\"type\":\"long\"},{\"name\":\"ndof\",\"type\":\"float\"},{\"name\":\"chi2\",\"type\":\"float\"},{\"name\":\"x\",\"type\":\"float\"},{\"name\":\"y\",\"type\":\"float\"},{\"name\":\"z\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long nTracksFit;
  @Deprecated public float ndof;
  @Deprecated public float chi2;
  @Deprecated public float x;
  @Deprecated public float y;
  @Deprecated public float z;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TVertex() {}

  /**
   * All-args constructor.
   */
  public TVertex(java.lang.Long nTracksFit, java.lang.Float ndof, java.lang.Float chi2, java.lang.Float x, java.lang.Float y, java.lang.Float z) {
    this.nTracksFit = nTracksFit;
    this.ndof = ndof;
    this.chi2 = chi2;
    this.x = x;
    this.y = y;
    this.z = z;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return nTracksFit;
    case 1: return ndof;
    case 2: return chi2;
    case 3: return x;
    case 4: return y;
    case 5: return z;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: nTracksFit = (java.lang.Long)value$; break;
    case 1: ndof = (java.lang.Float)value$; break;
    case 2: chi2 = (java.lang.Float)value$; break;
    case 3: x = (java.lang.Float)value$; break;
    case 4: y = (java.lang.Float)value$; break;
    case 5: z = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'nTracksFit' field.
   */
  public java.lang.Long getNTracksFit() {
    return nTracksFit;
  }

  /**
   * Sets the value of the 'nTracksFit' field.
   * @param value the value to set.
   */
  public void setNTracksFit(java.lang.Long value) {
    this.nTracksFit = value;
  }

  /**
   * Gets the value of the 'ndof' field.
   */
  public java.lang.Float getNdof() {
    return ndof;
  }

  /**
   * Sets the value of the 'ndof' field.
   * @param value the value to set.
   */
  public void setNdof(java.lang.Float value) {
    this.ndof = value;
  }

  /**
   * Gets the value of the 'chi2' field.
   */
  public java.lang.Float getChi2() {
    return chi2;
  }

  /**
   * Sets the value of the 'chi2' field.
   * @param value the value to set.
   */
  public void setChi2(java.lang.Float value) {
    this.chi2 = value;
  }

  /**
   * Gets the value of the 'x' field.
   */
  public java.lang.Float getX() {
    return x;
  }

  /**
   * Sets the value of the 'x' field.
   * @param value the value to set.
   */
  public void setX(java.lang.Float value) {
    this.x = value;
  }

  /**
   * Gets the value of the 'y' field.
   */
  public java.lang.Float getY() {
    return y;
  }

  /**
   * Sets the value of the 'y' field.
   * @param value the value to set.
   */
  public void setY(java.lang.Float value) {
    this.y = value;
  }

  /**
   * Gets the value of the 'z' field.
   */
  public java.lang.Float getZ() {
    return z;
  }

  /**
   * Sets the value of the 'z' field.
   * @param value the value to set.
   */
  public void setZ(java.lang.Float value) {
    this.z = value;
  }

  /** Creates a new TVertex RecordBuilder */
  public static baconhep.TVertex.Builder newBuilder() {
    return new baconhep.TVertex.Builder();
  }
  
  /** Creates a new TVertex RecordBuilder by copying an existing Builder */
  public static baconhep.TVertex.Builder newBuilder(baconhep.TVertex.Builder other) {
    return new baconhep.TVertex.Builder(other);
  }
  
  /** Creates a new TVertex RecordBuilder by copying an existing TVertex instance */
  public static baconhep.TVertex.Builder newBuilder(baconhep.TVertex other) {
    return new baconhep.TVertex.Builder(other);
  }
  
  /**
   * RecordBuilder for TVertex instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TVertex>
    implements org.apache.avro.data.RecordBuilder<TVertex> {

    private long nTracksFit;
    private float ndof;
    private float chi2;
    private float x;
    private float y;
    private float z;

    /** Creates a new Builder */
    private Builder() {
      super(baconhep.TVertex.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(baconhep.TVertex.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.nTracksFit)) {
        this.nTracksFit = data().deepCopy(fields()[0].schema(), other.nTracksFit);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ndof)) {
        this.ndof = data().deepCopy(fields()[1].schema(), other.ndof);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.chi2)) {
        this.chi2 = data().deepCopy(fields()[2].schema(), other.chi2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.x)) {
        this.x = data().deepCopy(fields()[3].schema(), other.x);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.y)) {
        this.y = data().deepCopy(fields()[4].schema(), other.y);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.z)) {
        this.z = data().deepCopy(fields()[5].schema(), other.z);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TVertex instance */
    private Builder(baconhep.TVertex other) {
            super(baconhep.TVertex.SCHEMA$);
      if (isValidValue(fields()[0], other.nTracksFit)) {
        this.nTracksFit = data().deepCopy(fields()[0].schema(), other.nTracksFit);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ndof)) {
        this.ndof = data().deepCopy(fields()[1].schema(), other.ndof);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.chi2)) {
        this.chi2 = data().deepCopy(fields()[2].schema(), other.chi2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.x)) {
        this.x = data().deepCopy(fields()[3].schema(), other.x);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.y)) {
        this.y = data().deepCopy(fields()[4].schema(), other.y);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.z)) {
        this.z = data().deepCopy(fields()[5].schema(), other.z);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'nTracksFit' field */
    public java.lang.Long getNTracksFit() {
      return nTracksFit;
    }
    
    /** Sets the value of the 'nTracksFit' field */
    public baconhep.TVertex.Builder setNTracksFit(long value) {
      validate(fields()[0], value);
      this.nTracksFit = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'nTracksFit' field has been set */
    public boolean hasNTracksFit() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'nTracksFit' field */
    public baconhep.TVertex.Builder clearNTracksFit() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'ndof' field */
    public java.lang.Float getNdof() {
      return ndof;
    }
    
    /** Sets the value of the 'ndof' field */
    public baconhep.TVertex.Builder setNdof(float value) {
      validate(fields()[1], value);
      this.ndof = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'ndof' field has been set */
    public boolean hasNdof() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'ndof' field */
    public baconhep.TVertex.Builder clearNdof() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'chi2' field */
    public java.lang.Float getChi2() {
      return chi2;
    }
    
    /** Sets the value of the 'chi2' field */
    public baconhep.TVertex.Builder setChi2(float value) {
      validate(fields()[2], value);
      this.chi2 = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'chi2' field has been set */
    public boolean hasChi2() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'chi2' field */
    public baconhep.TVertex.Builder clearChi2() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'x' field */
    public java.lang.Float getX() {
      return x;
    }
    
    /** Sets the value of the 'x' field */
    public baconhep.TVertex.Builder setX(float value) {
      validate(fields()[3], value);
      this.x = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'x' field has been set */
    public boolean hasX() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'x' field */
    public baconhep.TVertex.Builder clearX() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'y' field */
    public java.lang.Float getY() {
      return y;
    }
    
    /** Sets the value of the 'y' field */
    public baconhep.TVertex.Builder setY(float value) {
      validate(fields()[4], value);
      this.y = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'y' field has been set */
    public boolean hasY() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'y' field */
    public baconhep.TVertex.Builder clearY() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'z' field */
    public java.lang.Float getZ() {
      return z;
    }
    
    /** Sets the value of the 'z' field */
    public baconhep.TVertex.Builder setZ(float value) {
      validate(fields()[5], value);
      this.z = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'z' field has been set */
    public boolean hasZ() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'z' field */
    public baconhep.TVertex.Builder clearZ() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public TVertex build() {
      try {
        TVertex record = new TVertex();
        record.nTracksFit = fieldSetFlags()[0] ? this.nTracksFit : (java.lang.Long) defaultValue(fields()[0]);
        record.ndof = fieldSetFlags()[1] ? this.ndof : (java.lang.Float) defaultValue(fields()[1]);
        record.chi2 = fieldSetFlags()[2] ? this.chi2 : (java.lang.Float) defaultValue(fields()[2]);
        record.x = fieldSetFlags()[3] ? this.x : (java.lang.Float) defaultValue(fields()[3]);
        record.y = fieldSetFlags()[4] ? this.y : (java.lang.Float) defaultValue(fields()[4]);
        record.z = fieldSetFlags()[5] ? this.z : (java.lang.Float) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
