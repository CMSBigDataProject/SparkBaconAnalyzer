/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package baconhep;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TJet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TJet\",\"namespace\":\"baconhep\",\"fields\":[{\"name\":\"pt\",\"type\":\"float\"},{\"name\":\"eta\",\"type\":\"float\"},{\"name\":\"phi\",\"type\":\"float\"},{\"name\":\"mass\",\"type\":\"float\"},{\"name\":\"ptRaw\",\"type\":\"float\"},{\"name\":\"unc\",\"type\":\"float\"},{\"name\":\"area\",\"type\":\"float\"},{\"name\":\"d0\",\"type\":\"float\"},{\"name\":\"dz\",\"type\":\"float\"},{\"name\":\"csv\",\"type\":\"float\"},{\"name\":\"bmva\",\"type\":\"float\"},{\"name\":\"cvb\",\"type\":\"float\"},{\"name\":\"cvl\",\"type\":\"float\"},{\"name\":\"qgid\",\"type\":\"float\"},{\"name\":\"axis2\",\"type\":\"float\"},{\"name\":\"ptD\",\"type\":\"float\"},{\"name\":\"mult\",\"type\":\"int\"},{\"name\":\"q\",\"type\":\"float\"},{\"name\":\"mva\",\"type\":\"float\"},{\"name\":\"beta\",\"type\":\"float\"},{\"name\":\"betaStar\",\"type\":\"float\"},{\"name\":\"dR2Mean\",\"type\":\"float\"},{\"name\":\"pullY\",\"type\":\"float\"},{\"name\":\"pullPhi\",\"type\":\"float\"},{\"name\":\"chPullY\",\"type\":\"float\"},{\"name\":\"chPullPhi\",\"type\":\"float\"},{\"name\":\"neuPullY\",\"type\":\"float\"},{\"name\":\"neuPullPhi\",\"type\":\"float\"},{\"name\":\"chEmFrac\",\"type\":\"float\"},{\"name\":\"neuEmFrac\",\"type\":\"float\"},{\"name\":\"chHadFrac\",\"type\":\"float\"},{\"name\":\"neuHadFrac\",\"type\":\"float\"},{\"name\":\"muonFrac\",\"type\":\"float\"},{\"name\":\"genpt\",\"type\":\"float\"},{\"name\":\"geneta\",\"type\":\"float\"},{\"name\":\"genphi\",\"type\":\"float\"},{\"name\":\"genm\",\"type\":\"float\"},{\"name\":\"partonFlavor\",\"type\":\"int\"},{\"name\":\"hadronFlavor\",\"type\":\"int\"},{\"name\":\"nCharged\",\"type\":\"long\"},{\"name\":\"nNeutrals\",\"type\":\"long\"},{\"name\":\"nParticles\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public float pt;
  @Deprecated public float eta;
  @Deprecated public float phi;
  @Deprecated public float mass;
  @Deprecated public float ptRaw;
  @Deprecated public float unc;
  @Deprecated public float area;
  @Deprecated public float d0;
  @Deprecated public float dz;
  @Deprecated public float csv;
  @Deprecated public float bmva;
  @Deprecated public float cvb;
  @Deprecated public float cvl;
  @Deprecated public float qgid;
  @Deprecated public float axis2;
  @Deprecated public float ptD;
  @Deprecated public int mult;
  @Deprecated public float q;
  @Deprecated public float mva;
  @Deprecated public float beta;
  @Deprecated public float betaStar;
  @Deprecated public float dR2Mean;
  @Deprecated public float pullY;
  @Deprecated public float pullPhi;
  @Deprecated public float chPullY;
  @Deprecated public float chPullPhi;
  @Deprecated public float neuPullY;
  @Deprecated public float neuPullPhi;
  @Deprecated public float chEmFrac;
  @Deprecated public float neuEmFrac;
  @Deprecated public float chHadFrac;
  @Deprecated public float neuHadFrac;
  @Deprecated public float muonFrac;
  @Deprecated public float genpt;
  @Deprecated public float geneta;
  @Deprecated public float genphi;
  @Deprecated public float genm;
  @Deprecated public int partonFlavor;
  @Deprecated public int hadronFlavor;
  @Deprecated public long nCharged;
  @Deprecated public long nNeutrals;
  @Deprecated public long nParticles;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TJet() {}

  /**
   * All-args constructor.
   */
  public TJet(java.lang.Float pt, java.lang.Float eta, java.lang.Float phi, java.lang.Float mass, java.lang.Float ptRaw, java.lang.Float unc, java.lang.Float area, java.lang.Float d0, java.lang.Float dz, java.lang.Float csv, java.lang.Float bmva, java.lang.Float cvb, java.lang.Float cvl, java.lang.Float qgid, java.lang.Float axis2, java.lang.Float ptD, java.lang.Integer mult, java.lang.Float q, java.lang.Float mva, java.lang.Float beta, java.lang.Float betaStar, java.lang.Float dR2Mean, java.lang.Float pullY, java.lang.Float pullPhi, java.lang.Float chPullY, java.lang.Float chPullPhi, java.lang.Float neuPullY, java.lang.Float neuPullPhi, java.lang.Float chEmFrac, java.lang.Float neuEmFrac, java.lang.Float chHadFrac, java.lang.Float neuHadFrac, java.lang.Float muonFrac, java.lang.Float genpt, java.lang.Float geneta, java.lang.Float genphi, java.lang.Float genm, java.lang.Integer partonFlavor, java.lang.Integer hadronFlavor, java.lang.Long nCharged, java.lang.Long nNeutrals, java.lang.Long nParticles) {
    this.pt = pt;
    this.eta = eta;
    this.phi = phi;
    this.mass = mass;
    this.ptRaw = ptRaw;
    this.unc = unc;
    this.area = area;
    this.d0 = d0;
    this.dz = dz;
    this.csv = csv;
    this.bmva = bmva;
    this.cvb = cvb;
    this.cvl = cvl;
    this.qgid = qgid;
    this.axis2 = axis2;
    this.ptD = ptD;
    this.mult = mult;
    this.q = q;
    this.mva = mva;
    this.beta = beta;
    this.betaStar = betaStar;
    this.dR2Mean = dR2Mean;
    this.pullY = pullY;
    this.pullPhi = pullPhi;
    this.chPullY = chPullY;
    this.chPullPhi = chPullPhi;
    this.neuPullY = neuPullY;
    this.neuPullPhi = neuPullPhi;
    this.chEmFrac = chEmFrac;
    this.neuEmFrac = neuEmFrac;
    this.chHadFrac = chHadFrac;
    this.neuHadFrac = neuHadFrac;
    this.muonFrac = muonFrac;
    this.genpt = genpt;
    this.geneta = geneta;
    this.genphi = genphi;
    this.genm = genm;
    this.partonFlavor = partonFlavor;
    this.hadronFlavor = hadronFlavor;
    this.nCharged = nCharged;
    this.nNeutrals = nNeutrals;
    this.nParticles = nParticles;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return pt;
    case 1: return eta;
    case 2: return phi;
    case 3: return mass;
    case 4: return ptRaw;
    case 5: return unc;
    case 6: return area;
    case 7: return d0;
    case 8: return dz;
    case 9: return csv;
    case 10: return bmva;
    case 11: return cvb;
    case 12: return cvl;
    case 13: return qgid;
    case 14: return axis2;
    case 15: return ptD;
    case 16: return mult;
    case 17: return q;
    case 18: return mva;
    case 19: return beta;
    case 20: return betaStar;
    case 21: return dR2Mean;
    case 22: return pullY;
    case 23: return pullPhi;
    case 24: return chPullY;
    case 25: return chPullPhi;
    case 26: return neuPullY;
    case 27: return neuPullPhi;
    case 28: return chEmFrac;
    case 29: return neuEmFrac;
    case 30: return chHadFrac;
    case 31: return neuHadFrac;
    case 32: return muonFrac;
    case 33: return genpt;
    case 34: return geneta;
    case 35: return genphi;
    case 36: return genm;
    case 37: return partonFlavor;
    case 38: return hadronFlavor;
    case 39: return nCharged;
    case 40: return nNeutrals;
    case 41: return nParticles;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: pt = (java.lang.Float)value$; break;
    case 1: eta = (java.lang.Float)value$; break;
    case 2: phi = (java.lang.Float)value$; break;
    case 3: mass = (java.lang.Float)value$; break;
    case 4: ptRaw = (java.lang.Float)value$; break;
    case 5: unc = (java.lang.Float)value$; break;
    case 6: area = (java.lang.Float)value$; break;
    case 7: d0 = (java.lang.Float)value$; break;
    case 8: dz = (java.lang.Float)value$; break;
    case 9: csv = (java.lang.Float)value$; break;
    case 10: bmva = (java.lang.Float)value$; break;
    case 11: cvb = (java.lang.Float)value$; break;
    case 12: cvl = (java.lang.Float)value$; break;
    case 13: qgid = (java.lang.Float)value$; break;
    case 14: axis2 = (java.lang.Float)value$; break;
    case 15: ptD = (java.lang.Float)value$; break;
    case 16: mult = (java.lang.Integer)value$; break;
    case 17: q = (java.lang.Float)value$; break;
    case 18: mva = (java.lang.Float)value$; break;
    case 19: beta = (java.lang.Float)value$; break;
    case 20: betaStar = (java.lang.Float)value$; break;
    case 21: dR2Mean = (java.lang.Float)value$; break;
    case 22: pullY = (java.lang.Float)value$; break;
    case 23: pullPhi = (java.lang.Float)value$; break;
    case 24: chPullY = (java.lang.Float)value$; break;
    case 25: chPullPhi = (java.lang.Float)value$; break;
    case 26: neuPullY = (java.lang.Float)value$; break;
    case 27: neuPullPhi = (java.lang.Float)value$; break;
    case 28: chEmFrac = (java.lang.Float)value$; break;
    case 29: neuEmFrac = (java.lang.Float)value$; break;
    case 30: chHadFrac = (java.lang.Float)value$; break;
    case 31: neuHadFrac = (java.lang.Float)value$; break;
    case 32: muonFrac = (java.lang.Float)value$; break;
    case 33: genpt = (java.lang.Float)value$; break;
    case 34: geneta = (java.lang.Float)value$; break;
    case 35: genphi = (java.lang.Float)value$; break;
    case 36: genm = (java.lang.Float)value$; break;
    case 37: partonFlavor = (java.lang.Integer)value$; break;
    case 38: hadronFlavor = (java.lang.Integer)value$; break;
    case 39: nCharged = (java.lang.Long)value$; break;
    case 40: nNeutrals = (java.lang.Long)value$; break;
    case 41: nParticles = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'pt' field.
   */
  public java.lang.Float getPt() {
    return pt;
  }

  /**
   * Sets the value of the 'pt' field.
   * @param value the value to set.
   */
  public void setPt(java.lang.Float value) {
    this.pt = value;
  }

  /**
   * Gets the value of the 'eta' field.
   */
  public java.lang.Float getEta() {
    return eta;
  }

  /**
   * Sets the value of the 'eta' field.
   * @param value the value to set.
   */
  public void setEta(java.lang.Float value) {
    this.eta = value;
  }

  /**
   * Gets the value of the 'phi' field.
   */
  public java.lang.Float getPhi() {
    return phi;
  }

  /**
   * Sets the value of the 'phi' field.
   * @param value the value to set.
   */
  public void setPhi(java.lang.Float value) {
    this.phi = value;
  }

  /**
   * Gets the value of the 'mass' field.
   */
  public java.lang.Float getMass() {
    return mass;
  }

  /**
   * Sets the value of the 'mass' field.
   * @param value the value to set.
   */
  public void setMass(java.lang.Float value) {
    this.mass = value;
  }

  /**
   * Gets the value of the 'ptRaw' field.
   */
  public java.lang.Float getPtRaw() {
    return ptRaw;
  }

  /**
   * Sets the value of the 'ptRaw' field.
   * @param value the value to set.
   */
  public void setPtRaw(java.lang.Float value) {
    this.ptRaw = value;
  }

  /**
   * Gets the value of the 'unc' field.
   */
  public java.lang.Float getUnc() {
    return unc;
  }

  /**
   * Sets the value of the 'unc' field.
   * @param value the value to set.
   */
  public void setUnc(java.lang.Float value) {
    this.unc = value;
  }

  /**
   * Gets the value of the 'area' field.
   */
  public java.lang.Float getArea() {
    return area;
  }

  /**
   * Sets the value of the 'area' field.
   * @param value the value to set.
   */
  public void setArea(java.lang.Float value) {
    this.area = value;
  }

  /**
   * Gets the value of the 'd0' field.
   */
  public java.lang.Float getD0() {
    return d0;
  }

  /**
   * Sets the value of the 'd0' field.
   * @param value the value to set.
   */
  public void setD0(java.lang.Float value) {
    this.d0 = value;
  }

  /**
   * Gets the value of the 'dz' field.
   */
  public java.lang.Float getDz() {
    return dz;
  }

  /**
   * Sets the value of the 'dz' field.
   * @param value the value to set.
   */
  public void setDz(java.lang.Float value) {
    this.dz = value;
  }

  /**
   * Gets the value of the 'csv' field.
   */
  public java.lang.Float getCsv() {
    return csv;
  }

  /**
   * Sets the value of the 'csv' field.
   * @param value the value to set.
   */
  public void setCsv(java.lang.Float value) {
    this.csv = value;
  }

  /**
   * Gets the value of the 'bmva' field.
   */
  public java.lang.Float getBmva() {
    return bmva;
  }

  /**
   * Sets the value of the 'bmva' field.
   * @param value the value to set.
   */
  public void setBmva(java.lang.Float value) {
    this.bmva = value;
  }

  /**
   * Gets the value of the 'cvb' field.
   */
  public java.lang.Float getCvb() {
    return cvb;
  }

  /**
   * Sets the value of the 'cvb' field.
   * @param value the value to set.
   */
  public void setCvb(java.lang.Float value) {
    this.cvb = value;
  }

  /**
   * Gets the value of the 'cvl' field.
   */
  public java.lang.Float getCvl() {
    return cvl;
  }

  /**
   * Sets the value of the 'cvl' field.
   * @param value the value to set.
   */
  public void setCvl(java.lang.Float value) {
    this.cvl = value;
  }

  /**
   * Gets the value of the 'qgid' field.
   */
  public java.lang.Float getQgid() {
    return qgid;
  }

  /**
   * Sets the value of the 'qgid' field.
   * @param value the value to set.
   */
  public void setQgid(java.lang.Float value) {
    this.qgid = value;
  }

  /**
   * Gets the value of the 'axis2' field.
   */
  public java.lang.Float getAxis2() {
    return axis2;
  }

  /**
   * Sets the value of the 'axis2' field.
   * @param value the value to set.
   */
  public void setAxis2(java.lang.Float value) {
    this.axis2 = value;
  }

  /**
   * Gets the value of the 'ptD' field.
   */
  public java.lang.Float getPtD() {
    return ptD;
  }

  /**
   * Sets the value of the 'ptD' field.
   * @param value the value to set.
   */
  public void setPtD(java.lang.Float value) {
    this.ptD = value;
  }

  /**
   * Gets the value of the 'mult' field.
   */
  public java.lang.Integer getMult() {
    return mult;
  }

  /**
   * Sets the value of the 'mult' field.
   * @param value the value to set.
   */
  public void setMult(java.lang.Integer value) {
    this.mult = value;
  }

  /**
   * Gets the value of the 'q' field.
   */
  public java.lang.Float getQ() {
    return q;
  }

  /**
   * Sets the value of the 'q' field.
   * @param value the value to set.
   */
  public void setQ(java.lang.Float value) {
    this.q = value;
  }

  /**
   * Gets the value of the 'mva' field.
   */
  public java.lang.Float getMva() {
    return mva;
  }

  /**
   * Sets the value of the 'mva' field.
   * @param value the value to set.
   */
  public void setMva(java.lang.Float value) {
    this.mva = value;
  }

  /**
   * Gets the value of the 'beta' field.
   */
  public java.lang.Float getBeta() {
    return beta;
  }

  /**
   * Sets the value of the 'beta' field.
   * @param value the value to set.
   */
  public void setBeta(java.lang.Float value) {
    this.beta = value;
  }

  /**
   * Gets the value of the 'betaStar' field.
   */
  public java.lang.Float getBetaStar() {
    return betaStar;
  }

  /**
   * Sets the value of the 'betaStar' field.
   * @param value the value to set.
   */
  public void setBetaStar(java.lang.Float value) {
    this.betaStar = value;
  }

  /**
   * Gets the value of the 'dR2Mean' field.
   */
  public java.lang.Float getDR2Mean() {
    return dR2Mean;
  }

  /**
   * Sets the value of the 'dR2Mean' field.
   * @param value the value to set.
   */
  public void setDR2Mean(java.lang.Float value) {
    this.dR2Mean = value;
  }

  /**
   * Gets the value of the 'pullY' field.
   */
  public java.lang.Float getPullY() {
    return pullY;
  }

  /**
   * Sets the value of the 'pullY' field.
   * @param value the value to set.
   */
  public void setPullY(java.lang.Float value) {
    this.pullY = value;
  }

  /**
   * Gets the value of the 'pullPhi' field.
   */
  public java.lang.Float getPullPhi() {
    return pullPhi;
  }

  /**
   * Sets the value of the 'pullPhi' field.
   * @param value the value to set.
   */
  public void setPullPhi(java.lang.Float value) {
    this.pullPhi = value;
  }

  /**
   * Gets the value of the 'chPullY' field.
   */
  public java.lang.Float getChPullY() {
    return chPullY;
  }

  /**
   * Sets the value of the 'chPullY' field.
   * @param value the value to set.
   */
  public void setChPullY(java.lang.Float value) {
    this.chPullY = value;
  }

  /**
   * Gets the value of the 'chPullPhi' field.
   */
  public java.lang.Float getChPullPhi() {
    return chPullPhi;
  }

  /**
   * Sets the value of the 'chPullPhi' field.
   * @param value the value to set.
   */
  public void setChPullPhi(java.lang.Float value) {
    this.chPullPhi = value;
  }

  /**
   * Gets the value of the 'neuPullY' field.
   */
  public java.lang.Float getNeuPullY() {
    return neuPullY;
  }

  /**
   * Sets the value of the 'neuPullY' field.
   * @param value the value to set.
   */
  public void setNeuPullY(java.lang.Float value) {
    this.neuPullY = value;
  }

  /**
   * Gets the value of the 'neuPullPhi' field.
   */
  public java.lang.Float getNeuPullPhi() {
    return neuPullPhi;
  }

  /**
   * Sets the value of the 'neuPullPhi' field.
   * @param value the value to set.
   */
  public void setNeuPullPhi(java.lang.Float value) {
    this.neuPullPhi = value;
  }

  /**
   * Gets the value of the 'chEmFrac' field.
   */
  public java.lang.Float getChEmFrac() {
    return chEmFrac;
  }

  /**
   * Sets the value of the 'chEmFrac' field.
   * @param value the value to set.
   */
  public void setChEmFrac(java.lang.Float value) {
    this.chEmFrac = value;
  }

  /**
   * Gets the value of the 'neuEmFrac' field.
   */
  public java.lang.Float getNeuEmFrac() {
    return neuEmFrac;
  }

  /**
   * Sets the value of the 'neuEmFrac' field.
   * @param value the value to set.
   */
  public void setNeuEmFrac(java.lang.Float value) {
    this.neuEmFrac = value;
  }

  /**
   * Gets the value of the 'chHadFrac' field.
   */
  public java.lang.Float getChHadFrac() {
    return chHadFrac;
  }

  /**
   * Sets the value of the 'chHadFrac' field.
   * @param value the value to set.
   */
  public void setChHadFrac(java.lang.Float value) {
    this.chHadFrac = value;
  }

  /**
   * Gets the value of the 'neuHadFrac' field.
   */
  public java.lang.Float getNeuHadFrac() {
    return neuHadFrac;
  }

  /**
   * Sets the value of the 'neuHadFrac' field.
   * @param value the value to set.
   */
  public void setNeuHadFrac(java.lang.Float value) {
    this.neuHadFrac = value;
  }

  /**
   * Gets the value of the 'muonFrac' field.
   */
  public java.lang.Float getMuonFrac() {
    return muonFrac;
  }

  /**
   * Sets the value of the 'muonFrac' field.
   * @param value the value to set.
   */
  public void setMuonFrac(java.lang.Float value) {
    this.muonFrac = value;
  }

  /**
   * Gets the value of the 'genpt' field.
   */
  public java.lang.Float getGenpt() {
    return genpt;
  }

  /**
   * Sets the value of the 'genpt' field.
   * @param value the value to set.
   */
  public void setGenpt(java.lang.Float value) {
    this.genpt = value;
  }

  /**
   * Gets the value of the 'geneta' field.
   */
  public java.lang.Float getGeneta() {
    return geneta;
  }

  /**
   * Sets the value of the 'geneta' field.
   * @param value the value to set.
   */
  public void setGeneta(java.lang.Float value) {
    this.geneta = value;
  }

  /**
   * Gets the value of the 'genphi' field.
   */
  public java.lang.Float getGenphi() {
    return genphi;
  }

  /**
   * Sets the value of the 'genphi' field.
   * @param value the value to set.
   */
  public void setGenphi(java.lang.Float value) {
    this.genphi = value;
  }

  /**
   * Gets the value of the 'genm' field.
   */
  public java.lang.Float getGenm() {
    return genm;
  }

  /**
   * Sets the value of the 'genm' field.
   * @param value the value to set.
   */
  public void setGenm(java.lang.Float value) {
    this.genm = value;
  }

  /**
   * Gets the value of the 'partonFlavor' field.
   */
  public java.lang.Integer getPartonFlavor() {
    return partonFlavor;
  }

  /**
   * Sets the value of the 'partonFlavor' field.
   * @param value the value to set.
   */
  public void setPartonFlavor(java.lang.Integer value) {
    this.partonFlavor = value;
  }

  /**
   * Gets the value of the 'hadronFlavor' field.
   */
  public java.lang.Integer getHadronFlavor() {
    return hadronFlavor;
  }

  /**
   * Sets the value of the 'hadronFlavor' field.
   * @param value the value to set.
   */
  public void setHadronFlavor(java.lang.Integer value) {
    this.hadronFlavor = value;
  }

  /**
   * Gets the value of the 'nCharged' field.
   */
  public java.lang.Long getNCharged() {
    return nCharged;
  }

  /**
   * Sets the value of the 'nCharged' field.
   * @param value the value to set.
   */
  public void setNCharged(java.lang.Long value) {
    this.nCharged = value;
  }

  /**
   * Gets the value of the 'nNeutrals' field.
   */
  public java.lang.Long getNNeutrals() {
    return nNeutrals;
  }

  /**
   * Sets the value of the 'nNeutrals' field.
   * @param value the value to set.
   */
  public void setNNeutrals(java.lang.Long value) {
    this.nNeutrals = value;
  }

  /**
   * Gets the value of the 'nParticles' field.
   */
  public java.lang.Long getNParticles() {
    return nParticles;
  }

  /**
   * Sets the value of the 'nParticles' field.
   * @param value the value to set.
   */
  public void setNParticles(java.lang.Long value) {
    this.nParticles = value;
  }

  /** Creates a new TJet RecordBuilder */
  public static baconhep.TJet.Builder newBuilder() {
    return new baconhep.TJet.Builder();
  }
  
  /** Creates a new TJet RecordBuilder by copying an existing Builder */
  public static baconhep.TJet.Builder newBuilder(baconhep.TJet.Builder other) {
    return new baconhep.TJet.Builder(other);
  }
  
  /** Creates a new TJet RecordBuilder by copying an existing TJet instance */
  public static baconhep.TJet.Builder newBuilder(baconhep.TJet other) {
    return new baconhep.TJet.Builder(other);
  }
  
  /**
   * RecordBuilder for TJet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TJet>
    implements org.apache.avro.data.RecordBuilder<TJet> {

    private float pt;
    private float eta;
    private float phi;
    private float mass;
    private float ptRaw;
    private float unc;
    private float area;
    private float d0;
    private float dz;
    private float csv;
    private float bmva;
    private float cvb;
    private float cvl;
    private float qgid;
    private float axis2;
    private float ptD;
    private int mult;
    private float q;
    private float mva;
    private float beta;
    private float betaStar;
    private float dR2Mean;
    private float pullY;
    private float pullPhi;
    private float chPullY;
    private float chPullPhi;
    private float neuPullY;
    private float neuPullPhi;
    private float chEmFrac;
    private float neuEmFrac;
    private float chHadFrac;
    private float neuHadFrac;
    private float muonFrac;
    private float genpt;
    private float geneta;
    private float genphi;
    private float genm;
    private int partonFlavor;
    private int hadronFlavor;
    private long nCharged;
    private long nNeutrals;
    private long nParticles;

    /** Creates a new Builder */
    private Builder() {
      super(baconhep.TJet.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(baconhep.TJet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.pt)) {
        this.pt = data().deepCopy(fields()[0].schema(), other.pt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eta)) {
        this.eta = data().deepCopy(fields()[1].schema(), other.eta);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phi)) {
        this.phi = data().deepCopy(fields()[2].schema(), other.phi);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mass)) {
        this.mass = data().deepCopy(fields()[3].schema(), other.mass);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ptRaw)) {
        this.ptRaw = data().deepCopy(fields()[4].schema(), other.ptRaw);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.unc)) {
        this.unc = data().deepCopy(fields()[5].schema(), other.unc);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.area)) {
        this.area = data().deepCopy(fields()[6].schema(), other.area);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.d0)) {
        this.d0 = data().deepCopy(fields()[7].schema(), other.d0);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.dz)) {
        this.dz = data().deepCopy(fields()[8].schema(), other.dz);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.csv)) {
        this.csv = data().deepCopy(fields()[9].schema(), other.csv);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.bmva)) {
        this.bmva = data().deepCopy(fields()[10].schema(), other.bmva);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.cvb)) {
        this.cvb = data().deepCopy(fields()[11].schema(), other.cvb);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.cvl)) {
        this.cvl = data().deepCopy(fields()[12].schema(), other.cvl);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.qgid)) {
        this.qgid = data().deepCopy(fields()[13].schema(), other.qgid);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.axis2)) {
        this.axis2 = data().deepCopy(fields()[14].schema(), other.axis2);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.ptD)) {
        this.ptD = data().deepCopy(fields()[15].schema(), other.ptD);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.mult)) {
        this.mult = data().deepCopy(fields()[16].schema(), other.mult);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.q)) {
        this.q = data().deepCopy(fields()[17].schema(), other.q);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.mva)) {
        this.mva = data().deepCopy(fields()[18].schema(), other.mva);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.beta)) {
        this.beta = data().deepCopy(fields()[19].schema(), other.beta);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.betaStar)) {
        this.betaStar = data().deepCopy(fields()[20].schema(), other.betaStar);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.dR2Mean)) {
        this.dR2Mean = data().deepCopy(fields()[21].schema(), other.dR2Mean);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.pullY)) {
        this.pullY = data().deepCopy(fields()[22].schema(), other.pullY);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.pullPhi)) {
        this.pullPhi = data().deepCopy(fields()[23].schema(), other.pullPhi);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.chPullY)) {
        this.chPullY = data().deepCopy(fields()[24].schema(), other.chPullY);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.chPullPhi)) {
        this.chPullPhi = data().deepCopy(fields()[25].schema(), other.chPullPhi);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.neuPullY)) {
        this.neuPullY = data().deepCopy(fields()[26].schema(), other.neuPullY);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.neuPullPhi)) {
        this.neuPullPhi = data().deepCopy(fields()[27].schema(), other.neuPullPhi);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.chEmFrac)) {
        this.chEmFrac = data().deepCopy(fields()[28].schema(), other.chEmFrac);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.neuEmFrac)) {
        this.neuEmFrac = data().deepCopy(fields()[29].schema(), other.neuEmFrac);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.chHadFrac)) {
        this.chHadFrac = data().deepCopy(fields()[30].schema(), other.chHadFrac);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.neuHadFrac)) {
        this.neuHadFrac = data().deepCopy(fields()[31].schema(), other.neuHadFrac);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.muonFrac)) {
        this.muonFrac = data().deepCopy(fields()[32].schema(), other.muonFrac);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.genpt)) {
        this.genpt = data().deepCopy(fields()[33].schema(), other.genpt);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.geneta)) {
        this.geneta = data().deepCopy(fields()[34].schema(), other.geneta);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.genphi)) {
        this.genphi = data().deepCopy(fields()[35].schema(), other.genphi);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.genm)) {
        this.genm = data().deepCopy(fields()[36].schema(), other.genm);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.partonFlavor)) {
        this.partonFlavor = data().deepCopy(fields()[37].schema(), other.partonFlavor);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.hadronFlavor)) {
        this.hadronFlavor = data().deepCopy(fields()[38].schema(), other.hadronFlavor);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.nCharged)) {
        this.nCharged = data().deepCopy(fields()[39].schema(), other.nCharged);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.nNeutrals)) {
        this.nNeutrals = data().deepCopy(fields()[40].schema(), other.nNeutrals);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.nParticles)) {
        this.nParticles = data().deepCopy(fields()[41].schema(), other.nParticles);
        fieldSetFlags()[41] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TJet instance */
    private Builder(baconhep.TJet other) {
            super(baconhep.TJet.SCHEMA$);
      if (isValidValue(fields()[0], other.pt)) {
        this.pt = data().deepCopy(fields()[0].schema(), other.pt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eta)) {
        this.eta = data().deepCopy(fields()[1].schema(), other.eta);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phi)) {
        this.phi = data().deepCopy(fields()[2].schema(), other.phi);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mass)) {
        this.mass = data().deepCopy(fields()[3].schema(), other.mass);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ptRaw)) {
        this.ptRaw = data().deepCopy(fields()[4].schema(), other.ptRaw);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.unc)) {
        this.unc = data().deepCopy(fields()[5].schema(), other.unc);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.area)) {
        this.area = data().deepCopy(fields()[6].schema(), other.area);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.d0)) {
        this.d0 = data().deepCopy(fields()[7].schema(), other.d0);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.dz)) {
        this.dz = data().deepCopy(fields()[8].schema(), other.dz);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.csv)) {
        this.csv = data().deepCopy(fields()[9].schema(), other.csv);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.bmva)) {
        this.bmva = data().deepCopy(fields()[10].schema(), other.bmva);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.cvb)) {
        this.cvb = data().deepCopy(fields()[11].schema(), other.cvb);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.cvl)) {
        this.cvl = data().deepCopy(fields()[12].schema(), other.cvl);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.qgid)) {
        this.qgid = data().deepCopy(fields()[13].schema(), other.qgid);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.axis2)) {
        this.axis2 = data().deepCopy(fields()[14].schema(), other.axis2);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.ptD)) {
        this.ptD = data().deepCopy(fields()[15].schema(), other.ptD);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.mult)) {
        this.mult = data().deepCopy(fields()[16].schema(), other.mult);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.q)) {
        this.q = data().deepCopy(fields()[17].schema(), other.q);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.mva)) {
        this.mva = data().deepCopy(fields()[18].schema(), other.mva);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.beta)) {
        this.beta = data().deepCopy(fields()[19].schema(), other.beta);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.betaStar)) {
        this.betaStar = data().deepCopy(fields()[20].schema(), other.betaStar);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.dR2Mean)) {
        this.dR2Mean = data().deepCopy(fields()[21].schema(), other.dR2Mean);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.pullY)) {
        this.pullY = data().deepCopy(fields()[22].schema(), other.pullY);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.pullPhi)) {
        this.pullPhi = data().deepCopy(fields()[23].schema(), other.pullPhi);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.chPullY)) {
        this.chPullY = data().deepCopy(fields()[24].schema(), other.chPullY);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.chPullPhi)) {
        this.chPullPhi = data().deepCopy(fields()[25].schema(), other.chPullPhi);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.neuPullY)) {
        this.neuPullY = data().deepCopy(fields()[26].schema(), other.neuPullY);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.neuPullPhi)) {
        this.neuPullPhi = data().deepCopy(fields()[27].schema(), other.neuPullPhi);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.chEmFrac)) {
        this.chEmFrac = data().deepCopy(fields()[28].schema(), other.chEmFrac);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.neuEmFrac)) {
        this.neuEmFrac = data().deepCopy(fields()[29].schema(), other.neuEmFrac);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.chHadFrac)) {
        this.chHadFrac = data().deepCopy(fields()[30].schema(), other.chHadFrac);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.neuHadFrac)) {
        this.neuHadFrac = data().deepCopy(fields()[31].schema(), other.neuHadFrac);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.muonFrac)) {
        this.muonFrac = data().deepCopy(fields()[32].schema(), other.muonFrac);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.genpt)) {
        this.genpt = data().deepCopy(fields()[33].schema(), other.genpt);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.geneta)) {
        this.geneta = data().deepCopy(fields()[34].schema(), other.geneta);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.genphi)) {
        this.genphi = data().deepCopy(fields()[35].schema(), other.genphi);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.genm)) {
        this.genm = data().deepCopy(fields()[36].schema(), other.genm);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.partonFlavor)) {
        this.partonFlavor = data().deepCopy(fields()[37].schema(), other.partonFlavor);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.hadronFlavor)) {
        this.hadronFlavor = data().deepCopy(fields()[38].schema(), other.hadronFlavor);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.nCharged)) {
        this.nCharged = data().deepCopy(fields()[39].schema(), other.nCharged);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.nNeutrals)) {
        this.nNeutrals = data().deepCopy(fields()[40].schema(), other.nNeutrals);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.nParticles)) {
        this.nParticles = data().deepCopy(fields()[41].schema(), other.nParticles);
        fieldSetFlags()[41] = true;
      }
    }

    /** Gets the value of the 'pt' field */
    public java.lang.Float getPt() {
      return pt;
    }
    
    /** Sets the value of the 'pt' field */
    public baconhep.TJet.Builder setPt(float value) {
      validate(fields()[0], value);
      this.pt = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'pt' field has been set */
    public boolean hasPt() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'pt' field */
    public baconhep.TJet.Builder clearPt() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'eta' field */
    public java.lang.Float getEta() {
      return eta;
    }
    
    /** Sets the value of the 'eta' field */
    public baconhep.TJet.Builder setEta(float value) {
      validate(fields()[1], value);
      this.eta = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'eta' field has been set */
    public boolean hasEta() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'eta' field */
    public baconhep.TJet.Builder clearEta() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'phi' field */
    public java.lang.Float getPhi() {
      return phi;
    }
    
    /** Sets the value of the 'phi' field */
    public baconhep.TJet.Builder setPhi(float value) {
      validate(fields()[2], value);
      this.phi = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'phi' field has been set */
    public boolean hasPhi() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'phi' field */
    public baconhep.TJet.Builder clearPhi() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'mass' field */
    public java.lang.Float getMass() {
      return mass;
    }
    
    /** Sets the value of the 'mass' field */
    public baconhep.TJet.Builder setMass(float value) {
      validate(fields()[3], value);
      this.mass = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'mass' field has been set */
    public boolean hasMass() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'mass' field */
    public baconhep.TJet.Builder clearMass() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'ptRaw' field */
    public java.lang.Float getPtRaw() {
      return ptRaw;
    }
    
    /** Sets the value of the 'ptRaw' field */
    public baconhep.TJet.Builder setPtRaw(float value) {
      validate(fields()[4], value);
      this.ptRaw = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'ptRaw' field has been set */
    public boolean hasPtRaw() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'ptRaw' field */
    public baconhep.TJet.Builder clearPtRaw() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'unc' field */
    public java.lang.Float getUnc() {
      return unc;
    }
    
    /** Sets the value of the 'unc' field */
    public baconhep.TJet.Builder setUnc(float value) {
      validate(fields()[5], value);
      this.unc = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'unc' field has been set */
    public boolean hasUnc() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'unc' field */
    public baconhep.TJet.Builder clearUnc() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'area' field */
    public java.lang.Float getArea() {
      return area;
    }
    
    /** Sets the value of the 'area' field */
    public baconhep.TJet.Builder setArea(float value) {
      validate(fields()[6], value);
      this.area = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'area' field has been set */
    public boolean hasArea() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'area' field */
    public baconhep.TJet.Builder clearArea() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'd0' field */
    public java.lang.Float getD0() {
      return d0;
    }
    
    /** Sets the value of the 'd0' field */
    public baconhep.TJet.Builder setD0(float value) {
      validate(fields()[7], value);
      this.d0 = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'd0' field has been set */
    public boolean hasD0() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'd0' field */
    public baconhep.TJet.Builder clearD0() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'dz' field */
    public java.lang.Float getDz() {
      return dz;
    }
    
    /** Sets the value of the 'dz' field */
    public baconhep.TJet.Builder setDz(float value) {
      validate(fields()[8], value);
      this.dz = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'dz' field has been set */
    public boolean hasDz() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'dz' field */
    public baconhep.TJet.Builder clearDz() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'csv' field */
    public java.lang.Float getCsv() {
      return csv;
    }
    
    /** Sets the value of the 'csv' field */
    public baconhep.TJet.Builder setCsv(float value) {
      validate(fields()[9], value);
      this.csv = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'csv' field has been set */
    public boolean hasCsv() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'csv' field */
    public baconhep.TJet.Builder clearCsv() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'bmva' field */
    public java.lang.Float getBmva() {
      return bmva;
    }
    
    /** Sets the value of the 'bmva' field */
    public baconhep.TJet.Builder setBmva(float value) {
      validate(fields()[10], value);
      this.bmva = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'bmva' field has been set */
    public boolean hasBmva() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'bmva' field */
    public baconhep.TJet.Builder clearBmva() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'cvb' field */
    public java.lang.Float getCvb() {
      return cvb;
    }
    
    /** Sets the value of the 'cvb' field */
    public baconhep.TJet.Builder setCvb(float value) {
      validate(fields()[11], value);
      this.cvb = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'cvb' field has been set */
    public boolean hasCvb() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'cvb' field */
    public baconhep.TJet.Builder clearCvb() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'cvl' field */
    public java.lang.Float getCvl() {
      return cvl;
    }
    
    /** Sets the value of the 'cvl' field */
    public baconhep.TJet.Builder setCvl(float value) {
      validate(fields()[12], value);
      this.cvl = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'cvl' field has been set */
    public boolean hasCvl() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'cvl' field */
    public baconhep.TJet.Builder clearCvl() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'qgid' field */
    public java.lang.Float getQgid() {
      return qgid;
    }
    
    /** Sets the value of the 'qgid' field */
    public baconhep.TJet.Builder setQgid(float value) {
      validate(fields()[13], value);
      this.qgid = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'qgid' field has been set */
    public boolean hasQgid() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'qgid' field */
    public baconhep.TJet.Builder clearQgid() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'axis2' field */
    public java.lang.Float getAxis2() {
      return axis2;
    }
    
    /** Sets the value of the 'axis2' field */
    public baconhep.TJet.Builder setAxis2(float value) {
      validate(fields()[14], value);
      this.axis2 = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'axis2' field has been set */
    public boolean hasAxis2() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'axis2' field */
    public baconhep.TJet.Builder clearAxis2() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'ptD' field */
    public java.lang.Float getPtD() {
      return ptD;
    }
    
    /** Sets the value of the 'ptD' field */
    public baconhep.TJet.Builder setPtD(float value) {
      validate(fields()[15], value);
      this.ptD = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'ptD' field has been set */
    public boolean hasPtD() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'ptD' field */
    public baconhep.TJet.Builder clearPtD() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'mult' field */
    public java.lang.Integer getMult() {
      return mult;
    }
    
    /** Sets the value of the 'mult' field */
    public baconhep.TJet.Builder setMult(int value) {
      validate(fields()[16], value);
      this.mult = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'mult' field has been set */
    public boolean hasMult() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'mult' field */
    public baconhep.TJet.Builder clearMult() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'q' field */
    public java.lang.Float getQ() {
      return q;
    }
    
    /** Sets the value of the 'q' field */
    public baconhep.TJet.Builder setQ(float value) {
      validate(fields()[17], value);
      this.q = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'q' field has been set */
    public boolean hasQ() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'q' field */
    public baconhep.TJet.Builder clearQ() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'mva' field */
    public java.lang.Float getMva() {
      return mva;
    }
    
    /** Sets the value of the 'mva' field */
    public baconhep.TJet.Builder setMva(float value) {
      validate(fields()[18], value);
      this.mva = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'mva' field has been set */
    public boolean hasMva() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'mva' field */
    public baconhep.TJet.Builder clearMva() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'beta' field */
    public java.lang.Float getBeta() {
      return beta;
    }
    
    /** Sets the value of the 'beta' field */
    public baconhep.TJet.Builder setBeta(float value) {
      validate(fields()[19], value);
      this.beta = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'beta' field has been set */
    public boolean hasBeta() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'beta' field */
    public baconhep.TJet.Builder clearBeta() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'betaStar' field */
    public java.lang.Float getBetaStar() {
      return betaStar;
    }
    
    /** Sets the value of the 'betaStar' field */
    public baconhep.TJet.Builder setBetaStar(float value) {
      validate(fields()[20], value);
      this.betaStar = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'betaStar' field has been set */
    public boolean hasBetaStar() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'betaStar' field */
    public baconhep.TJet.Builder clearBetaStar() {
      fieldSetFlags()[20] = false;
      return this;
    }

    /** Gets the value of the 'dR2Mean' field */
    public java.lang.Float getDR2Mean() {
      return dR2Mean;
    }
    
    /** Sets the value of the 'dR2Mean' field */
    public baconhep.TJet.Builder setDR2Mean(float value) {
      validate(fields()[21], value);
      this.dR2Mean = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'dR2Mean' field has been set */
    public boolean hasDR2Mean() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'dR2Mean' field */
    public baconhep.TJet.Builder clearDR2Mean() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /** Gets the value of the 'pullY' field */
    public java.lang.Float getPullY() {
      return pullY;
    }
    
    /** Sets the value of the 'pullY' field */
    public baconhep.TJet.Builder setPullY(float value) {
      validate(fields()[22], value);
      this.pullY = value;
      fieldSetFlags()[22] = true;
      return this; 
    }
    
    /** Checks whether the 'pullY' field has been set */
    public boolean hasPullY() {
      return fieldSetFlags()[22];
    }
    
    /** Clears the value of the 'pullY' field */
    public baconhep.TJet.Builder clearPullY() {
      fieldSetFlags()[22] = false;
      return this;
    }

    /** Gets the value of the 'pullPhi' field */
    public java.lang.Float getPullPhi() {
      return pullPhi;
    }
    
    /** Sets the value of the 'pullPhi' field */
    public baconhep.TJet.Builder setPullPhi(float value) {
      validate(fields()[23], value);
      this.pullPhi = value;
      fieldSetFlags()[23] = true;
      return this; 
    }
    
    /** Checks whether the 'pullPhi' field has been set */
    public boolean hasPullPhi() {
      return fieldSetFlags()[23];
    }
    
    /** Clears the value of the 'pullPhi' field */
    public baconhep.TJet.Builder clearPullPhi() {
      fieldSetFlags()[23] = false;
      return this;
    }

    /** Gets the value of the 'chPullY' field */
    public java.lang.Float getChPullY() {
      return chPullY;
    }
    
    /** Sets the value of the 'chPullY' field */
    public baconhep.TJet.Builder setChPullY(float value) {
      validate(fields()[24], value);
      this.chPullY = value;
      fieldSetFlags()[24] = true;
      return this; 
    }
    
    /** Checks whether the 'chPullY' field has been set */
    public boolean hasChPullY() {
      return fieldSetFlags()[24];
    }
    
    /** Clears the value of the 'chPullY' field */
    public baconhep.TJet.Builder clearChPullY() {
      fieldSetFlags()[24] = false;
      return this;
    }

    /** Gets the value of the 'chPullPhi' field */
    public java.lang.Float getChPullPhi() {
      return chPullPhi;
    }
    
    /** Sets the value of the 'chPullPhi' field */
    public baconhep.TJet.Builder setChPullPhi(float value) {
      validate(fields()[25], value);
      this.chPullPhi = value;
      fieldSetFlags()[25] = true;
      return this; 
    }
    
    /** Checks whether the 'chPullPhi' field has been set */
    public boolean hasChPullPhi() {
      return fieldSetFlags()[25];
    }
    
    /** Clears the value of the 'chPullPhi' field */
    public baconhep.TJet.Builder clearChPullPhi() {
      fieldSetFlags()[25] = false;
      return this;
    }

    /** Gets the value of the 'neuPullY' field */
    public java.lang.Float getNeuPullY() {
      return neuPullY;
    }
    
    /** Sets the value of the 'neuPullY' field */
    public baconhep.TJet.Builder setNeuPullY(float value) {
      validate(fields()[26], value);
      this.neuPullY = value;
      fieldSetFlags()[26] = true;
      return this; 
    }
    
    /** Checks whether the 'neuPullY' field has been set */
    public boolean hasNeuPullY() {
      return fieldSetFlags()[26];
    }
    
    /** Clears the value of the 'neuPullY' field */
    public baconhep.TJet.Builder clearNeuPullY() {
      fieldSetFlags()[26] = false;
      return this;
    }

    /** Gets the value of the 'neuPullPhi' field */
    public java.lang.Float getNeuPullPhi() {
      return neuPullPhi;
    }
    
    /** Sets the value of the 'neuPullPhi' field */
    public baconhep.TJet.Builder setNeuPullPhi(float value) {
      validate(fields()[27], value);
      this.neuPullPhi = value;
      fieldSetFlags()[27] = true;
      return this; 
    }
    
    /** Checks whether the 'neuPullPhi' field has been set */
    public boolean hasNeuPullPhi() {
      return fieldSetFlags()[27];
    }
    
    /** Clears the value of the 'neuPullPhi' field */
    public baconhep.TJet.Builder clearNeuPullPhi() {
      fieldSetFlags()[27] = false;
      return this;
    }

    /** Gets the value of the 'chEmFrac' field */
    public java.lang.Float getChEmFrac() {
      return chEmFrac;
    }
    
    /** Sets the value of the 'chEmFrac' field */
    public baconhep.TJet.Builder setChEmFrac(float value) {
      validate(fields()[28], value);
      this.chEmFrac = value;
      fieldSetFlags()[28] = true;
      return this; 
    }
    
    /** Checks whether the 'chEmFrac' field has been set */
    public boolean hasChEmFrac() {
      return fieldSetFlags()[28];
    }
    
    /** Clears the value of the 'chEmFrac' field */
    public baconhep.TJet.Builder clearChEmFrac() {
      fieldSetFlags()[28] = false;
      return this;
    }

    /** Gets the value of the 'neuEmFrac' field */
    public java.lang.Float getNeuEmFrac() {
      return neuEmFrac;
    }
    
    /** Sets the value of the 'neuEmFrac' field */
    public baconhep.TJet.Builder setNeuEmFrac(float value) {
      validate(fields()[29], value);
      this.neuEmFrac = value;
      fieldSetFlags()[29] = true;
      return this; 
    }
    
    /** Checks whether the 'neuEmFrac' field has been set */
    public boolean hasNeuEmFrac() {
      return fieldSetFlags()[29];
    }
    
    /** Clears the value of the 'neuEmFrac' field */
    public baconhep.TJet.Builder clearNeuEmFrac() {
      fieldSetFlags()[29] = false;
      return this;
    }

    /** Gets the value of the 'chHadFrac' field */
    public java.lang.Float getChHadFrac() {
      return chHadFrac;
    }
    
    /** Sets the value of the 'chHadFrac' field */
    public baconhep.TJet.Builder setChHadFrac(float value) {
      validate(fields()[30], value);
      this.chHadFrac = value;
      fieldSetFlags()[30] = true;
      return this; 
    }
    
    /** Checks whether the 'chHadFrac' field has been set */
    public boolean hasChHadFrac() {
      return fieldSetFlags()[30];
    }
    
    /** Clears the value of the 'chHadFrac' field */
    public baconhep.TJet.Builder clearChHadFrac() {
      fieldSetFlags()[30] = false;
      return this;
    }

    /** Gets the value of the 'neuHadFrac' field */
    public java.lang.Float getNeuHadFrac() {
      return neuHadFrac;
    }
    
    /** Sets the value of the 'neuHadFrac' field */
    public baconhep.TJet.Builder setNeuHadFrac(float value) {
      validate(fields()[31], value);
      this.neuHadFrac = value;
      fieldSetFlags()[31] = true;
      return this; 
    }
    
    /** Checks whether the 'neuHadFrac' field has been set */
    public boolean hasNeuHadFrac() {
      return fieldSetFlags()[31];
    }
    
    /** Clears the value of the 'neuHadFrac' field */
    public baconhep.TJet.Builder clearNeuHadFrac() {
      fieldSetFlags()[31] = false;
      return this;
    }

    /** Gets the value of the 'muonFrac' field */
    public java.lang.Float getMuonFrac() {
      return muonFrac;
    }
    
    /** Sets the value of the 'muonFrac' field */
    public baconhep.TJet.Builder setMuonFrac(float value) {
      validate(fields()[32], value);
      this.muonFrac = value;
      fieldSetFlags()[32] = true;
      return this; 
    }
    
    /** Checks whether the 'muonFrac' field has been set */
    public boolean hasMuonFrac() {
      return fieldSetFlags()[32];
    }
    
    /** Clears the value of the 'muonFrac' field */
    public baconhep.TJet.Builder clearMuonFrac() {
      fieldSetFlags()[32] = false;
      return this;
    }

    /** Gets the value of the 'genpt' field */
    public java.lang.Float getGenpt() {
      return genpt;
    }
    
    /** Sets the value of the 'genpt' field */
    public baconhep.TJet.Builder setGenpt(float value) {
      validate(fields()[33], value);
      this.genpt = value;
      fieldSetFlags()[33] = true;
      return this; 
    }
    
    /** Checks whether the 'genpt' field has been set */
    public boolean hasGenpt() {
      return fieldSetFlags()[33];
    }
    
    /** Clears the value of the 'genpt' field */
    public baconhep.TJet.Builder clearGenpt() {
      fieldSetFlags()[33] = false;
      return this;
    }

    /** Gets the value of the 'geneta' field */
    public java.lang.Float getGeneta() {
      return geneta;
    }
    
    /** Sets the value of the 'geneta' field */
    public baconhep.TJet.Builder setGeneta(float value) {
      validate(fields()[34], value);
      this.geneta = value;
      fieldSetFlags()[34] = true;
      return this; 
    }
    
    /** Checks whether the 'geneta' field has been set */
    public boolean hasGeneta() {
      return fieldSetFlags()[34];
    }
    
    /** Clears the value of the 'geneta' field */
    public baconhep.TJet.Builder clearGeneta() {
      fieldSetFlags()[34] = false;
      return this;
    }

    /** Gets the value of the 'genphi' field */
    public java.lang.Float getGenphi() {
      return genphi;
    }
    
    /** Sets the value of the 'genphi' field */
    public baconhep.TJet.Builder setGenphi(float value) {
      validate(fields()[35], value);
      this.genphi = value;
      fieldSetFlags()[35] = true;
      return this; 
    }
    
    /** Checks whether the 'genphi' field has been set */
    public boolean hasGenphi() {
      return fieldSetFlags()[35];
    }
    
    /** Clears the value of the 'genphi' field */
    public baconhep.TJet.Builder clearGenphi() {
      fieldSetFlags()[35] = false;
      return this;
    }

    /** Gets the value of the 'genm' field */
    public java.lang.Float getGenm() {
      return genm;
    }
    
    /** Sets the value of the 'genm' field */
    public baconhep.TJet.Builder setGenm(float value) {
      validate(fields()[36], value);
      this.genm = value;
      fieldSetFlags()[36] = true;
      return this; 
    }
    
    /** Checks whether the 'genm' field has been set */
    public boolean hasGenm() {
      return fieldSetFlags()[36];
    }
    
    /** Clears the value of the 'genm' field */
    public baconhep.TJet.Builder clearGenm() {
      fieldSetFlags()[36] = false;
      return this;
    }

    /** Gets the value of the 'partonFlavor' field */
    public java.lang.Integer getPartonFlavor() {
      return partonFlavor;
    }
    
    /** Sets the value of the 'partonFlavor' field */
    public baconhep.TJet.Builder setPartonFlavor(int value) {
      validate(fields()[37], value);
      this.partonFlavor = value;
      fieldSetFlags()[37] = true;
      return this; 
    }
    
    /** Checks whether the 'partonFlavor' field has been set */
    public boolean hasPartonFlavor() {
      return fieldSetFlags()[37];
    }
    
    /** Clears the value of the 'partonFlavor' field */
    public baconhep.TJet.Builder clearPartonFlavor() {
      fieldSetFlags()[37] = false;
      return this;
    }

    /** Gets the value of the 'hadronFlavor' field */
    public java.lang.Integer getHadronFlavor() {
      return hadronFlavor;
    }
    
    /** Sets the value of the 'hadronFlavor' field */
    public baconhep.TJet.Builder setHadronFlavor(int value) {
      validate(fields()[38], value);
      this.hadronFlavor = value;
      fieldSetFlags()[38] = true;
      return this; 
    }
    
    /** Checks whether the 'hadronFlavor' field has been set */
    public boolean hasHadronFlavor() {
      return fieldSetFlags()[38];
    }
    
    /** Clears the value of the 'hadronFlavor' field */
    public baconhep.TJet.Builder clearHadronFlavor() {
      fieldSetFlags()[38] = false;
      return this;
    }

    /** Gets the value of the 'nCharged' field */
    public java.lang.Long getNCharged() {
      return nCharged;
    }
    
    /** Sets the value of the 'nCharged' field */
    public baconhep.TJet.Builder setNCharged(long value) {
      validate(fields()[39], value);
      this.nCharged = value;
      fieldSetFlags()[39] = true;
      return this; 
    }
    
    /** Checks whether the 'nCharged' field has been set */
    public boolean hasNCharged() {
      return fieldSetFlags()[39];
    }
    
    /** Clears the value of the 'nCharged' field */
    public baconhep.TJet.Builder clearNCharged() {
      fieldSetFlags()[39] = false;
      return this;
    }

    /** Gets the value of the 'nNeutrals' field */
    public java.lang.Long getNNeutrals() {
      return nNeutrals;
    }
    
    /** Sets the value of the 'nNeutrals' field */
    public baconhep.TJet.Builder setNNeutrals(long value) {
      validate(fields()[40], value);
      this.nNeutrals = value;
      fieldSetFlags()[40] = true;
      return this; 
    }
    
    /** Checks whether the 'nNeutrals' field has been set */
    public boolean hasNNeutrals() {
      return fieldSetFlags()[40];
    }
    
    /** Clears the value of the 'nNeutrals' field */
    public baconhep.TJet.Builder clearNNeutrals() {
      fieldSetFlags()[40] = false;
      return this;
    }

    /** Gets the value of the 'nParticles' field */
    public java.lang.Long getNParticles() {
      return nParticles;
    }
    
    /** Sets the value of the 'nParticles' field */
    public baconhep.TJet.Builder setNParticles(long value) {
      validate(fields()[41], value);
      this.nParticles = value;
      fieldSetFlags()[41] = true;
      return this; 
    }
    
    /** Checks whether the 'nParticles' field has been set */
    public boolean hasNParticles() {
      return fieldSetFlags()[41];
    }
    
    /** Clears the value of the 'nParticles' field */
    public baconhep.TJet.Builder clearNParticles() {
      fieldSetFlags()[41] = false;
      return this;
    }

    @Override
    public TJet build() {
      try {
        TJet record = new TJet();
        record.pt = fieldSetFlags()[0] ? this.pt : (java.lang.Float) defaultValue(fields()[0]);
        record.eta = fieldSetFlags()[1] ? this.eta : (java.lang.Float) defaultValue(fields()[1]);
        record.phi = fieldSetFlags()[2] ? this.phi : (java.lang.Float) defaultValue(fields()[2]);
        record.mass = fieldSetFlags()[3] ? this.mass : (java.lang.Float) defaultValue(fields()[3]);
        record.ptRaw = fieldSetFlags()[4] ? this.ptRaw : (java.lang.Float) defaultValue(fields()[4]);
        record.unc = fieldSetFlags()[5] ? this.unc : (java.lang.Float) defaultValue(fields()[5]);
        record.area = fieldSetFlags()[6] ? this.area : (java.lang.Float) defaultValue(fields()[6]);
        record.d0 = fieldSetFlags()[7] ? this.d0 : (java.lang.Float) defaultValue(fields()[7]);
        record.dz = fieldSetFlags()[8] ? this.dz : (java.lang.Float) defaultValue(fields()[8]);
        record.csv = fieldSetFlags()[9] ? this.csv : (java.lang.Float) defaultValue(fields()[9]);
        record.bmva = fieldSetFlags()[10] ? this.bmva : (java.lang.Float) defaultValue(fields()[10]);
        record.cvb = fieldSetFlags()[11] ? this.cvb : (java.lang.Float) defaultValue(fields()[11]);
        record.cvl = fieldSetFlags()[12] ? this.cvl : (java.lang.Float) defaultValue(fields()[12]);
        record.qgid = fieldSetFlags()[13] ? this.qgid : (java.lang.Float) defaultValue(fields()[13]);
        record.axis2 = fieldSetFlags()[14] ? this.axis2 : (java.lang.Float) defaultValue(fields()[14]);
        record.ptD = fieldSetFlags()[15] ? this.ptD : (java.lang.Float) defaultValue(fields()[15]);
        record.mult = fieldSetFlags()[16] ? this.mult : (java.lang.Integer) defaultValue(fields()[16]);
        record.q = fieldSetFlags()[17] ? this.q : (java.lang.Float) defaultValue(fields()[17]);
        record.mva = fieldSetFlags()[18] ? this.mva : (java.lang.Float) defaultValue(fields()[18]);
        record.beta = fieldSetFlags()[19] ? this.beta : (java.lang.Float) defaultValue(fields()[19]);
        record.betaStar = fieldSetFlags()[20] ? this.betaStar : (java.lang.Float) defaultValue(fields()[20]);
        record.dR2Mean = fieldSetFlags()[21] ? this.dR2Mean : (java.lang.Float) defaultValue(fields()[21]);
        record.pullY = fieldSetFlags()[22] ? this.pullY : (java.lang.Float) defaultValue(fields()[22]);
        record.pullPhi = fieldSetFlags()[23] ? this.pullPhi : (java.lang.Float) defaultValue(fields()[23]);
        record.chPullY = fieldSetFlags()[24] ? this.chPullY : (java.lang.Float) defaultValue(fields()[24]);
        record.chPullPhi = fieldSetFlags()[25] ? this.chPullPhi : (java.lang.Float) defaultValue(fields()[25]);
        record.neuPullY = fieldSetFlags()[26] ? this.neuPullY : (java.lang.Float) defaultValue(fields()[26]);
        record.neuPullPhi = fieldSetFlags()[27] ? this.neuPullPhi : (java.lang.Float) defaultValue(fields()[27]);
        record.chEmFrac = fieldSetFlags()[28] ? this.chEmFrac : (java.lang.Float) defaultValue(fields()[28]);
        record.neuEmFrac = fieldSetFlags()[29] ? this.neuEmFrac : (java.lang.Float) defaultValue(fields()[29]);
        record.chHadFrac = fieldSetFlags()[30] ? this.chHadFrac : (java.lang.Float) defaultValue(fields()[30]);
        record.neuHadFrac = fieldSetFlags()[31] ? this.neuHadFrac : (java.lang.Float) defaultValue(fields()[31]);
        record.muonFrac = fieldSetFlags()[32] ? this.muonFrac : (java.lang.Float) defaultValue(fields()[32]);
        record.genpt = fieldSetFlags()[33] ? this.genpt : (java.lang.Float) defaultValue(fields()[33]);
        record.geneta = fieldSetFlags()[34] ? this.geneta : (java.lang.Float) defaultValue(fields()[34]);
        record.genphi = fieldSetFlags()[35] ? this.genphi : (java.lang.Float) defaultValue(fields()[35]);
        record.genm = fieldSetFlags()[36] ? this.genm : (java.lang.Float) defaultValue(fields()[36]);
        record.partonFlavor = fieldSetFlags()[37] ? this.partonFlavor : (java.lang.Integer) defaultValue(fields()[37]);
        record.hadronFlavor = fieldSetFlags()[38] ? this.hadronFlavor : (java.lang.Integer) defaultValue(fields()[38]);
        record.nCharged = fieldSetFlags()[39] ? this.nCharged : (java.lang.Long) defaultValue(fields()[39]);
        record.nNeutrals = fieldSetFlags()[40] ? this.nNeutrals : (java.lang.Long) defaultValue(fields()[40]);
        record.nParticles = fieldSetFlags()[41] ? this.nParticles : (java.lang.Long) defaultValue(fields()[41]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
