/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package baconhep;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TGenParticle extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TGenParticle\",\"namespace\":\"baconhep\",\"fields\":[{\"name\":\"parent\",\"type\":\"int\"},{\"name\":\"pdgId\",\"type\":\"int\"},{\"name\":\"status\",\"type\":\"int\"},{\"name\":\"pt\",\"type\":\"float\"},{\"name\":\"eta\",\"type\":\"float\"},{\"name\":\"phi\",\"type\":\"float\"},{\"name\":\"mass\",\"type\":\"float\"},{\"name\":\"y\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int parent;
  @Deprecated public int pdgId;
  @Deprecated public int status;
  @Deprecated public float pt;
  @Deprecated public float eta;
  @Deprecated public float phi;
  @Deprecated public float mass;
  @Deprecated public float y;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TGenParticle() {}

  /**
   * All-args constructor.
   */
  public TGenParticle(java.lang.Integer parent, java.lang.Integer pdgId, java.lang.Integer status, java.lang.Float pt, java.lang.Float eta, java.lang.Float phi, java.lang.Float mass, java.lang.Float y) {
    this.parent = parent;
    this.pdgId = pdgId;
    this.status = status;
    this.pt = pt;
    this.eta = eta;
    this.phi = phi;
    this.mass = mass;
    this.y = y;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return parent;
    case 1: return pdgId;
    case 2: return status;
    case 3: return pt;
    case 4: return eta;
    case 5: return phi;
    case 6: return mass;
    case 7: return y;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: parent = (java.lang.Integer)value$; break;
    case 1: pdgId = (java.lang.Integer)value$; break;
    case 2: status = (java.lang.Integer)value$; break;
    case 3: pt = (java.lang.Float)value$; break;
    case 4: eta = (java.lang.Float)value$; break;
    case 5: phi = (java.lang.Float)value$; break;
    case 6: mass = (java.lang.Float)value$; break;
    case 7: y = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'parent' field.
   */
  public java.lang.Integer getParent() {
    return parent;
  }

  /**
   * Sets the value of the 'parent' field.
   * @param value the value to set.
   */
  public void setParent(java.lang.Integer value) {
    this.parent = value;
  }

  /**
   * Gets the value of the 'pdgId' field.
   */
  public java.lang.Integer getPdgId() {
    return pdgId;
  }

  /**
   * Sets the value of the 'pdgId' field.
   * @param value the value to set.
   */
  public void setPdgId(java.lang.Integer value) {
    this.pdgId = value;
  }

  /**
   * Gets the value of the 'status' field.
   */
  public java.lang.Integer getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.Integer value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'pt' field.
   */
  public java.lang.Float getPt() {
    return pt;
  }

  /**
   * Sets the value of the 'pt' field.
   * @param value the value to set.
   */
  public void setPt(java.lang.Float value) {
    this.pt = value;
  }

  /**
   * Gets the value of the 'eta' field.
   */
  public java.lang.Float getEta() {
    return eta;
  }

  /**
   * Sets the value of the 'eta' field.
   * @param value the value to set.
   */
  public void setEta(java.lang.Float value) {
    this.eta = value;
  }

  /**
   * Gets the value of the 'phi' field.
   */
  public java.lang.Float getPhi() {
    return phi;
  }

  /**
   * Sets the value of the 'phi' field.
   * @param value the value to set.
   */
  public void setPhi(java.lang.Float value) {
    this.phi = value;
  }

  /**
   * Gets the value of the 'mass' field.
   */
  public java.lang.Float getMass() {
    return mass;
  }

  /**
   * Sets the value of the 'mass' field.
   * @param value the value to set.
   */
  public void setMass(java.lang.Float value) {
    this.mass = value;
  }

  /**
   * Gets the value of the 'y' field.
   */
  public java.lang.Float getY() {
    return y;
  }

  /**
   * Sets the value of the 'y' field.
   * @param value the value to set.
   */
  public void setY(java.lang.Float value) {
    this.y = value;
  }

  /** Creates a new TGenParticle RecordBuilder */
  public static baconhep.TGenParticle.Builder newBuilder() {
    return new baconhep.TGenParticle.Builder();
  }
  
  /** Creates a new TGenParticle RecordBuilder by copying an existing Builder */
  public static baconhep.TGenParticle.Builder newBuilder(baconhep.TGenParticle.Builder other) {
    return new baconhep.TGenParticle.Builder(other);
  }
  
  /** Creates a new TGenParticle RecordBuilder by copying an existing TGenParticle instance */
  public static baconhep.TGenParticle.Builder newBuilder(baconhep.TGenParticle other) {
    return new baconhep.TGenParticle.Builder(other);
  }
  
  /**
   * RecordBuilder for TGenParticle instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TGenParticle>
    implements org.apache.avro.data.RecordBuilder<TGenParticle> {

    private int parent;
    private int pdgId;
    private int status;
    private float pt;
    private float eta;
    private float phi;
    private float mass;
    private float y;

    /** Creates a new Builder */
    private Builder() {
      super(baconhep.TGenParticle.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(baconhep.TGenParticle.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.parent)) {
        this.parent = data().deepCopy(fields()[0].schema(), other.parent);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pdgId)) {
        this.pdgId = data().deepCopy(fields()[1].schema(), other.pdgId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pt)) {
        this.pt = data().deepCopy(fields()[3].schema(), other.pt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.eta)) {
        this.eta = data().deepCopy(fields()[4].schema(), other.eta);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.phi)) {
        this.phi = data().deepCopy(fields()[5].schema(), other.phi);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.mass)) {
        this.mass = data().deepCopy(fields()[6].schema(), other.mass);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.y)) {
        this.y = data().deepCopy(fields()[7].schema(), other.y);
        fieldSetFlags()[7] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TGenParticle instance */
    private Builder(baconhep.TGenParticle other) {
            super(baconhep.TGenParticle.SCHEMA$);
      if (isValidValue(fields()[0], other.parent)) {
        this.parent = data().deepCopy(fields()[0].schema(), other.parent);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pdgId)) {
        this.pdgId = data().deepCopy(fields()[1].schema(), other.pdgId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pt)) {
        this.pt = data().deepCopy(fields()[3].schema(), other.pt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.eta)) {
        this.eta = data().deepCopy(fields()[4].schema(), other.eta);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.phi)) {
        this.phi = data().deepCopy(fields()[5].schema(), other.phi);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.mass)) {
        this.mass = data().deepCopy(fields()[6].schema(), other.mass);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.y)) {
        this.y = data().deepCopy(fields()[7].schema(), other.y);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'parent' field */
    public java.lang.Integer getParent() {
      return parent;
    }
    
    /** Sets the value of the 'parent' field */
    public baconhep.TGenParticle.Builder setParent(int value) {
      validate(fields()[0], value);
      this.parent = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'parent' field has been set */
    public boolean hasParent() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'parent' field */
    public baconhep.TGenParticle.Builder clearParent() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'pdgId' field */
    public java.lang.Integer getPdgId() {
      return pdgId;
    }
    
    /** Sets the value of the 'pdgId' field */
    public baconhep.TGenParticle.Builder setPdgId(int value) {
      validate(fields()[1], value);
      this.pdgId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'pdgId' field has been set */
    public boolean hasPdgId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'pdgId' field */
    public baconhep.TGenParticle.Builder clearPdgId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'status' field */
    public java.lang.Integer getStatus() {
      return status;
    }
    
    /** Sets the value of the 'status' field */
    public baconhep.TGenParticle.Builder setStatus(int value) {
      validate(fields()[2], value);
      this.status = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'status' field has been set */
    public boolean hasStatus() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'status' field */
    public baconhep.TGenParticle.Builder clearStatus() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'pt' field */
    public java.lang.Float getPt() {
      return pt;
    }
    
    /** Sets the value of the 'pt' field */
    public baconhep.TGenParticle.Builder setPt(float value) {
      validate(fields()[3], value);
      this.pt = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'pt' field has been set */
    public boolean hasPt() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'pt' field */
    public baconhep.TGenParticle.Builder clearPt() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'eta' field */
    public java.lang.Float getEta() {
      return eta;
    }
    
    /** Sets the value of the 'eta' field */
    public baconhep.TGenParticle.Builder setEta(float value) {
      validate(fields()[4], value);
      this.eta = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'eta' field has been set */
    public boolean hasEta() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'eta' field */
    public baconhep.TGenParticle.Builder clearEta() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'phi' field */
    public java.lang.Float getPhi() {
      return phi;
    }
    
    /** Sets the value of the 'phi' field */
    public baconhep.TGenParticle.Builder setPhi(float value) {
      validate(fields()[5], value);
      this.phi = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'phi' field has been set */
    public boolean hasPhi() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'phi' field */
    public baconhep.TGenParticle.Builder clearPhi() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'mass' field */
    public java.lang.Float getMass() {
      return mass;
    }
    
    /** Sets the value of the 'mass' field */
    public baconhep.TGenParticle.Builder setMass(float value) {
      validate(fields()[6], value);
      this.mass = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'mass' field has been set */
    public boolean hasMass() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'mass' field */
    public baconhep.TGenParticle.Builder clearMass() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'y' field */
    public java.lang.Float getY() {
      return y;
    }
    
    /** Sets the value of the 'y' field */
    public baconhep.TGenParticle.Builder setY(float value) {
      validate(fields()[7], value);
      this.y = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'y' field has been set */
    public boolean hasY() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'y' field */
    public baconhep.TGenParticle.Builder clearY() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public TGenParticle build() {
      try {
        TGenParticle record = new TGenParticle();
        record.parent = fieldSetFlags()[0] ? this.parent : (java.lang.Integer) defaultValue(fields()[0]);
        record.pdgId = fieldSetFlags()[1] ? this.pdgId : (java.lang.Integer) defaultValue(fields()[1]);
        record.status = fieldSetFlags()[2] ? this.status : (java.lang.Integer) defaultValue(fields()[2]);
        record.pt = fieldSetFlags()[3] ? this.pt : (java.lang.Float) defaultValue(fields()[3]);
        record.eta = fieldSetFlags()[4] ? this.eta : (java.lang.Float) defaultValue(fields()[4]);
        record.phi = fieldSetFlags()[5] ? this.phi : (java.lang.Float) defaultValue(fields()[5]);
        record.mass = fieldSetFlags()[6] ? this.mass : (java.lang.Float) defaultValue(fields()[6]);
        record.y = fieldSetFlags()[7] ? this.y : (java.lang.Float) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
