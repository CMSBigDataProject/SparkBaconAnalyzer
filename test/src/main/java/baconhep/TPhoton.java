/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package baconhep;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TPhoton extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TPhoton\",\"namespace\":\"baconhep\",\"fields\":[{\"name\":\"pt\",\"type\":\"float\"},{\"name\":\"eta\",\"type\":\"float\"},{\"name\":\"phi\",\"type\":\"float\"},{\"name\":\"scEt\",\"type\":\"float\"},{\"name\":\"scEta\",\"type\":\"float\"},{\"name\":\"scPhi\",\"type\":\"float\"},{\"name\":\"trkIso\",\"type\":\"float\"},{\"name\":\"ecalIso\",\"type\":\"float\"},{\"name\":\"hcalIso\",\"type\":\"float\"},{\"name\":\"chHadIso\",\"type\":\"float\"},{\"name\":\"gammaIso\",\"type\":\"float\"},{\"name\":\"neuHadIso\",\"type\":\"float\"},{\"name\":\"mva\",\"type\":\"float\"},{\"name\":\"hovere\",\"type\":\"float\"},{\"name\":\"sthovere\",\"type\":\"float\"},{\"name\":\"sieie\",\"type\":\"float\"},{\"name\":\"sipip\",\"type\":\"float\"},{\"name\":\"r9\",\"type\":\"float\"},{\"name\":\"fiducialBits\",\"type\":\"long\"},{\"name\":\"typeBits\",\"type\":\"long\"},{\"name\":\"scID\",\"type\":\"int\"},{\"name\":\"hasPixelSeed\",\"type\":\"boolean\"},{\"name\":\"passElectronVeto\",\"type\":\"boolean\"},{\"name\":\"isConv\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public float pt;
  @Deprecated public float eta;
  @Deprecated public float phi;
  @Deprecated public float scEt;
  @Deprecated public float scEta;
  @Deprecated public float scPhi;
  @Deprecated public float trkIso;
  @Deprecated public float ecalIso;
  @Deprecated public float hcalIso;
  @Deprecated public float chHadIso;
  @Deprecated public float gammaIso;
  @Deprecated public float neuHadIso;
  @Deprecated public float mva;
  @Deprecated public float hovere;
  @Deprecated public float sthovere;
  @Deprecated public float sieie;
  @Deprecated public float sipip;
  @Deprecated public float r9;
  @Deprecated public long fiducialBits;
  @Deprecated public long typeBits;
  @Deprecated public int scID;
  @Deprecated public boolean hasPixelSeed;
  @Deprecated public boolean passElectronVeto;
  @Deprecated public boolean isConv;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TPhoton() {}

  /**
   * All-args constructor.
   */
  public TPhoton(java.lang.Float pt, java.lang.Float eta, java.lang.Float phi, java.lang.Float scEt, java.lang.Float scEta, java.lang.Float scPhi, java.lang.Float trkIso, java.lang.Float ecalIso, java.lang.Float hcalIso, java.lang.Float chHadIso, java.lang.Float gammaIso, java.lang.Float neuHadIso, java.lang.Float mva, java.lang.Float hovere, java.lang.Float sthovere, java.lang.Float sieie, java.lang.Float sipip, java.lang.Float r9, java.lang.Long fiducialBits, java.lang.Long typeBits, java.lang.Integer scID, java.lang.Boolean hasPixelSeed, java.lang.Boolean passElectronVeto, java.lang.Boolean isConv) {
    this.pt = pt;
    this.eta = eta;
    this.phi = phi;
    this.scEt = scEt;
    this.scEta = scEta;
    this.scPhi = scPhi;
    this.trkIso = trkIso;
    this.ecalIso = ecalIso;
    this.hcalIso = hcalIso;
    this.chHadIso = chHadIso;
    this.gammaIso = gammaIso;
    this.neuHadIso = neuHadIso;
    this.mva = mva;
    this.hovere = hovere;
    this.sthovere = sthovere;
    this.sieie = sieie;
    this.sipip = sipip;
    this.r9 = r9;
    this.fiducialBits = fiducialBits;
    this.typeBits = typeBits;
    this.scID = scID;
    this.hasPixelSeed = hasPixelSeed;
    this.passElectronVeto = passElectronVeto;
    this.isConv = isConv;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return pt;
    case 1: return eta;
    case 2: return phi;
    case 3: return scEt;
    case 4: return scEta;
    case 5: return scPhi;
    case 6: return trkIso;
    case 7: return ecalIso;
    case 8: return hcalIso;
    case 9: return chHadIso;
    case 10: return gammaIso;
    case 11: return neuHadIso;
    case 12: return mva;
    case 13: return hovere;
    case 14: return sthovere;
    case 15: return sieie;
    case 16: return sipip;
    case 17: return r9;
    case 18: return fiducialBits;
    case 19: return typeBits;
    case 20: return scID;
    case 21: return hasPixelSeed;
    case 22: return passElectronVeto;
    case 23: return isConv;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: pt = (java.lang.Float)value$; break;
    case 1: eta = (java.lang.Float)value$; break;
    case 2: phi = (java.lang.Float)value$; break;
    case 3: scEt = (java.lang.Float)value$; break;
    case 4: scEta = (java.lang.Float)value$; break;
    case 5: scPhi = (java.lang.Float)value$; break;
    case 6: trkIso = (java.lang.Float)value$; break;
    case 7: ecalIso = (java.lang.Float)value$; break;
    case 8: hcalIso = (java.lang.Float)value$; break;
    case 9: chHadIso = (java.lang.Float)value$; break;
    case 10: gammaIso = (java.lang.Float)value$; break;
    case 11: neuHadIso = (java.lang.Float)value$; break;
    case 12: mva = (java.lang.Float)value$; break;
    case 13: hovere = (java.lang.Float)value$; break;
    case 14: sthovere = (java.lang.Float)value$; break;
    case 15: sieie = (java.lang.Float)value$; break;
    case 16: sipip = (java.lang.Float)value$; break;
    case 17: r9 = (java.lang.Float)value$; break;
    case 18: fiducialBits = (java.lang.Long)value$; break;
    case 19: typeBits = (java.lang.Long)value$; break;
    case 20: scID = (java.lang.Integer)value$; break;
    case 21: hasPixelSeed = (java.lang.Boolean)value$; break;
    case 22: passElectronVeto = (java.lang.Boolean)value$; break;
    case 23: isConv = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'pt' field.
   */
  public java.lang.Float getPt() {
    return pt;
  }

  /**
   * Sets the value of the 'pt' field.
   * @param value the value to set.
   */
  public void setPt(java.lang.Float value) {
    this.pt = value;
  }

  /**
   * Gets the value of the 'eta' field.
   */
  public java.lang.Float getEta() {
    return eta;
  }

  /**
   * Sets the value of the 'eta' field.
   * @param value the value to set.
   */
  public void setEta(java.lang.Float value) {
    this.eta = value;
  }

  /**
   * Gets the value of the 'phi' field.
   */
  public java.lang.Float getPhi() {
    return phi;
  }

  /**
   * Sets the value of the 'phi' field.
   * @param value the value to set.
   */
  public void setPhi(java.lang.Float value) {
    this.phi = value;
  }

  /**
   * Gets the value of the 'scEt' field.
   */
  public java.lang.Float getScEt() {
    return scEt;
  }

  /**
   * Sets the value of the 'scEt' field.
   * @param value the value to set.
   */
  public void setScEt(java.lang.Float value) {
    this.scEt = value;
  }

  /**
   * Gets the value of the 'scEta' field.
   */
  public java.lang.Float getScEta() {
    return scEta;
  }

  /**
   * Sets the value of the 'scEta' field.
   * @param value the value to set.
   */
  public void setScEta(java.lang.Float value) {
    this.scEta = value;
  }

  /**
   * Gets the value of the 'scPhi' field.
   */
  public java.lang.Float getScPhi() {
    return scPhi;
  }

  /**
   * Sets the value of the 'scPhi' field.
   * @param value the value to set.
   */
  public void setScPhi(java.lang.Float value) {
    this.scPhi = value;
  }

  /**
   * Gets the value of the 'trkIso' field.
   */
  public java.lang.Float getTrkIso() {
    return trkIso;
  }

  /**
   * Sets the value of the 'trkIso' field.
   * @param value the value to set.
   */
  public void setTrkIso(java.lang.Float value) {
    this.trkIso = value;
  }

  /**
   * Gets the value of the 'ecalIso' field.
   */
  public java.lang.Float getEcalIso() {
    return ecalIso;
  }

  /**
   * Sets the value of the 'ecalIso' field.
   * @param value the value to set.
   */
  public void setEcalIso(java.lang.Float value) {
    this.ecalIso = value;
  }

  /**
   * Gets the value of the 'hcalIso' field.
   */
  public java.lang.Float getHcalIso() {
    return hcalIso;
  }

  /**
   * Sets the value of the 'hcalIso' field.
   * @param value the value to set.
   */
  public void setHcalIso(java.lang.Float value) {
    this.hcalIso = value;
  }

  /**
   * Gets the value of the 'chHadIso' field.
   */
  public java.lang.Float getChHadIso() {
    return chHadIso;
  }

  /**
   * Sets the value of the 'chHadIso' field.
   * @param value the value to set.
   */
  public void setChHadIso(java.lang.Float value) {
    this.chHadIso = value;
  }

  /**
   * Gets the value of the 'gammaIso' field.
   */
  public java.lang.Float getGammaIso() {
    return gammaIso;
  }

  /**
   * Sets the value of the 'gammaIso' field.
   * @param value the value to set.
   */
  public void setGammaIso(java.lang.Float value) {
    this.gammaIso = value;
  }

  /**
   * Gets the value of the 'neuHadIso' field.
   */
  public java.lang.Float getNeuHadIso() {
    return neuHadIso;
  }

  /**
   * Sets the value of the 'neuHadIso' field.
   * @param value the value to set.
   */
  public void setNeuHadIso(java.lang.Float value) {
    this.neuHadIso = value;
  }

  /**
   * Gets the value of the 'mva' field.
   */
  public java.lang.Float getMva() {
    return mva;
  }

  /**
   * Sets the value of the 'mva' field.
   * @param value the value to set.
   */
  public void setMva(java.lang.Float value) {
    this.mva = value;
  }

  /**
   * Gets the value of the 'hovere' field.
   */
  public java.lang.Float getHovere() {
    return hovere;
  }

  /**
   * Sets the value of the 'hovere' field.
   * @param value the value to set.
   */
  public void setHovere(java.lang.Float value) {
    this.hovere = value;
  }

  /**
   * Gets the value of the 'sthovere' field.
   */
  public java.lang.Float getSthovere() {
    return sthovere;
  }

  /**
   * Sets the value of the 'sthovere' field.
   * @param value the value to set.
   */
  public void setSthovere(java.lang.Float value) {
    this.sthovere = value;
  }

  /**
   * Gets the value of the 'sieie' field.
   */
  public java.lang.Float getSieie() {
    return sieie;
  }

  /**
   * Sets the value of the 'sieie' field.
   * @param value the value to set.
   */
  public void setSieie(java.lang.Float value) {
    this.sieie = value;
  }

  /**
   * Gets the value of the 'sipip' field.
   */
  public java.lang.Float getSipip() {
    return sipip;
  }

  /**
   * Sets the value of the 'sipip' field.
   * @param value the value to set.
   */
  public void setSipip(java.lang.Float value) {
    this.sipip = value;
  }

  /**
   * Gets the value of the 'r9' field.
   */
  public java.lang.Float getR9() {
    return r9;
  }

  /**
   * Sets the value of the 'r9' field.
   * @param value the value to set.
   */
  public void setR9(java.lang.Float value) {
    this.r9 = value;
  }

  /**
   * Gets the value of the 'fiducialBits' field.
   */
  public java.lang.Long getFiducialBits() {
    return fiducialBits;
  }

  /**
   * Sets the value of the 'fiducialBits' field.
   * @param value the value to set.
   */
  public void setFiducialBits(java.lang.Long value) {
    this.fiducialBits = value;
  }

  /**
   * Gets the value of the 'typeBits' field.
   */
  public java.lang.Long getTypeBits() {
    return typeBits;
  }

  /**
   * Sets the value of the 'typeBits' field.
   * @param value the value to set.
   */
  public void setTypeBits(java.lang.Long value) {
    this.typeBits = value;
  }

  /**
   * Gets the value of the 'scID' field.
   */
  public java.lang.Integer getScID() {
    return scID;
  }

  /**
   * Sets the value of the 'scID' field.
   * @param value the value to set.
   */
  public void setScID(java.lang.Integer value) {
    this.scID = value;
  }

  /**
   * Gets the value of the 'hasPixelSeed' field.
   */
  public java.lang.Boolean getHasPixelSeed() {
    return hasPixelSeed;
  }

  /**
   * Sets the value of the 'hasPixelSeed' field.
   * @param value the value to set.
   */
  public void setHasPixelSeed(java.lang.Boolean value) {
    this.hasPixelSeed = value;
  }

  /**
   * Gets the value of the 'passElectronVeto' field.
   */
  public java.lang.Boolean getPassElectronVeto() {
    return passElectronVeto;
  }

  /**
   * Sets the value of the 'passElectronVeto' field.
   * @param value the value to set.
   */
  public void setPassElectronVeto(java.lang.Boolean value) {
    this.passElectronVeto = value;
  }

  /**
   * Gets the value of the 'isConv' field.
   */
  public java.lang.Boolean getIsConv() {
    return isConv;
  }

  /**
   * Sets the value of the 'isConv' field.
   * @param value the value to set.
   */
  public void setIsConv(java.lang.Boolean value) {
    this.isConv = value;
  }

  /** Creates a new TPhoton RecordBuilder */
  public static baconhep.TPhoton.Builder newBuilder() {
    return new baconhep.TPhoton.Builder();
  }
  
  /** Creates a new TPhoton RecordBuilder by copying an existing Builder */
  public static baconhep.TPhoton.Builder newBuilder(baconhep.TPhoton.Builder other) {
    return new baconhep.TPhoton.Builder(other);
  }
  
  /** Creates a new TPhoton RecordBuilder by copying an existing TPhoton instance */
  public static baconhep.TPhoton.Builder newBuilder(baconhep.TPhoton other) {
    return new baconhep.TPhoton.Builder(other);
  }
  
  /**
   * RecordBuilder for TPhoton instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TPhoton>
    implements org.apache.avro.data.RecordBuilder<TPhoton> {

    private float pt;
    private float eta;
    private float phi;
    private float scEt;
    private float scEta;
    private float scPhi;
    private float trkIso;
    private float ecalIso;
    private float hcalIso;
    private float chHadIso;
    private float gammaIso;
    private float neuHadIso;
    private float mva;
    private float hovere;
    private float sthovere;
    private float sieie;
    private float sipip;
    private float r9;
    private long fiducialBits;
    private long typeBits;
    private int scID;
    private boolean hasPixelSeed;
    private boolean passElectronVeto;
    private boolean isConv;

    /** Creates a new Builder */
    private Builder() {
      super(baconhep.TPhoton.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(baconhep.TPhoton.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.pt)) {
        this.pt = data().deepCopy(fields()[0].schema(), other.pt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eta)) {
        this.eta = data().deepCopy(fields()[1].schema(), other.eta);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phi)) {
        this.phi = data().deepCopy(fields()[2].schema(), other.phi);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.scEt)) {
        this.scEt = data().deepCopy(fields()[3].schema(), other.scEt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.scEta)) {
        this.scEta = data().deepCopy(fields()[4].schema(), other.scEta);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.scPhi)) {
        this.scPhi = data().deepCopy(fields()[5].schema(), other.scPhi);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.trkIso)) {
        this.trkIso = data().deepCopy(fields()[6].schema(), other.trkIso);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.ecalIso)) {
        this.ecalIso = data().deepCopy(fields()[7].schema(), other.ecalIso);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.hcalIso)) {
        this.hcalIso = data().deepCopy(fields()[8].schema(), other.hcalIso);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.chHadIso)) {
        this.chHadIso = data().deepCopy(fields()[9].schema(), other.chHadIso);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.gammaIso)) {
        this.gammaIso = data().deepCopy(fields()[10].schema(), other.gammaIso);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.neuHadIso)) {
        this.neuHadIso = data().deepCopy(fields()[11].schema(), other.neuHadIso);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.mva)) {
        this.mva = data().deepCopy(fields()[12].schema(), other.mva);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.hovere)) {
        this.hovere = data().deepCopy(fields()[13].schema(), other.hovere);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.sthovere)) {
        this.sthovere = data().deepCopy(fields()[14].schema(), other.sthovere);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.sieie)) {
        this.sieie = data().deepCopy(fields()[15].schema(), other.sieie);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.sipip)) {
        this.sipip = data().deepCopy(fields()[16].schema(), other.sipip);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.r9)) {
        this.r9 = data().deepCopy(fields()[17].schema(), other.r9);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.fiducialBits)) {
        this.fiducialBits = data().deepCopy(fields()[18].schema(), other.fiducialBits);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.typeBits)) {
        this.typeBits = data().deepCopy(fields()[19].schema(), other.typeBits);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.scID)) {
        this.scID = data().deepCopy(fields()[20].schema(), other.scID);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.hasPixelSeed)) {
        this.hasPixelSeed = data().deepCopy(fields()[21].schema(), other.hasPixelSeed);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.passElectronVeto)) {
        this.passElectronVeto = data().deepCopy(fields()[22].schema(), other.passElectronVeto);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.isConv)) {
        this.isConv = data().deepCopy(fields()[23].schema(), other.isConv);
        fieldSetFlags()[23] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TPhoton instance */
    private Builder(baconhep.TPhoton other) {
            super(baconhep.TPhoton.SCHEMA$);
      if (isValidValue(fields()[0], other.pt)) {
        this.pt = data().deepCopy(fields()[0].schema(), other.pt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eta)) {
        this.eta = data().deepCopy(fields()[1].schema(), other.eta);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phi)) {
        this.phi = data().deepCopy(fields()[2].schema(), other.phi);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.scEt)) {
        this.scEt = data().deepCopy(fields()[3].schema(), other.scEt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.scEta)) {
        this.scEta = data().deepCopy(fields()[4].schema(), other.scEta);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.scPhi)) {
        this.scPhi = data().deepCopy(fields()[5].schema(), other.scPhi);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.trkIso)) {
        this.trkIso = data().deepCopy(fields()[6].schema(), other.trkIso);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.ecalIso)) {
        this.ecalIso = data().deepCopy(fields()[7].schema(), other.ecalIso);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.hcalIso)) {
        this.hcalIso = data().deepCopy(fields()[8].schema(), other.hcalIso);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.chHadIso)) {
        this.chHadIso = data().deepCopy(fields()[9].schema(), other.chHadIso);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.gammaIso)) {
        this.gammaIso = data().deepCopy(fields()[10].schema(), other.gammaIso);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.neuHadIso)) {
        this.neuHadIso = data().deepCopy(fields()[11].schema(), other.neuHadIso);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.mva)) {
        this.mva = data().deepCopy(fields()[12].schema(), other.mva);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.hovere)) {
        this.hovere = data().deepCopy(fields()[13].schema(), other.hovere);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.sthovere)) {
        this.sthovere = data().deepCopy(fields()[14].schema(), other.sthovere);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.sieie)) {
        this.sieie = data().deepCopy(fields()[15].schema(), other.sieie);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.sipip)) {
        this.sipip = data().deepCopy(fields()[16].schema(), other.sipip);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.r9)) {
        this.r9 = data().deepCopy(fields()[17].schema(), other.r9);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.fiducialBits)) {
        this.fiducialBits = data().deepCopy(fields()[18].schema(), other.fiducialBits);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.typeBits)) {
        this.typeBits = data().deepCopy(fields()[19].schema(), other.typeBits);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.scID)) {
        this.scID = data().deepCopy(fields()[20].schema(), other.scID);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.hasPixelSeed)) {
        this.hasPixelSeed = data().deepCopy(fields()[21].schema(), other.hasPixelSeed);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.passElectronVeto)) {
        this.passElectronVeto = data().deepCopy(fields()[22].schema(), other.passElectronVeto);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.isConv)) {
        this.isConv = data().deepCopy(fields()[23].schema(), other.isConv);
        fieldSetFlags()[23] = true;
      }
    }

    /** Gets the value of the 'pt' field */
    public java.lang.Float getPt() {
      return pt;
    }
    
    /** Sets the value of the 'pt' field */
    public baconhep.TPhoton.Builder setPt(float value) {
      validate(fields()[0], value);
      this.pt = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'pt' field has been set */
    public boolean hasPt() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'pt' field */
    public baconhep.TPhoton.Builder clearPt() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'eta' field */
    public java.lang.Float getEta() {
      return eta;
    }
    
    /** Sets the value of the 'eta' field */
    public baconhep.TPhoton.Builder setEta(float value) {
      validate(fields()[1], value);
      this.eta = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'eta' field has been set */
    public boolean hasEta() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'eta' field */
    public baconhep.TPhoton.Builder clearEta() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'phi' field */
    public java.lang.Float getPhi() {
      return phi;
    }
    
    /** Sets the value of the 'phi' field */
    public baconhep.TPhoton.Builder setPhi(float value) {
      validate(fields()[2], value);
      this.phi = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'phi' field has been set */
    public boolean hasPhi() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'phi' field */
    public baconhep.TPhoton.Builder clearPhi() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'scEt' field */
    public java.lang.Float getScEt() {
      return scEt;
    }
    
    /** Sets the value of the 'scEt' field */
    public baconhep.TPhoton.Builder setScEt(float value) {
      validate(fields()[3], value);
      this.scEt = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'scEt' field has been set */
    public boolean hasScEt() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'scEt' field */
    public baconhep.TPhoton.Builder clearScEt() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'scEta' field */
    public java.lang.Float getScEta() {
      return scEta;
    }
    
    /** Sets the value of the 'scEta' field */
    public baconhep.TPhoton.Builder setScEta(float value) {
      validate(fields()[4], value);
      this.scEta = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'scEta' field has been set */
    public boolean hasScEta() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'scEta' field */
    public baconhep.TPhoton.Builder clearScEta() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'scPhi' field */
    public java.lang.Float getScPhi() {
      return scPhi;
    }
    
    /** Sets the value of the 'scPhi' field */
    public baconhep.TPhoton.Builder setScPhi(float value) {
      validate(fields()[5], value);
      this.scPhi = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'scPhi' field has been set */
    public boolean hasScPhi() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'scPhi' field */
    public baconhep.TPhoton.Builder clearScPhi() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'trkIso' field */
    public java.lang.Float getTrkIso() {
      return trkIso;
    }
    
    /** Sets the value of the 'trkIso' field */
    public baconhep.TPhoton.Builder setTrkIso(float value) {
      validate(fields()[6], value);
      this.trkIso = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'trkIso' field has been set */
    public boolean hasTrkIso() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'trkIso' field */
    public baconhep.TPhoton.Builder clearTrkIso() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'ecalIso' field */
    public java.lang.Float getEcalIso() {
      return ecalIso;
    }
    
    /** Sets the value of the 'ecalIso' field */
    public baconhep.TPhoton.Builder setEcalIso(float value) {
      validate(fields()[7], value);
      this.ecalIso = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'ecalIso' field has been set */
    public boolean hasEcalIso() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'ecalIso' field */
    public baconhep.TPhoton.Builder clearEcalIso() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'hcalIso' field */
    public java.lang.Float getHcalIso() {
      return hcalIso;
    }
    
    /** Sets the value of the 'hcalIso' field */
    public baconhep.TPhoton.Builder setHcalIso(float value) {
      validate(fields()[8], value);
      this.hcalIso = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'hcalIso' field has been set */
    public boolean hasHcalIso() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'hcalIso' field */
    public baconhep.TPhoton.Builder clearHcalIso() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'chHadIso' field */
    public java.lang.Float getChHadIso() {
      return chHadIso;
    }
    
    /** Sets the value of the 'chHadIso' field */
    public baconhep.TPhoton.Builder setChHadIso(float value) {
      validate(fields()[9], value);
      this.chHadIso = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'chHadIso' field has been set */
    public boolean hasChHadIso() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'chHadIso' field */
    public baconhep.TPhoton.Builder clearChHadIso() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'gammaIso' field */
    public java.lang.Float getGammaIso() {
      return gammaIso;
    }
    
    /** Sets the value of the 'gammaIso' field */
    public baconhep.TPhoton.Builder setGammaIso(float value) {
      validate(fields()[10], value);
      this.gammaIso = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'gammaIso' field has been set */
    public boolean hasGammaIso() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'gammaIso' field */
    public baconhep.TPhoton.Builder clearGammaIso() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'neuHadIso' field */
    public java.lang.Float getNeuHadIso() {
      return neuHadIso;
    }
    
    /** Sets the value of the 'neuHadIso' field */
    public baconhep.TPhoton.Builder setNeuHadIso(float value) {
      validate(fields()[11], value);
      this.neuHadIso = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'neuHadIso' field has been set */
    public boolean hasNeuHadIso() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'neuHadIso' field */
    public baconhep.TPhoton.Builder clearNeuHadIso() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'mva' field */
    public java.lang.Float getMva() {
      return mva;
    }
    
    /** Sets the value of the 'mva' field */
    public baconhep.TPhoton.Builder setMva(float value) {
      validate(fields()[12], value);
      this.mva = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'mva' field has been set */
    public boolean hasMva() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'mva' field */
    public baconhep.TPhoton.Builder clearMva() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'hovere' field */
    public java.lang.Float getHovere() {
      return hovere;
    }
    
    /** Sets the value of the 'hovere' field */
    public baconhep.TPhoton.Builder setHovere(float value) {
      validate(fields()[13], value);
      this.hovere = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'hovere' field has been set */
    public boolean hasHovere() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'hovere' field */
    public baconhep.TPhoton.Builder clearHovere() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'sthovere' field */
    public java.lang.Float getSthovere() {
      return sthovere;
    }
    
    /** Sets the value of the 'sthovere' field */
    public baconhep.TPhoton.Builder setSthovere(float value) {
      validate(fields()[14], value);
      this.sthovere = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'sthovere' field has been set */
    public boolean hasSthovere() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'sthovere' field */
    public baconhep.TPhoton.Builder clearSthovere() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'sieie' field */
    public java.lang.Float getSieie() {
      return sieie;
    }
    
    /** Sets the value of the 'sieie' field */
    public baconhep.TPhoton.Builder setSieie(float value) {
      validate(fields()[15], value);
      this.sieie = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'sieie' field has been set */
    public boolean hasSieie() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'sieie' field */
    public baconhep.TPhoton.Builder clearSieie() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'sipip' field */
    public java.lang.Float getSipip() {
      return sipip;
    }
    
    /** Sets the value of the 'sipip' field */
    public baconhep.TPhoton.Builder setSipip(float value) {
      validate(fields()[16], value);
      this.sipip = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'sipip' field has been set */
    public boolean hasSipip() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'sipip' field */
    public baconhep.TPhoton.Builder clearSipip() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'r9' field */
    public java.lang.Float getR9() {
      return r9;
    }
    
    /** Sets the value of the 'r9' field */
    public baconhep.TPhoton.Builder setR9(float value) {
      validate(fields()[17], value);
      this.r9 = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'r9' field has been set */
    public boolean hasR9() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'r9' field */
    public baconhep.TPhoton.Builder clearR9() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'fiducialBits' field */
    public java.lang.Long getFiducialBits() {
      return fiducialBits;
    }
    
    /** Sets the value of the 'fiducialBits' field */
    public baconhep.TPhoton.Builder setFiducialBits(long value) {
      validate(fields()[18], value);
      this.fiducialBits = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'fiducialBits' field has been set */
    public boolean hasFiducialBits() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'fiducialBits' field */
    public baconhep.TPhoton.Builder clearFiducialBits() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'typeBits' field */
    public java.lang.Long getTypeBits() {
      return typeBits;
    }
    
    /** Sets the value of the 'typeBits' field */
    public baconhep.TPhoton.Builder setTypeBits(long value) {
      validate(fields()[19], value);
      this.typeBits = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'typeBits' field has been set */
    public boolean hasTypeBits() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'typeBits' field */
    public baconhep.TPhoton.Builder clearTypeBits() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'scID' field */
    public java.lang.Integer getScID() {
      return scID;
    }
    
    /** Sets the value of the 'scID' field */
    public baconhep.TPhoton.Builder setScID(int value) {
      validate(fields()[20], value);
      this.scID = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'scID' field has been set */
    public boolean hasScID() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'scID' field */
    public baconhep.TPhoton.Builder clearScID() {
      fieldSetFlags()[20] = false;
      return this;
    }

    /** Gets the value of the 'hasPixelSeed' field */
    public java.lang.Boolean getHasPixelSeed() {
      return hasPixelSeed;
    }
    
    /** Sets the value of the 'hasPixelSeed' field */
    public baconhep.TPhoton.Builder setHasPixelSeed(boolean value) {
      validate(fields()[21], value);
      this.hasPixelSeed = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'hasPixelSeed' field has been set */
    public boolean hasHasPixelSeed() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'hasPixelSeed' field */
    public baconhep.TPhoton.Builder clearHasPixelSeed() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /** Gets the value of the 'passElectronVeto' field */
    public java.lang.Boolean getPassElectronVeto() {
      return passElectronVeto;
    }
    
    /** Sets the value of the 'passElectronVeto' field */
    public baconhep.TPhoton.Builder setPassElectronVeto(boolean value) {
      validate(fields()[22], value);
      this.passElectronVeto = value;
      fieldSetFlags()[22] = true;
      return this; 
    }
    
    /** Checks whether the 'passElectronVeto' field has been set */
    public boolean hasPassElectronVeto() {
      return fieldSetFlags()[22];
    }
    
    /** Clears the value of the 'passElectronVeto' field */
    public baconhep.TPhoton.Builder clearPassElectronVeto() {
      fieldSetFlags()[22] = false;
      return this;
    }

    /** Gets the value of the 'isConv' field */
    public java.lang.Boolean getIsConv() {
      return isConv;
    }
    
    /** Sets the value of the 'isConv' field */
    public baconhep.TPhoton.Builder setIsConv(boolean value) {
      validate(fields()[23], value);
      this.isConv = value;
      fieldSetFlags()[23] = true;
      return this; 
    }
    
    /** Checks whether the 'isConv' field has been set */
    public boolean hasIsConv() {
      return fieldSetFlags()[23];
    }
    
    /** Clears the value of the 'isConv' field */
    public baconhep.TPhoton.Builder clearIsConv() {
      fieldSetFlags()[23] = false;
      return this;
    }

    @Override
    public TPhoton build() {
      try {
        TPhoton record = new TPhoton();
        record.pt = fieldSetFlags()[0] ? this.pt : (java.lang.Float) defaultValue(fields()[0]);
        record.eta = fieldSetFlags()[1] ? this.eta : (java.lang.Float) defaultValue(fields()[1]);
        record.phi = fieldSetFlags()[2] ? this.phi : (java.lang.Float) defaultValue(fields()[2]);
        record.scEt = fieldSetFlags()[3] ? this.scEt : (java.lang.Float) defaultValue(fields()[3]);
        record.scEta = fieldSetFlags()[4] ? this.scEta : (java.lang.Float) defaultValue(fields()[4]);
        record.scPhi = fieldSetFlags()[5] ? this.scPhi : (java.lang.Float) defaultValue(fields()[5]);
        record.trkIso = fieldSetFlags()[6] ? this.trkIso : (java.lang.Float) defaultValue(fields()[6]);
        record.ecalIso = fieldSetFlags()[7] ? this.ecalIso : (java.lang.Float) defaultValue(fields()[7]);
        record.hcalIso = fieldSetFlags()[8] ? this.hcalIso : (java.lang.Float) defaultValue(fields()[8]);
        record.chHadIso = fieldSetFlags()[9] ? this.chHadIso : (java.lang.Float) defaultValue(fields()[9]);
        record.gammaIso = fieldSetFlags()[10] ? this.gammaIso : (java.lang.Float) defaultValue(fields()[10]);
        record.neuHadIso = fieldSetFlags()[11] ? this.neuHadIso : (java.lang.Float) defaultValue(fields()[11]);
        record.mva = fieldSetFlags()[12] ? this.mva : (java.lang.Float) defaultValue(fields()[12]);
        record.hovere = fieldSetFlags()[13] ? this.hovere : (java.lang.Float) defaultValue(fields()[13]);
        record.sthovere = fieldSetFlags()[14] ? this.sthovere : (java.lang.Float) defaultValue(fields()[14]);
        record.sieie = fieldSetFlags()[15] ? this.sieie : (java.lang.Float) defaultValue(fields()[15]);
        record.sipip = fieldSetFlags()[16] ? this.sipip : (java.lang.Float) defaultValue(fields()[16]);
        record.r9 = fieldSetFlags()[17] ? this.r9 : (java.lang.Float) defaultValue(fields()[17]);
        record.fiducialBits = fieldSetFlags()[18] ? this.fiducialBits : (java.lang.Long) defaultValue(fields()[18]);
        record.typeBits = fieldSetFlags()[19] ? this.typeBits : (java.lang.Long) defaultValue(fields()[19]);
        record.scID = fieldSetFlags()[20] ? this.scID : (java.lang.Integer) defaultValue(fields()[20]);
        record.hasPixelSeed = fieldSetFlags()[21] ? this.hasPixelSeed : (java.lang.Boolean) defaultValue(fields()[21]);
        record.passElectronVeto = fieldSetFlags()[22] ? this.passElectronVeto : (java.lang.Boolean) defaultValue(fields()[22]);
        record.isConv = fieldSetFlags()[23] ? this.isConv : (java.lang.Boolean) defaultValue(fields()[23]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
