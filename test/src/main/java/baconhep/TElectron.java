/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package baconhep;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TElectron extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TElectron\",\"namespace\":\"baconhep\",\"fields\":[{\"name\":\"pt\",\"type\":\"float\"},{\"name\":\"eta\",\"type\":\"float\"},{\"name\":\"phi\",\"type\":\"float\"},{\"name\":\"scEt\",\"type\":\"float\"},{\"name\":\"scEta\",\"type\":\"float\"},{\"name\":\"scPhi\",\"type\":\"float\"},{\"name\":\"ecalEnergy\",\"type\":\"float\"},{\"name\":\"pfPt\",\"type\":\"float\"},{\"name\":\"pfEta\",\"type\":\"float\"},{\"name\":\"pfPhi\",\"type\":\"float\"},{\"name\":\"trkIso\",\"type\":\"float\"},{\"name\":\"ecalIso\",\"type\":\"float\"},{\"name\":\"hcalIso\",\"type\":\"float\"},{\"name\":\"hcalDepth1Iso\",\"type\":\"float\"},{\"name\":\"chHadIso\",\"type\":\"float\"},{\"name\":\"gammaIso\",\"type\":\"float\"},{\"name\":\"neuHadIso\",\"type\":\"float\"},{\"name\":\"puIso\",\"type\":\"float\"},{\"name\":\"ecalPFClusIso\",\"type\":\"float\"},{\"name\":\"hcalPFClusIso\",\"type\":\"float\"},{\"name\":\"puppiChHadIso\",\"type\":\"float\"},{\"name\":\"puppiGammaIso\",\"type\":\"float\"},{\"name\":\"puppiNeuHadIso\",\"type\":\"float\"},{\"name\":\"puppiChHadIsoNoLep\",\"type\":\"float\"},{\"name\":\"puppiGammaIsoNoLep\",\"type\":\"float\"},{\"name\":\"puppiNeuHadIsoNoLep\",\"type\":\"float\"},{\"name\":\"d0\",\"type\":\"float\"},{\"name\":\"dz\",\"type\":\"float\"},{\"name\":\"sip3d\",\"type\":\"float\"},{\"name\":\"sieie\",\"type\":\"float\"},{\"name\":\"e1x5\",\"type\":\"float\"},{\"name\":\"e2x5\",\"type\":\"float\"},{\"name\":\"e5x5\",\"type\":\"float\"},{\"name\":\"r9\",\"type\":\"float\"},{\"name\":\"eoverp\",\"type\":\"float\"},{\"name\":\"hovere\",\"type\":\"float\"},{\"name\":\"fbrem\",\"type\":\"float\"},{\"name\":\"dEtaInSeed\",\"type\":\"float\"},{\"name\":\"dEtaIn\",\"type\":\"float\"},{\"name\":\"dPhiIn\",\"type\":\"float\"},{\"name\":\"mva\",\"type\":\"float\"},{\"name\":\"q\",\"type\":\"int\"},{\"name\":\"isConv\",\"type\":\"boolean\"},{\"name\":\"nMissingHits\",\"type\":\"long\"},{\"name\":\"typeBits\",\"type\":\"long\"},{\"name\":\"fiducialBits\",\"type\":\"long\"},{\"name\":\"classification\",\"type\":\"int\"},{\"name\":\"scID\",\"type\":\"int\"},{\"name\":\"trkID\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public float pt;
  @Deprecated public float eta;
  @Deprecated public float phi;
  @Deprecated public float scEt;
  @Deprecated public float scEta;
  @Deprecated public float scPhi;
  @Deprecated public float ecalEnergy;
  @Deprecated public float pfPt;
  @Deprecated public float pfEta;
  @Deprecated public float pfPhi;
  @Deprecated public float trkIso;
  @Deprecated public float ecalIso;
  @Deprecated public float hcalIso;
  @Deprecated public float hcalDepth1Iso;
  @Deprecated public float chHadIso;
  @Deprecated public float gammaIso;
  @Deprecated public float neuHadIso;
  @Deprecated public float puIso;
  @Deprecated public float ecalPFClusIso;
  @Deprecated public float hcalPFClusIso;
  @Deprecated public float puppiChHadIso;
  @Deprecated public float puppiGammaIso;
  @Deprecated public float puppiNeuHadIso;
  @Deprecated public float puppiChHadIsoNoLep;
  @Deprecated public float puppiGammaIsoNoLep;
  @Deprecated public float puppiNeuHadIsoNoLep;
  @Deprecated public float d0;
  @Deprecated public float dz;
  @Deprecated public float sip3d;
  @Deprecated public float sieie;
  @Deprecated public float e1x5;
  @Deprecated public float e2x5;
  @Deprecated public float e5x5;
  @Deprecated public float r9;
  @Deprecated public float eoverp;
  @Deprecated public float hovere;
  @Deprecated public float fbrem;
  @Deprecated public float dEtaInSeed;
  @Deprecated public float dEtaIn;
  @Deprecated public float dPhiIn;
  @Deprecated public float mva;
  @Deprecated public int q;
  @Deprecated public boolean isConv;
  @Deprecated public long nMissingHits;
  @Deprecated public long typeBits;
  @Deprecated public long fiducialBits;
  @Deprecated public int classification;
  @Deprecated public int scID;
  @Deprecated public int trkID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TElectron() {}

  /**
   * All-args constructor.
   */
  public TElectron(java.lang.Float pt, java.lang.Float eta, java.lang.Float phi, java.lang.Float scEt, java.lang.Float scEta, java.lang.Float scPhi, java.lang.Float ecalEnergy, java.lang.Float pfPt, java.lang.Float pfEta, java.lang.Float pfPhi, java.lang.Float trkIso, java.lang.Float ecalIso, java.lang.Float hcalIso, java.lang.Float hcalDepth1Iso, java.lang.Float chHadIso, java.lang.Float gammaIso, java.lang.Float neuHadIso, java.lang.Float puIso, java.lang.Float ecalPFClusIso, java.lang.Float hcalPFClusIso, java.lang.Float puppiChHadIso, java.lang.Float puppiGammaIso, java.lang.Float puppiNeuHadIso, java.lang.Float puppiChHadIsoNoLep, java.lang.Float puppiGammaIsoNoLep, java.lang.Float puppiNeuHadIsoNoLep, java.lang.Float d0, java.lang.Float dz, java.lang.Float sip3d, java.lang.Float sieie, java.lang.Float e1x5, java.lang.Float e2x5, java.lang.Float e5x5, java.lang.Float r9, java.lang.Float eoverp, java.lang.Float hovere, java.lang.Float fbrem, java.lang.Float dEtaInSeed, java.lang.Float dEtaIn, java.lang.Float dPhiIn, java.lang.Float mva, java.lang.Integer q, java.lang.Boolean isConv, java.lang.Long nMissingHits, java.lang.Long typeBits, java.lang.Long fiducialBits, java.lang.Integer classification, java.lang.Integer scID, java.lang.Integer trkID) {
    this.pt = pt;
    this.eta = eta;
    this.phi = phi;
    this.scEt = scEt;
    this.scEta = scEta;
    this.scPhi = scPhi;
    this.ecalEnergy = ecalEnergy;
    this.pfPt = pfPt;
    this.pfEta = pfEta;
    this.pfPhi = pfPhi;
    this.trkIso = trkIso;
    this.ecalIso = ecalIso;
    this.hcalIso = hcalIso;
    this.hcalDepth1Iso = hcalDepth1Iso;
    this.chHadIso = chHadIso;
    this.gammaIso = gammaIso;
    this.neuHadIso = neuHadIso;
    this.puIso = puIso;
    this.ecalPFClusIso = ecalPFClusIso;
    this.hcalPFClusIso = hcalPFClusIso;
    this.puppiChHadIso = puppiChHadIso;
    this.puppiGammaIso = puppiGammaIso;
    this.puppiNeuHadIso = puppiNeuHadIso;
    this.puppiChHadIsoNoLep = puppiChHadIsoNoLep;
    this.puppiGammaIsoNoLep = puppiGammaIsoNoLep;
    this.puppiNeuHadIsoNoLep = puppiNeuHadIsoNoLep;
    this.d0 = d0;
    this.dz = dz;
    this.sip3d = sip3d;
    this.sieie = sieie;
    this.e1x5 = e1x5;
    this.e2x5 = e2x5;
    this.e5x5 = e5x5;
    this.r9 = r9;
    this.eoverp = eoverp;
    this.hovere = hovere;
    this.fbrem = fbrem;
    this.dEtaInSeed = dEtaInSeed;
    this.dEtaIn = dEtaIn;
    this.dPhiIn = dPhiIn;
    this.mva = mva;
    this.q = q;
    this.isConv = isConv;
    this.nMissingHits = nMissingHits;
    this.typeBits = typeBits;
    this.fiducialBits = fiducialBits;
    this.classification = classification;
    this.scID = scID;
    this.trkID = trkID;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return pt;
    case 1: return eta;
    case 2: return phi;
    case 3: return scEt;
    case 4: return scEta;
    case 5: return scPhi;
    case 6: return ecalEnergy;
    case 7: return pfPt;
    case 8: return pfEta;
    case 9: return pfPhi;
    case 10: return trkIso;
    case 11: return ecalIso;
    case 12: return hcalIso;
    case 13: return hcalDepth1Iso;
    case 14: return chHadIso;
    case 15: return gammaIso;
    case 16: return neuHadIso;
    case 17: return puIso;
    case 18: return ecalPFClusIso;
    case 19: return hcalPFClusIso;
    case 20: return puppiChHadIso;
    case 21: return puppiGammaIso;
    case 22: return puppiNeuHadIso;
    case 23: return puppiChHadIsoNoLep;
    case 24: return puppiGammaIsoNoLep;
    case 25: return puppiNeuHadIsoNoLep;
    case 26: return d0;
    case 27: return dz;
    case 28: return sip3d;
    case 29: return sieie;
    case 30: return e1x5;
    case 31: return e2x5;
    case 32: return e5x5;
    case 33: return r9;
    case 34: return eoverp;
    case 35: return hovere;
    case 36: return fbrem;
    case 37: return dEtaInSeed;
    case 38: return dEtaIn;
    case 39: return dPhiIn;
    case 40: return mva;
    case 41: return q;
    case 42: return isConv;
    case 43: return nMissingHits;
    case 44: return typeBits;
    case 45: return fiducialBits;
    case 46: return classification;
    case 47: return scID;
    case 48: return trkID;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: pt = (java.lang.Float)value$; break;
    case 1: eta = (java.lang.Float)value$; break;
    case 2: phi = (java.lang.Float)value$; break;
    case 3: scEt = (java.lang.Float)value$; break;
    case 4: scEta = (java.lang.Float)value$; break;
    case 5: scPhi = (java.lang.Float)value$; break;
    case 6: ecalEnergy = (java.lang.Float)value$; break;
    case 7: pfPt = (java.lang.Float)value$; break;
    case 8: pfEta = (java.lang.Float)value$; break;
    case 9: pfPhi = (java.lang.Float)value$; break;
    case 10: trkIso = (java.lang.Float)value$; break;
    case 11: ecalIso = (java.lang.Float)value$; break;
    case 12: hcalIso = (java.lang.Float)value$; break;
    case 13: hcalDepth1Iso = (java.lang.Float)value$; break;
    case 14: chHadIso = (java.lang.Float)value$; break;
    case 15: gammaIso = (java.lang.Float)value$; break;
    case 16: neuHadIso = (java.lang.Float)value$; break;
    case 17: puIso = (java.lang.Float)value$; break;
    case 18: ecalPFClusIso = (java.lang.Float)value$; break;
    case 19: hcalPFClusIso = (java.lang.Float)value$; break;
    case 20: puppiChHadIso = (java.lang.Float)value$; break;
    case 21: puppiGammaIso = (java.lang.Float)value$; break;
    case 22: puppiNeuHadIso = (java.lang.Float)value$; break;
    case 23: puppiChHadIsoNoLep = (java.lang.Float)value$; break;
    case 24: puppiGammaIsoNoLep = (java.lang.Float)value$; break;
    case 25: puppiNeuHadIsoNoLep = (java.lang.Float)value$; break;
    case 26: d0 = (java.lang.Float)value$; break;
    case 27: dz = (java.lang.Float)value$; break;
    case 28: sip3d = (java.lang.Float)value$; break;
    case 29: sieie = (java.lang.Float)value$; break;
    case 30: e1x5 = (java.lang.Float)value$; break;
    case 31: e2x5 = (java.lang.Float)value$; break;
    case 32: e5x5 = (java.lang.Float)value$; break;
    case 33: r9 = (java.lang.Float)value$; break;
    case 34: eoverp = (java.lang.Float)value$; break;
    case 35: hovere = (java.lang.Float)value$; break;
    case 36: fbrem = (java.lang.Float)value$; break;
    case 37: dEtaInSeed = (java.lang.Float)value$; break;
    case 38: dEtaIn = (java.lang.Float)value$; break;
    case 39: dPhiIn = (java.lang.Float)value$; break;
    case 40: mva = (java.lang.Float)value$; break;
    case 41: q = (java.lang.Integer)value$; break;
    case 42: isConv = (java.lang.Boolean)value$; break;
    case 43: nMissingHits = (java.lang.Long)value$; break;
    case 44: typeBits = (java.lang.Long)value$; break;
    case 45: fiducialBits = (java.lang.Long)value$; break;
    case 46: classification = (java.lang.Integer)value$; break;
    case 47: scID = (java.lang.Integer)value$; break;
    case 48: trkID = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'pt' field.
   */
  public java.lang.Float getPt() {
    return pt;
  }

  /**
   * Sets the value of the 'pt' field.
   * @param value the value to set.
   */
  public void setPt(java.lang.Float value) {
    this.pt = value;
  }

  /**
   * Gets the value of the 'eta' field.
   */
  public java.lang.Float getEta() {
    return eta;
  }

  /**
   * Sets the value of the 'eta' field.
   * @param value the value to set.
   */
  public void setEta(java.lang.Float value) {
    this.eta = value;
  }

  /**
   * Gets the value of the 'phi' field.
   */
  public java.lang.Float getPhi() {
    return phi;
  }

  /**
   * Sets the value of the 'phi' field.
   * @param value the value to set.
   */
  public void setPhi(java.lang.Float value) {
    this.phi = value;
  }

  /**
   * Gets the value of the 'scEt' field.
   */
  public java.lang.Float getScEt() {
    return scEt;
  }

  /**
   * Sets the value of the 'scEt' field.
   * @param value the value to set.
   */
  public void setScEt(java.lang.Float value) {
    this.scEt = value;
  }

  /**
   * Gets the value of the 'scEta' field.
   */
  public java.lang.Float getScEta() {
    return scEta;
  }

  /**
   * Sets the value of the 'scEta' field.
   * @param value the value to set.
   */
  public void setScEta(java.lang.Float value) {
    this.scEta = value;
  }

  /**
   * Gets the value of the 'scPhi' field.
   */
  public java.lang.Float getScPhi() {
    return scPhi;
  }

  /**
   * Sets the value of the 'scPhi' field.
   * @param value the value to set.
   */
  public void setScPhi(java.lang.Float value) {
    this.scPhi = value;
  }

  /**
   * Gets the value of the 'ecalEnergy' field.
   */
  public java.lang.Float getEcalEnergy() {
    return ecalEnergy;
  }

  /**
   * Sets the value of the 'ecalEnergy' field.
   * @param value the value to set.
   */
  public void setEcalEnergy(java.lang.Float value) {
    this.ecalEnergy = value;
  }

  /**
   * Gets the value of the 'pfPt' field.
   */
  public java.lang.Float getPfPt() {
    return pfPt;
  }

  /**
   * Sets the value of the 'pfPt' field.
   * @param value the value to set.
   */
  public void setPfPt(java.lang.Float value) {
    this.pfPt = value;
  }

  /**
   * Gets the value of the 'pfEta' field.
   */
  public java.lang.Float getPfEta() {
    return pfEta;
  }

  /**
   * Sets the value of the 'pfEta' field.
   * @param value the value to set.
   */
  public void setPfEta(java.lang.Float value) {
    this.pfEta = value;
  }

  /**
   * Gets the value of the 'pfPhi' field.
   */
  public java.lang.Float getPfPhi() {
    return pfPhi;
  }

  /**
   * Sets the value of the 'pfPhi' field.
   * @param value the value to set.
   */
  public void setPfPhi(java.lang.Float value) {
    this.pfPhi = value;
  }

  /**
   * Gets the value of the 'trkIso' field.
   */
  public java.lang.Float getTrkIso() {
    return trkIso;
  }

  /**
   * Sets the value of the 'trkIso' field.
   * @param value the value to set.
   */
  public void setTrkIso(java.lang.Float value) {
    this.trkIso = value;
  }

  /**
   * Gets the value of the 'ecalIso' field.
   */
  public java.lang.Float getEcalIso() {
    return ecalIso;
  }

  /**
   * Sets the value of the 'ecalIso' field.
   * @param value the value to set.
   */
  public void setEcalIso(java.lang.Float value) {
    this.ecalIso = value;
  }

  /**
   * Gets the value of the 'hcalIso' field.
   */
  public java.lang.Float getHcalIso() {
    return hcalIso;
  }

  /**
   * Sets the value of the 'hcalIso' field.
   * @param value the value to set.
   */
  public void setHcalIso(java.lang.Float value) {
    this.hcalIso = value;
  }

  /**
   * Gets the value of the 'hcalDepth1Iso' field.
   */
  public java.lang.Float getHcalDepth1Iso() {
    return hcalDepth1Iso;
  }

  /**
   * Sets the value of the 'hcalDepth1Iso' field.
   * @param value the value to set.
   */
  public void setHcalDepth1Iso(java.lang.Float value) {
    this.hcalDepth1Iso = value;
  }

  /**
   * Gets the value of the 'chHadIso' field.
   */
  public java.lang.Float getChHadIso() {
    return chHadIso;
  }

  /**
   * Sets the value of the 'chHadIso' field.
   * @param value the value to set.
   */
  public void setChHadIso(java.lang.Float value) {
    this.chHadIso = value;
  }

  /**
   * Gets the value of the 'gammaIso' field.
   */
  public java.lang.Float getGammaIso() {
    return gammaIso;
  }

  /**
   * Sets the value of the 'gammaIso' field.
   * @param value the value to set.
   */
  public void setGammaIso(java.lang.Float value) {
    this.gammaIso = value;
  }

  /**
   * Gets the value of the 'neuHadIso' field.
   */
  public java.lang.Float getNeuHadIso() {
    return neuHadIso;
  }

  /**
   * Sets the value of the 'neuHadIso' field.
   * @param value the value to set.
   */
  public void setNeuHadIso(java.lang.Float value) {
    this.neuHadIso = value;
  }

  /**
   * Gets the value of the 'puIso' field.
   */
  public java.lang.Float getPuIso() {
    return puIso;
  }

  /**
   * Sets the value of the 'puIso' field.
   * @param value the value to set.
   */
  public void setPuIso(java.lang.Float value) {
    this.puIso = value;
  }

  /**
   * Gets the value of the 'ecalPFClusIso' field.
   */
  public java.lang.Float getEcalPFClusIso() {
    return ecalPFClusIso;
  }

  /**
   * Sets the value of the 'ecalPFClusIso' field.
   * @param value the value to set.
   */
  public void setEcalPFClusIso(java.lang.Float value) {
    this.ecalPFClusIso = value;
  }

  /**
   * Gets the value of the 'hcalPFClusIso' field.
   */
  public java.lang.Float getHcalPFClusIso() {
    return hcalPFClusIso;
  }

  /**
   * Sets the value of the 'hcalPFClusIso' field.
   * @param value the value to set.
   */
  public void setHcalPFClusIso(java.lang.Float value) {
    this.hcalPFClusIso = value;
  }

  /**
   * Gets the value of the 'puppiChHadIso' field.
   */
  public java.lang.Float getPuppiChHadIso() {
    return puppiChHadIso;
  }

  /**
   * Sets the value of the 'puppiChHadIso' field.
   * @param value the value to set.
   */
  public void setPuppiChHadIso(java.lang.Float value) {
    this.puppiChHadIso = value;
  }

  /**
   * Gets the value of the 'puppiGammaIso' field.
   */
  public java.lang.Float getPuppiGammaIso() {
    return puppiGammaIso;
  }

  /**
   * Sets the value of the 'puppiGammaIso' field.
   * @param value the value to set.
   */
  public void setPuppiGammaIso(java.lang.Float value) {
    this.puppiGammaIso = value;
  }

  /**
   * Gets the value of the 'puppiNeuHadIso' field.
   */
  public java.lang.Float getPuppiNeuHadIso() {
    return puppiNeuHadIso;
  }

  /**
   * Sets the value of the 'puppiNeuHadIso' field.
   * @param value the value to set.
   */
  public void setPuppiNeuHadIso(java.lang.Float value) {
    this.puppiNeuHadIso = value;
  }

  /**
   * Gets the value of the 'puppiChHadIsoNoLep' field.
   */
  public java.lang.Float getPuppiChHadIsoNoLep() {
    return puppiChHadIsoNoLep;
  }

  /**
   * Sets the value of the 'puppiChHadIsoNoLep' field.
   * @param value the value to set.
   */
  public void setPuppiChHadIsoNoLep(java.lang.Float value) {
    this.puppiChHadIsoNoLep = value;
  }

  /**
   * Gets the value of the 'puppiGammaIsoNoLep' field.
   */
  public java.lang.Float getPuppiGammaIsoNoLep() {
    return puppiGammaIsoNoLep;
  }

  /**
   * Sets the value of the 'puppiGammaIsoNoLep' field.
   * @param value the value to set.
   */
  public void setPuppiGammaIsoNoLep(java.lang.Float value) {
    this.puppiGammaIsoNoLep = value;
  }

  /**
   * Gets the value of the 'puppiNeuHadIsoNoLep' field.
   */
  public java.lang.Float getPuppiNeuHadIsoNoLep() {
    return puppiNeuHadIsoNoLep;
  }

  /**
   * Sets the value of the 'puppiNeuHadIsoNoLep' field.
   * @param value the value to set.
   */
  public void setPuppiNeuHadIsoNoLep(java.lang.Float value) {
    this.puppiNeuHadIsoNoLep = value;
  }

  /**
   * Gets the value of the 'd0' field.
   */
  public java.lang.Float getD0() {
    return d0;
  }

  /**
   * Sets the value of the 'd0' field.
   * @param value the value to set.
   */
  public void setD0(java.lang.Float value) {
    this.d0 = value;
  }

  /**
   * Gets the value of the 'dz' field.
   */
  public java.lang.Float getDz() {
    return dz;
  }

  /**
   * Sets the value of the 'dz' field.
   * @param value the value to set.
   */
  public void setDz(java.lang.Float value) {
    this.dz = value;
  }

  /**
   * Gets the value of the 'sip3d' field.
   */
  public java.lang.Float getSip3d() {
    return sip3d;
  }

  /**
   * Sets the value of the 'sip3d' field.
   * @param value the value to set.
   */
  public void setSip3d(java.lang.Float value) {
    this.sip3d = value;
  }

  /**
   * Gets the value of the 'sieie' field.
   */
  public java.lang.Float getSieie() {
    return sieie;
  }

  /**
   * Sets the value of the 'sieie' field.
   * @param value the value to set.
   */
  public void setSieie(java.lang.Float value) {
    this.sieie = value;
  }

  /**
   * Gets the value of the 'e1x5' field.
   */
  public java.lang.Float getE1x5() {
    return e1x5;
  }

  /**
   * Sets the value of the 'e1x5' field.
   * @param value the value to set.
   */
  public void setE1x5(java.lang.Float value) {
    this.e1x5 = value;
  }

  /**
   * Gets the value of the 'e2x5' field.
   */
  public java.lang.Float getE2x5() {
    return e2x5;
  }

  /**
   * Sets the value of the 'e2x5' field.
   * @param value the value to set.
   */
  public void setE2x5(java.lang.Float value) {
    this.e2x5 = value;
  }

  /**
   * Gets the value of the 'e5x5' field.
   */
  public java.lang.Float getE5x5() {
    return e5x5;
  }

  /**
   * Sets the value of the 'e5x5' field.
   * @param value the value to set.
   */
  public void setE5x5(java.lang.Float value) {
    this.e5x5 = value;
  }

  /**
   * Gets the value of the 'r9' field.
   */
  public java.lang.Float getR9() {
    return r9;
  }

  /**
   * Sets the value of the 'r9' field.
   * @param value the value to set.
   */
  public void setR9(java.lang.Float value) {
    this.r9 = value;
  }

  /**
   * Gets the value of the 'eoverp' field.
   */
  public java.lang.Float getEoverp() {
    return eoverp;
  }

  /**
   * Sets the value of the 'eoverp' field.
   * @param value the value to set.
   */
  public void setEoverp(java.lang.Float value) {
    this.eoverp = value;
  }

  /**
   * Gets the value of the 'hovere' field.
   */
  public java.lang.Float getHovere() {
    return hovere;
  }

  /**
   * Sets the value of the 'hovere' field.
   * @param value the value to set.
   */
  public void setHovere(java.lang.Float value) {
    this.hovere = value;
  }

  /**
   * Gets the value of the 'fbrem' field.
   */
  public java.lang.Float getFbrem() {
    return fbrem;
  }

  /**
   * Sets the value of the 'fbrem' field.
   * @param value the value to set.
   */
  public void setFbrem(java.lang.Float value) {
    this.fbrem = value;
  }

  /**
   * Gets the value of the 'dEtaInSeed' field.
   */
  public java.lang.Float getDEtaInSeed() {
    return dEtaInSeed;
  }

  /**
   * Sets the value of the 'dEtaInSeed' field.
   * @param value the value to set.
   */
  public void setDEtaInSeed(java.lang.Float value) {
    this.dEtaInSeed = value;
  }

  /**
   * Gets the value of the 'dEtaIn' field.
   */
  public java.lang.Float getDEtaIn() {
    return dEtaIn;
  }

  /**
   * Sets the value of the 'dEtaIn' field.
   * @param value the value to set.
   */
  public void setDEtaIn(java.lang.Float value) {
    this.dEtaIn = value;
  }

  /**
   * Gets the value of the 'dPhiIn' field.
   */
  public java.lang.Float getDPhiIn() {
    return dPhiIn;
  }

  /**
   * Sets the value of the 'dPhiIn' field.
   * @param value the value to set.
   */
  public void setDPhiIn(java.lang.Float value) {
    this.dPhiIn = value;
  }

  /**
   * Gets the value of the 'mva' field.
   */
  public java.lang.Float getMva() {
    return mva;
  }

  /**
   * Sets the value of the 'mva' field.
   * @param value the value to set.
   */
  public void setMva(java.lang.Float value) {
    this.mva = value;
  }

  /**
   * Gets the value of the 'q' field.
   */
  public java.lang.Integer getQ() {
    return q;
  }

  /**
   * Sets the value of the 'q' field.
   * @param value the value to set.
   */
  public void setQ(java.lang.Integer value) {
    this.q = value;
  }

  /**
   * Gets the value of the 'isConv' field.
   */
  public java.lang.Boolean getIsConv() {
    return isConv;
  }

  /**
   * Sets the value of the 'isConv' field.
   * @param value the value to set.
   */
  public void setIsConv(java.lang.Boolean value) {
    this.isConv = value;
  }

  /**
   * Gets the value of the 'nMissingHits' field.
   */
  public java.lang.Long getNMissingHits() {
    return nMissingHits;
  }

  /**
   * Sets the value of the 'nMissingHits' field.
   * @param value the value to set.
   */
  public void setNMissingHits(java.lang.Long value) {
    this.nMissingHits = value;
  }

  /**
   * Gets the value of the 'typeBits' field.
   */
  public java.lang.Long getTypeBits() {
    return typeBits;
  }

  /**
   * Sets the value of the 'typeBits' field.
   * @param value the value to set.
   */
  public void setTypeBits(java.lang.Long value) {
    this.typeBits = value;
  }

  /**
   * Gets the value of the 'fiducialBits' field.
   */
  public java.lang.Long getFiducialBits() {
    return fiducialBits;
  }

  /**
   * Sets the value of the 'fiducialBits' field.
   * @param value the value to set.
   */
  public void setFiducialBits(java.lang.Long value) {
    this.fiducialBits = value;
  }

  /**
   * Gets the value of the 'classification' field.
   */
  public java.lang.Integer getClassification() {
    return classification;
  }

  /**
   * Sets the value of the 'classification' field.
   * @param value the value to set.
   */
  public void setClassification(java.lang.Integer value) {
    this.classification = value;
  }

  /**
   * Gets the value of the 'scID' field.
   */
  public java.lang.Integer getScID() {
    return scID;
  }

  /**
   * Sets the value of the 'scID' field.
   * @param value the value to set.
   */
  public void setScID(java.lang.Integer value) {
    this.scID = value;
  }

  /**
   * Gets the value of the 'trkID' field.
   */
  public java.lang.Integer getTrkID() {
    return trkID;
  }

  /**
   * Sets the value of the 'trkID' field.
   * @param value the value to set.
   */
  public void setTrkID(java.lang.Integer value) {
    this.trkID = value;
  }

  /** Creates a new TElectron RecordBuilder */
  public static baconhep.TElectron.Builder newBuilder() {
    return new baconhep.TElectron.Builder();
  }
  
  /** Creates a new TElectron RecordBuilder by copying an existing Builder */
  public static baconhep.TElectron.Builder newBuilder(baconhep.TElectron.Builder other) {
    return new baconhep.TElectron.Builder(other);
  }
  
  /** Creates a new TElectron RecordBuilder by copying an existing TElectron instance */
  public static baconhep.TElectron.Builder newBuilder(baconhep.TElectron other) {
    return new baconhep.TElectron.Builder(other);
  }
  
  /**
   * RecordBuilder for TElectron instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TElectron>
    implements org.apache.avro.data.RecordBuilder<TElectron> {

    private float pt;
    private float eta;
    private float phi;
    private float scEt;
    private float scEta;
    private float scPhi;
    private float ecalEnergy;
    private float pfPt;
    private float pfEta;
    private float pfPhi;
    private float trkIso;
    private float ecalIso;
    private float hcalIso;
    private float hcalDepth1Iso;
    private float chHadIso;
    private float gammaIso;
    private float neuHadIso;
    private float puIso;
    private float ecalPFClusIso;
    private float hcalPFClusIso;
    private float puppiChHadIso;
    private float puppiGammaIso;
    private float puppiNeuHadIso;
    private float puppiChHadIsoNoLep;
    private float puppiGammaIsoNoLep;
    private float puppiNeuHadIsoNoLep;
    private float d0;
    private float dz;
    private float sip3d;
    private float sieie;
    private float e1x5;
    private float e2x5;
    private float e5x5;
    private float r9;
    private float eoverp;
    private float hovere;
    private float fbrem;
    private float dEtaInSeed;
    private float dEtaIn;
    private float dPhiIn;
    private float mva;
    private int q;
    private boolean isConv;
    private long nMissingHits;
    private long typeBits;
    private long fiducialBits;
    private int classification;
    private int scID;
    private int trkID;

    /** Creates a new Builder */
    private Builder() {
      super(baconhep.TElectron.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(baconhep.TElectron.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.pt)) {
        this.pt = data().deepCopy(fields()[0].schema(), other.pt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eta)) {
        this.eta = data().deepCopy(fields()[1].schema(), other.eta);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phi)) {
        this.phi = data().deepCopy(fields()[2].schema(), other.phi);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.scEt)) {
        this.scEt = data().deepCopy(fields()[3].schema(), other.scEt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.scEta)) {
        this.scEta = data().deepCopy(fields()[4].schema(), other.scEta);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.scPhi)) {
        this.scPhi = data().deepCopy(fields()[5].schema(), other.scPhi);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ecalEnergy)) {
        this.ecalEnergy = data().deepCopy(fields()[6].schema(), other.ecalEnergy);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.pfPt)) {
        this.pfPt = data().deepCopy(fields()[7].schema(), other.pfPt);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.pfEta)) {
        this.pfEta = data().deepCopy(fields()[8].schema(), other.pfEta);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.pfPhi)) {
        this.pfPhi = data().deepCopy(fields()[9].schema(), other.pfPhi);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.trkIso)) {
        this.trkIso = data().deepCopy(fields()[10].schema(), other.trkIso);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.ecalIso)) {
        this.ecalIso = data().deepCopy(fields()[11].schema(), other.ecalIso);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.hcalIso)) {
        this.hcalIso = data().deepCopy(fields()[12].schema(), other.hcalIso);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.hcalDepth1Iso)) {
        this.hcalDepth1Iso = data().deepCopy(fields()[13].schema(), other.hcalDepth1Iso);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.chHadIso)) {
        this.chHadIso = data().deepCopy(fields()[14].schema(), other.chHadIso);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.gammaIso)) {
        this.gammaIso = data().deepCopy(fields()[15].schema(), other.gammaIso);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.neuHadIso)) {
        this.neuHadIso = data().deepCopy(fields()[16].schema(), other.neuHadIso);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.puIso)) {
        this.puIso = data().deepCopy(fields()[17].schema(), other.puIso);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.ecalPFClusIso)) {
        this.ecalPFClusIso = data().deepCopy(fields()[18].schema(), other.ecalPFClusIso);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.hcalPFClusIso)) {
        this.hcalPFClusIso = data().deepCopy(fields()[19].schema(), other.hcalPFClusIso);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.puppiChHadIso)) {
        this.puppiChHadIso = data().deepCopy(fields()[20].schema(), other.puppiChHadIso);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.puppiGammaIso)) {
        this.puppiGammaIso = data().deepCopy(fields()[21].schema(), other.puppiGammaIso);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.puppiNeuHadIso)) {
        this.puppiNeuHadIso = data().deepCopy(fields()[22].schema(), other.puppiNeuHadIso);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.puppiChHadIsoNoLep)) {
        this.puppiChHadIsoNoLep = data().deepCopy(fields()[23].schema(), other.puppiChHadIsoNoLep);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.puppiGammaIsoNoLep)) {
        this.puppiGammaIsoNoLep = data().deepCopy(fields()[24].schema(), other.puppiGammaIsoNoLep);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.puppiNeuHadIsoNoLep)) {
        this.puppiNeuHadIsoNoLep = data().deepCopy(fields()[25].schema(), other.puppiNeuHadIsoNoLep);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.d0)) {
        this.d0 = data().deepCopy(fields()[26].schema(), other.d0);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.dz)) {
        this.dz = data().deepCopy(fields()[27].schema(), other.dz);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.sip3d)) {
        this.sip3d = data().deepCopy(fields()[28].schema(), other.sip3d);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.sieie)) {
        this.sieie = data().deepCopy(fields()[29].schema(), other.sieie);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.e1x5)) {
        this.e1x5 = data().deepCopy(fields()[30].schema(), other.e1x5);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.e2x5)) {
        this.e2x5 = data().deepCopy(fields()[31].schema(), other.e2x5);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.e5x5)) {
        this.e5x5 = data().deepCopy(fields()[32].schema(), other.e5x5);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.r9)) {
        this.r9 = data().deepCopy(fields()[33].schema(), other.r9);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.eoverp)) {
        this.eoverp = data().deepCopy(fields()[34].schema(), other.eoverp);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.hovere)) {
        this.hovere = data().deepCopy(fields()[35].schema(), other.hovere);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.fbrem)) {
        this.fbrem = data().deepCopy(fields()[36].schema(), other.fbrem);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.dEtaInSeed)) {
        this.dEtaInSeed = data().deepCopy(fields()[37].schema(), other.dEtaInSeed);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.dEtaIn)) {
        this.dEtaIn = data().deepCopy(fields()[38].schema(), other.dEtaIn);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.dPhiIn)) {
        this.dPhiIn = data().deepCopy(fields()[39].schema(), other.dPhiIn);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.mva)) {
        this.mva = data().deepCopy(fields()[40].schema(), other.mva);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.q)) {
        this.q = data().deepCopy(fields()[41].schema(), other.q);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.isConv)) {
        this.isConv = data().deepCopy(fields()[42].schema(), other.isConv);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.nMissingHits)) {
        this.nMissingHits = data().deepCopy(fields()[43].schema(), other.nMissingHits);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.typeBits)) {
        this.typeBits = data().deepCopy(fields()[44].schema(), other.typeBits);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.fiducialBits)) {
        this.fiducialBits = data().deepCopy(fields()[45].schema(), other.fiducialBits);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.classification)) {
        this.classification = data().deepCopy(fields()[46].schema(), other.classification);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.scID)) {
        this.scID = data().deepCopy(fields()[47].schema(), other.scID);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.trkID)) {
        this.trkID = data().deepCopy(fields()[48].schema(), other.trkID);
        fieldSetFlags()[48] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TElectron instance */
    private Builder(baconhep.TElectron other) {
            super(baconhep.TElectron.SCHEMA$);
      if (isValidValue(fields()[0], other.pt)) {
        this.pt = data().deepCopy(fields()[0].schema(), other.pt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eta)) {
        this.eta = data().deepCopy(fields()[1].schema(), other.eta);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phi)) {
        this.phi = data().deepCopy(fields()[2].schema(), other.phi);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.scEt)) {
        this.scEt = data().deepCopy(fields()[3].schema(), other.scEt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.scEta)) {
        this.scEta = data().deepCopy(fields()[4].schema(), other.scEta);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.scPhi)) {
        this.scPhi = data().deepCopy(fields()[5].schema(), other.scPhi);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ecalEnergy)) {
        this.ecalEnergy = data().deepCopy(fields()[6].schema(), other.ecalEnergy);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.pfPt)) {
        this.pfPt = data().deepCopy(fields()[7].schema(), other.pfPt);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.pfEta)) {
        this.pfEta = data().deepCopy(fields()[8].schema(), other.pfEta);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.pfPhi)) {
        this.pfPhi = data().deepCopy(fields()[9].schema(), other.pfPhi);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.trkIso)) {
        this.trkIso = data().deepCopy(fields()[10].schema(), other.trkIso);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.ecalIso)) {
        this.ecalIso = data().deepCopy(fields()[11].schema(), other.ecalIso);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.hcalIso)) {
        this.hcalIso = data().deepCopy(fields()[12].schema(), other.hcalIso);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.hcalDepth1Iso)) {
        this.hcalDepth1Iso = data().deepCopy(fields()[13].schema(), other.hcalDepth1Iso);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.chHadIso)) {
        this.chHadIso = data().deepCopy(fields()[14].schema(), other.chHadIso);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.gammaIso)) {
        this.gammaIso = data().deepCopy(fields()[15].schema(), other.gammaIso);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.neuHadIso)) {
        this.neuHadIso = data().deepCopy(fields()[16].schema(), other.neuHadIso);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.puIso)) {
        this.puIso = data().deepCopy(fields()[17].schema(), other.puIso);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.ecalPFClusIso)) {
        this.ecalPFClusIso = data().deepCopy(fields()[18].schema(), other.ecalPFClusIso);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.hcalPFClusIso)) {
        this.hcalPFClusIso = data().deepCopy(fields()[19].schema(), other.hcalPFClusIso);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.puppiChHadIso)) {
        this.puppiChHadIso = data().deepCopy(fields()[20].schema(), other.puppiChHadIso);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.puppiGammaIso)) {
        this.puppiGammaIso = data().deepCopy(fields()[21].schema(), other.puppiGammaIso);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.puppiNeuHadIso)) {
        this.puppiNeuHadIso = data().deepCopy(fields()[22].schema(), other.puppiNeuHadIso);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.puppiChHadIsoNoLep)) {
        this.puppiChHadIsoNoLep = data().deepCopy(fields()[23].schema(), other.puppiChHadIsoNoLep);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.puppiGammaIsoNoLep)) {
        this.puppiGammaIsoNoLep = data().deepCopy(fields()[24].schema(), other.puppiGammaIsoNoLep);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.puppiNeuHadIsoNoLep)) {
        this.puppiNeuHadIsoNoLep = data().deepCopy(fields()[25].schema(), other.puppiNeuHadIsoNoLep);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.d0)) {
        this.d0 = data().deepCopy(fields()[26].schema(), other.d0);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.dz)) {
        this.dz = data().deepCopy(fields()[27].schema(), other.dz);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.sip3d)) {
        this.sip3d = data().deepCopy(fields()[28].schema(), other.sip3d);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.sieie)) {
        this.sieie = data().deepCopy(fields()[29].schema(), other.sieie);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.e1x5)) {
        this.e1x5 = data().deepCopy(fields()[30].schema(), other.e1x5);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.e2x5)) {
        this.e2x5 = data().deepCopy(fields()[31].schema(), other.e2x5);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.e5x5)) {
        this.e5x5 = data().deepCopy(fields()[32].schema(), other.e5x5);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.r9)) {
        this.r9 = data().deepCopy(fields()[33].schema(), other.r9);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.eoverp)) {
        this.eoverp = data().deepCopy(fields()[34].schema(), other.eoverp);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.hovere)) {
        this.hovere = data().deepCopy(fields()[35].schema(), other.hovere);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.fbrem)) {
        this.fbrem = data().deepCopy(fields()[36].schema(), other.fbrem);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.dEtaInSeed)) {
        this.dEtaInSeed = data().deepCopy(fields()[37].schema(), other.dEtaInSeed);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.dEtaIn)) {
        this.dEtaIn = data().deepCopy(fields()[38].schema(), other.dEtaIn);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.dPhiIn)) {
        this.dPhiIn = data().deepCopy(fields()[39].schema(), other.dPhiIn);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.mva)) {
        this.mva = data().deepCopy(fields()[40].schema(), other.mva);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.q)) {
        this.q = data().deepCopy(fields()[41].schema(), other.q);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.isConv)) {
        this.isConv = data().deepCopy(fields()[42].schema(), other.isConv);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.nMissingHits)) {
        this.nMissingHits = data().deepCopy(fields()[43].schema(), other.nMissingHits);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.typeBits)) {
        this.typeBits = data().deepCopy(fields()[44].schema(), other.typeBits);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.fiducialBits)) {
        this.fiducialBits = data().deepCopy(fields()[45].schema(), other.fiducialBits);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.classification)) {
        this.classification = data().deepCopy(fields()[46].schema(), other.classification);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.scID)) {
        this.scID = data().deepCopy(fields()[47].schema(), other.scID);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.trkID)) {
        this.trkID = data().deepCopy(fields()[48].schema(), other.trkID);
        fieldSetFlags()[48] = true;
      }
    }

    /** Gets the value of the 'pt' field */
    public java.lang.Float getPt() {
      return pt;
    }
    
    /** Sets the value of the 'pt' field */
    public baconhep.TElectron.Builder setPt(float value) {
      validate(fields()[0], value);
      this.pt = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'pt' field has been set */
    public boolean hasPt() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'pt' field */
    public baconhep.TElectron.Builder clearPt() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'eta' field */
    public java.lang.Float getEta() {
      return eta;
    }
    
    /** Sets the value of the 'eta' field */
    public baconhep.TElectron.Builder setEta(float value) {
      validate(fields()[1], value);
      this.eta = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'eta' field has been set */
    public boolean hasEta() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'eta' field */
    public baconhep.TElectron.Builder clearEta() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'phi' field */
    public java.lang.Float getPhi() {
      return phi;
    }
    
    /** Sets the value of the 'phi' field */
    public baconhep.TElectron.Builder setPhi(float value) {
      validate(fields()[2], value);
      this.phi = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'phi' field has been set */
    public boolean hasPhi() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'phi' field */
    public baconhep.TElectron.Builder clearPhi() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'scEt' field */
    public java.lang.Float getScEt() {
      return scEt;
    }
    
    /** Sets the value of the 'scEt' field */
    public baconhep.TElectron.Builder setScEt(float value) {
      validate(fields()[3], value);
      this.scEt = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'scEt' field has been set */
    public boolean hasScEt() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'scEt' field */
    public baconhep.TElectron.Builder clearScEt() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'scEta' field */
    public java.lang.Float getScEta() {
      return scEta;
    }
    
    /** Sets the value of the 'scEta' field */
    public baconhep.TElectron.Builder setScEta(float value) {
      validate(fields()[4], value);
      this.scEta = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'scEta' field has been set */
    public boolean hasScEta() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'scEta' field */
    public baconhep.TElectron.Builder clearScEta() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'scPhi' field */
    public java.lang.Float getScPhi() {
      return scPhi;
    }
    
    /** Sets the value of the 'scPhi' field */
    public baconhep.TElectron.Builder setScPhi(float value) {
      validate(fields()[5], value);
      this.scPhi = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'scPhi' field has been set */
    public boolean hasScPhi() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'scPhi' field */
    public baconhep.TElectron.Builder clearScPhi() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'ecalEnergy' field */
    public java.lang.Float getEcalEnergy() {
      return ecalEnergy;
    }
    
    /** Sets the value of the 'ecalEnergy' field */
    public baconhep.TElectron.Builder setEcalEnergy(float value) {
      validate(fields()[6], value);
      this.ecalEnergy = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'ecalEnergy' field has been set */
    public boolean hasEcalEnergy() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'ecalEnergy' field */
    public baconhep.TElectron.Builder clearEcalEnergy() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'pfPt' field */
    public java.lang.Float getPfPt() {
      return pfPt;
    }
    
    /** Sets the value of the 'pfPt' field */
    public baconhep.TElectron.Builder setPfPt(float value) {
      validate(fields()[7], value);
      this.pfPt = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'pfPt' field has been set */
    public boolean hasPfPt() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'pfPt' field */
    public baconhep.TElectron.Builder clearPfPt() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'pfEta' field */
    public java.lang.Float getPfEta() {
      return pfEta;
    }
    
    /** Sets the value of the 'pfEta' field */
    public baconhep.TElectron.Builder setPfEta(float value) {
      validate(fields()[8], value);
      this.pfEta = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'pfEta' field has been set */
    public boolean hasPfEta() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'pfEta' field */
    public baconhep.TElectron.Builder clearPfEta() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'pfPhi' field */
    public java.lang.Float getPfPhi() {
      return pfPhi;
    }
    
    /** Sets the value of the 'pfPhi' field */
    public baconhep.TElectron.Builder setPfPhi(float value) {
      validate(fields()[9], value);
      this.pfPhi = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'pfPhi' field has been set */
    public boolean hasPfPhi() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'pfPhi' field */
    public baconhep.TElectron.Builder clearPfPhi() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'trkIso' field */
    public java.lang.Float getTrkIso() {
      return trkIso;
    }
    
    /** Sets the value of the 'trkIso' field */
    public baconhep.TElectron.Builder setTrkIso(float value) {
      validate(fields()[10], value);
      this.trkIso = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'trkIso' field has been set */
    public boolean hasTrkIso() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'trkIso' field */
    public baconhep.TElectron.Builder clearTrkIso() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'ecalIso' field */
    public java.lang.Float getEcalIso() {
      return ecalIso;
    }
    
    /** Sets the value of the 'ecalIso' field */
    public baconhep.TElectron.Builder setEcalIso(float value) {
      validate(fields()[11], value);
      this.ecalIso = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'ecalIso' field has been set */
    public boolean hasEcalIso() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'ecalIso' field */
    public baconhep.TElectron.Builder clearEcalIso() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'hcalIso' field */
    public java.lang.Float getHcalIso() {
      return hcalIso;
    }
    
    /** Sets the value of the 'hcalIso' field */
    public baconhep.TElectron.Builder setHcalIso(float value) {
      validate(fields()[12], value);
      this.hcalIso = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'hcalIso' field has been set */
    public boolean hasHcalIso() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'hcalIso' field */
    public baconhep.TElectron.Builder clearHcalIso() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'hcalDepth1Iso' field */
    public java.lang.Float getHcalDepth1Iso() {
      return hcalDepth1Iso;
    }
    
    /** Sets the value of the 'hcalDepth1Iso' field */
    public baconhep.TElectron.Builder setHcalDepth1Iso(float value) {
      validate(fields()[13], value);
      this.hcalDepth1Iso = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'hcalDepth1Iso' field has been set */
    public boolean hasHcalDepth1Iso() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'hcalDepth1Iso' field */
    public baconhep.TElectron.Builder clearHcalDepth1Iso() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'chHadIso' field */
    public java.lang.Float getChHadIso() {
      return chHadIso;
    }
    
    /** Sets the value of the 'chHadIso' field */
    public baconhep.TElectron.Builder setChHadIso(float value) {
      validate(fields()[14], value);
      this.chHadIso = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'chHadIso' field has been set */
    public boolean hasChHadIso() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'chHadIso' field */
    public baconhep.TElectron.Builder clearChHadIso() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'gammaIso' field */
    public java.lang.Float getGammaIso() {
      return gammaIso;
    }
    
    /** Sets the value of the 'gammaIso' field */
    public baconhep.TElectron.Builder setGammaIso(float value) {
      validate(fields()[15], value);
      this.gammaIso = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'gammaIso' field has been set */
    public boolean hasGammaIso() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'gammaIso' field */
    public baconhep.TElectron.Builder clearGammaIso() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'neuHadIso' field */
    public java.lang.Float getNeuHadIso() {
      return neuHadIso;
    }
    
    /** Sets the value of the 'neuHadIso' field */
    public baconhep.TElectron.Builder setNeuHadIso(float value) {
      validate(fields()[16], value);
      this.neuHadIso = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'neuHadIso' field has been set */
    public boolean hasNeuHadIso() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'neuHadIso' field */
    public baconhep.TElectron.Builder clearNeuHadIso() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'puIso' field */
    public java.lang.Float getPuIso() {
      return puIso;
    }
    
    /** Sets the value of the 'puIso' field */
    public baconhep.TElectron.Builder setPuIso(float value) {
      validate(fields()[17], value);
      this.puIso = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'puIso' field has been set */
    public boolean hasPuIso() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'puIso' field */
    public baconhep.TElectron.Builder clearPuIso() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'ecalPFClusIso' field */
    public java.lang.Float getEcalPFClusIso() {
      return ecalPFClusIso;
    }
    
    /** Sets the value of the 'ecalPFClusIso' field */
    public baconhep.TElectron.Builder setEcalPFClusIso(float value) {
      validate(fields()[18], value);
      this.ecalPFClusIso = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'ecalPFClusIso' field has been set */
    public boolean hasEcalPFClusIso() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'ecalPFClusIso' field */
    public baconhep.TElectron.Builder clearEcalPFClusIso() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'hcalPFClusIso' field */
    public java.lang.Float getHcalPFClusIso() {
      return hcalPFClusIso;
    }
    
    /** Sets the value of the 'hcalPFClusIso' field */
    public baconhep.TElectron.Builder setHcalPFClusIso(float value) {
      validate(fields()[19], value);
      this.hcalPFClusIso = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'hcalPFClusIso' field has been set */
    public boolean hasHcalPFClusIso() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'hcalPFClusIso' field */
    public baconhep.TElectron.Builder clearHcalPFClusIso() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'puppiChHadIso' field */
    public java.lang.Float getPuppiChHadIso() {
      return puppiChHadIso;
    }
    
    /** Sets the value of the 'puppiChHadIso' field */
    public baconhep.TElectron.Builder setPuppiChHadIso(float value) {
      validate(fields()[20], value);
      this.puppiChHadIso = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'puppiChHadIso' field has been set */
    public boolean hasPuppiChHadIso() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'puppiChHadIso' field */
    public baconhep.TElectron.Builder clearPuppiChHadIso() {
      fieldSetFlags()[20] = false;
      return this;
    }

    /** Gets the value of the 'puppiGammaIso' field */
    public java.lang.Float getPuppiGammaIso() {
      return puppiGammaIso;
    }
    
    /** Sets the value of the 'puppiGammaIso' field */
    public baconhep.TElectron.Builder setPuppiGammaIso(float value) {
      validate(fields()[21], value);
      this.puppiGammaIso = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'puppiGammaIso' field has been set */
    public boolean hasPuppiGammaIso() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'puppiGammaIso' field */
    public baconhep.TElectron.Builder clearPuppiGammaIso() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /** Gets the value of the 'puppiNeuHadIso' field */
    public java.lang.Float getPuppiNeuHadIso() {
      return puppiNeuHadIso;
    }
    
    /** Sets the value of the 'puppiNeuHadIso' field */
    public baconhep.TElectron.Builder setPuppiNeuHadIso(float value) {
      validate(fields()[22], value);
      this.puppiNeuHadIso = value;
      fieldSetFlags()[22] = true;
      return this; 
    }
    
    /** Checks whether the 'puppiNeuHadIso' field has been set */
    public boolean hasPuppiNeuHadIso() {
      return fieldSetFlags()[22];
    }
    
    /** Clears the value of the 'puppiNeuHadIso' field */
    public baconhep.TElectron.Builder clearPuppiNeuHadIso() {
      fieldSetFlags()[22] = false;
      return this;
    }

    /** Gets the value of the 'puppiChHadIsoNoLep' field */
    public java.lang.Float getPuppiChHadIsoNoLep() {
      return puppiChHadIsoNoLep;
    }
    
    /** Sets the value of the 'puppiChHadIsoNoLep' field */
    public baconhep.TElectron.Builder setPuppiChHadIsoNoLep(float value) {
      validate(fields()[23], value);
      this.puppiChHadIsoNoLep = value;
      fieldSetFlags()[23] = true;
      return this; 
    }
    
    /** Checks whether the 'puppiChHadIsoNoLep' field has been set */
    public boolean hasPuppiChHadIsoNoLep() {
      return fieldSetFlags()[23];
    }
    
    /** Clears the value of the 'puppiChHadIsoNoLep' field */
    public baconhep.TElectron.Builder clearPuppiChHadIsoNoLep() {
      fieldSetFlags()[23] = false;
      return this;
    }

    /** Gets the value of the 'puppiGammaIsoNoLep' field */
    public java.lang.Float getPuppiGammaIsoNoLep() {
      return puppiGammaIsoNoLep;
    }
    
    /** Sets the value of the 'puppiGammaIsoNoLep' field */
    public baconhep.TElectron.Builder setPuppiGammaIsoNoLep(float value) {
      validate(fields()[24], value);
      this.puppiGammaIsoNoLep = value;
      fieldSetFlags()[24] = true;
      return this; 
    }
    
    /** Checks whether the 'puppiGammaIsoNoLep' field has been set */
    public boolean hasPuppiGammaIsoNoLep() {
      return fieldSetFlags()[24];
    }
    
    /** Clears the value of the 'puppiGammaIsoNoLep' field */
    public baconhep.TElectron.Builder clearPuppiGammaIsoNoLep() {
      fieldSetFlags()[24] = false;
      return this;
    }

    /** Gets the value of the 'puppiNeuHadIsoNoLep' field */
    public java.lang.Float getPuppiNeuHadIsoNoLep() {
      return puppiNeuHadIsoNoLep;
    }
    
    /** Sets the value of the 'puppiNeuHadIsoNoLep' field */
    public baconhep.TElectron.Builder setPuppiNeuHadIsoNoLep(float value) {
      validate(fields()[25], value);
      this.puppiNeuHadIsoNoLep = value;
      fieldSetFlags()[25] = true;
      return this; 
    }
    
    /** Checks whether the 'puppiNeuHadIsoNoLep' field has been set */
    public boolean hasPuppiNeuHadIsoNoLep() {
      return fieldSetFlags()[25];
    }
    
    /** Clears the value of the 'puppiNeuHadIsoNoLep' field */
    public baconhep.TElectron.Builder clearPuppiNeuHadIsoNoLep() {
      fieldSetFlags()[25] = false;
      return this;
    }

    /** Gets the value of the 'd0' field */
    public java.lang.Float getD0() {
      return d0;
    }
    
    /** Sets the value of the 'd0' field */
    public baconhep.TElectron.Builder setD0(float value) {
      validate(fields()[26], value);
      this.d0 = value;
      fieldSetFlags()[26] = true;
      return this; 
    }
    
    /** Checks whether the 'd0' field has been set */
    public boolean hasD0() {
      return fieldSetFlags()[26];
    }
    
    /** Clears the value of the 'd0' field */
    public baconhep.TElectron.Builder clearD0() {
      fieldSetFlags()[26] = false;
      return this;
    }

    /** Gets the value of the 'dz' field */
    public java.lang.Float getDz() {
      return dz;
    }
    
    /** Sets the value of the 'dz' field */
    public baconhep.TElectron.Builder setDz(float value) {
      validate(fields()[27], value);
      this.dz = value;
      fieldSetFlags()[27] = true;
      return this; 
    }
    
    /** Checks whether the 'dz' field has been set */
    public boolean hasDz() {
      return fieldSetFlags()[27];
    }
    
    /** Clears the value of the 'dz' field */
    public baconhep.TElectron.Builder clearDz() {
      fieldSetFlags()[27] = false;
      return this;
    }

    /** Gets the value of the 'sip3d' field */
    public java.lang.Float getSip3d() {
      return sip3d;
    }
    
    /** Sets the value of the 'sip3d' field */
    public baconhep.TElectron.Builder setSip3d(float value) {
      validate(fields()[28], value);
      this.sip3d = value;
      fieldSetFlags()[28] = true;
      return this; 
    }
    
    /** Checks whether the 'sip3d' field has been set */
    public boolean hasSip3d() {
      return fieldSetFlags()[28];
    }
    
    /** Clears the value of the 'sip3d' field */
    public baconhep.TElectron.Builder clearSip3d() {
      fieldSetFlags()[28] = false;
      return this;
    }

    /** Gets the value of the 'sieie' field */
    public java.lang.Float getSieie() {
      return sieie;
    }
    
    /** Sets the value of the 'sieie' field */
    public baconhep.TElectron.Builder setSieie(float value) {
      validate(fields()[29], value);
      this.sieie = value;
      fieldSetFlags()[29] = true;
      return this; 
    }
    
    /** Checks whether the 'sieie' field has been set */
    public boolean hasSieie() {
      return fieldSetFlags()[29];
    }
    
    /** Clears the value of the 'sieie' field */
    public baconhep.TElectron.Builder clearSieie() {
      fieldSetFlags()[29] = false;
      return this;
    }

    /** Gets the value of the 'e1x5' field */
    public java.lang.Float getE1x5() {
      return e1x5;
    }
    
    /** Sets the value of the 'e1x5' field */
    public baconhep.TElectron.Builder setE1x5(float value) {
      validate(fields()[30], value);
      this.e1x5 = value;
      fieldSetFlags()[30] = true;
      return this; 
    }
    
    /** Checks whether the 'e1x5' field has been set */
    public boolean hasE1x5() {
      return fieldSetFlags()[30];
    }
    
    /** Clears the value of the 'e1x5' field */
    public baconhep.TElectron.Builder clearE1x5() {
      fieldSetFlags()[30] = false;
      return this;
    }

    /** Gets the value of the 'e2x5' field */
    public java.lang.Float getE2x5() {
      return e2x5;
    }
    
    /** Sets the value of the 'e2x5' field */
    public baconhep.TElectron.Builder setE2x5(float value) {
      validate(fields()[31], value);
      this.e2x5 = value;
      fieldSetFlags()[31] = true;
      return this; 
    }
    
    /** Checks whether the 'e2x5' field has been set */
    public boolean hasE2x5() {
      return fieldSetFlags()[31];
    }
    
    /** Clears the value of the 'e2x5' field */
    public baconhep.TElectron.Builder clearE2x5() {
      fieldSetFlags()[31] = false;
      return this;
    }

    /** Gets the value of the 'e5x5' field */
    public java.lang.Float getE5x5() {
      return e5x5;
    }
    
    /** Sets the value of the 'e5x5' field */
    public baconhep.TElectron.Builder setE5x5(float value) {
      validate(fields()[32], value);
      this.e5x5 = value;
      fieldSetFlags()[32] = true;
      return this; 
    }
    
    /** Checks whether the 'e5x5' field has been set */
    public boolean hasE5x5() {
      return fieldSetFlags()[32];
    }
    
    /** Clears the value of the 'e5x5' field */
    public baconhep.TElectron.Builder clearE5x5() {
      fieldSetFlags()[32] = false;
      return this;
    }

    /** Gets the value of the 'r9' field */
    public java.lang.Float getR9() {
      return r9;
    }
    
    /** Sets the value of the 'r9' field */
    public baconhep.TElectron.Builder setR9(float value) {
      validate(fields()[33], value);
      this.r9 = value;
      fieldSetFlags()[33] = true;
      return this; 
    }
    
    /** Checks whether the 'r9' field has been set */
    public boolean hasR9() {
      return fieldSetFlags()[33];
    }
    
    /** Clears the value of the 'r9' field */
    public baconhep.TElectron.Builder clearR9() {
      fieldSetFlags()[33] = false;
      return this;
    }

    /** Gets the value of the 'eoverp' field */
    public java.lang.Float getEoverp() {
      return eoverp;
    }
    
    /** Sets the value of the 'eoverp' field */
    public baconhep.TElectron.Builder setEoverp(float value) {
      validate(fields()[34], value);
      this.eoverp = value;
      fieldSetFlags()[34] = true;
      return this; 
    }
    
    /** Checks whether the 'eoverp' field has been set */
    public boolean hasEoverp() {
      return fieldSetFlags()[34];
    }
    
    /** Clears the value of the 'eoverp' field */
    public baconhep.TElectron.Builder clearEoverp() {
      fieldSetFlags()[34] = false;
      return this;
    }

    /** Gets the value of the 'hovere' field */
    public java.lang.Float getHovere() {
      return hovere;
    }
    
    /** Sets the value of the 'hovere' field */
    public baconhep.TElectron.Builder setHovere(float value) {
      validate(fields()[35], value);
      this.hovere = value;
      fieldSetFlags()[35] = true;
      return this; 
    }
    
    /** Checks whether the 'hovere' field has been set */
    public boolean hasHovere() {
      return fieldSetFlags()[35];
    }
    
    /** Clears the value of the 'hovere' field */
    public baconhep.TElectron.Builder clearHovere() {
      fieldSetFlags()[35] = false;
      return this;
    }

    /** Gets the value of the 'fbrem' field */
    public java.lang.Float getFbrem() {
      return fbrem;
    }
    
    /** Sets the value of the 'fbrem' field */
    public baconhep.TElectron.Builder setFbrem(float value) {
      validate(fields()[36], value);
      this.fbrem = value;
      fieldSetFlags()[36] = true;
      return this; 
    }
    
    /** Checks whether the 'fbrem' field has been set */
    public boolean hasFbrem() {
      return fieldSetFlags()[36];
    }
    
    /** Clears the value of the 'fbrem' field */
    public baconhep.TElectron.Builder clearFbrem() {
      fieldSetFlags()[36] = false;
      return this;
    }

    /** Gets the value of the 'dEtaInSeed' field */
    public java.lang.Float getDEtaInSeed() {
      return dEtaInSeed;
    }
    
    /** Sets the value of the 'dEtaInSeed' field */
    public baconhep.TElectron.Builder setDEtaInSeed(float value) {
      validate(fields()[37], value);
      this.dEtaInSeed = value;
      fieldSetFlags()[37] = true;
      return this; 
    }
    
    /** Checks whether the 'dEtaInSeed' field has been set */
    public boolean hasDEtaInSeed() {
      return fieldSetFlags()[37];
    }
    
    /** Clears the value of the 'dEtaInSeed' field */
    public baconhep.TElectron.Builder clearDEtaInSeed() {
      fieldSetFlags()[37] = false;
      return this;
    }

    /** Gets the value of the 'dEtaIn' field */
    public java.lang.Float getDEtaIn() {
      return dEtaIn;
    }
    
    /** Sets the value of the 'dEtaIn' field */
    public baconhep.TElectron.Builder setDEtaIn(float value) {
      validate(fields()[38], value);
      this.dEtaIn = value;
      fieldSetFlags()[38] = true;
      return this; 
    }
    
    /** Checks whether the 'dEtaIn' field has been set */
    public boolean hasDEtaIn() {
      return fieldSetFlags()[38];
    }
    
    /** Clears the value of the 'dEtaIn' field */
    public baconhep.TElectron.Builder clearDEtaIn() {
      fieldSetFlags()[38] = false;
      return this;
    }

    /** Gets the value of the 'dPhiIn' field */
    public java.lang.Float getDPhiIn() {
      return dPhiIn;
    }
    
    /** Sets the value of the 'dPhiIn' field */
    public baconhep.TElectron.Builder setDPhiIn(float value) {
      validate(fields()[39], value);
      this.dPhiIn = value;
      fieldSetFlags()[39] = true;
      return this; 
    }
    
    /** Checks whether the 'dPhiIn' field has been set */
    public boolean hasDPhiIn() {
      return fieldSetFlags()[39];
    }
    
    /** Clears the value of the 'dPhiIn' field */
    public baconhep.TElectron.Builder clearDPhiIn() {
      fieldSetFlags()[39] = false;
      return this;
    }

    /** Gets the value of the 'mva' field */
    public java.lang.Float getMva() {
      return mva;
    }
    
    /** Sets the value of the 'mva' field */
    public baconhep.TElectron.Builder setMva(float value) {
      validate(fields()[40], value);
      this.mva = value;
      fieldSetFlags()[40] = true;
      return this; 
    }
    
    /** Checks whether the 'mva' field has been set */
    public boolean hasMva() {
      return fieldSetFlags()[40];
    }
    
    /** Clears the value of the 'mva' field */
    public baconhep.TElectron.Builder clearMva() {
      fieldSetFlags()[40] = false;
      return this;
    }

    /** Gets the value of the 'q' field */
    public java.lang.Integer getQ() {
      return q;
    }
    
    /** Sets the value of the 'q' field */
    public baconhep.TElectron.Builder setQ(int value) {
      validate(fields()[41], value);
      this.q = value;
      fieldSetFlags()[41] = true;
      return this; 
    }
    
    /** Checks whether the 'q' field has been set */
    public boolean hasQ() {
      return fieldSetFlags()[41];
    }
    
    /** Clears the value of the 'q' field */
    public baconhep.TElectron.Builder clearQ() {
      fieldSetFlags()[41] = false;
      return this;
    }

    /** Gets the value of the 'isConv' field */
    public java.lang.Boolean getIsConv() {
      return isConv;
    }
    
    /** Sets the value of the 'isConv' field */
    public baconhep.TElectron.Builder setIsConv(boolean value) {
      validate(fields()[42], value);
      this.isConv = value;
      fieldSetFlags()[42] = true;
      return this; 
    }
    
    /** Checks whether the 'isConv' field has been set */
    public boolean hasIsConv() {
      return fieldSetFlags()[42];
    }
    
    /** Clears the value of the 'isConv' field */
    public baconhep.TElectron.Builder clearIsConv() {
      fieldSetFlags()[42] = false;
      return this;
    }

    /** Gets the value of the 'nMissingHits' field */
    public java.lang.Long getNMissingHits() {
      return nMissingHits;
    }
    
    /** Sets the value of the 'nMissingHits' field */
    public baconhep.TElectron.Builder setNMissingHits(long value) {
      validate(fields()[43], value);
      this.nMissingHits = value;
      fieldSetFlags()[43] = true;
      return this; 
    }
    
    /** Checks whether the 'nMissingHits' field has been set */
    public boolean hasNMissingHits() {
      return fieldSetFlags()[43];
    }
    
    /** Clears the value of the 'nMissingHits' field */
    public baconhep.TElectron.Builder clearNMissingHits() {
      fieldSetFlags()[43] = false;
      return this;
    }

    /** Gets the value of the 'typeBits' field */
    public java.lang.Long getTypeBits() {
      return typeBits;
    }
    
    /** Sets the value of the 'typeBits' field */
    public baconhep.TElectron.Builder setTypeBits(long value) {
      validate(fields()[44], value);
      this.typeBits = value;
      fieldSetFlags()[44] = true;
      return this; 
    }
    
    /** Checks whether the 'typeBits' field has been set */
    public boolean hasTypeBits() {
      return fieldSetFlags()[44];
    }
    
    /** Clears the value of the 'typeBits' field */
    public baconhep.TElectron.Builder clearTypeBits() {
      fieldSetFlags()[44] = false;
      return this;
    }

    /** Gets the value of the 'fiducialBits' field */
    public java.lang.Long getFiducialBits() {
      return fiducialBits;
    }
    
    /** Sets the value of the 'fiducialBits' field */
    public baconhep.TElectron.Builder setFiducialBits(long value) {
      validate(fields()[45], value);
      this.fiducialBits = value;
      fieldSetFlags()[45] = true;
      return this; 
    }
    
    /** Checks whether the 'fiducialBits' field has been set */
    public boolean hasFiducialBits() {
      return fieldSetFlags()[45];
    }
    
    /** Clears the value of the 'fiducialBits' field */
    public baconhep.TElectron.Builder clearFiducialBits() {
      fieldSetFlags()[45] = false;
      return this;
    }

    /** Gets the value of the 'classification' field */
    public java.lang.Integer getClassification() {
      return classification;
    }
    
    /** Sets the value of the 'classification' field */
    public baconhep.TElectron.Builder setClassification(int value) {
      validate(fields()[46], value);
      this.classification = value;
      fieldSetFlags()[46] = true;
      return this; 
    }
    
    /** Checks whether the 'classification' field has been set */
    public boolean hasClassification() {
      return fieldSetFlags()[46];
    }
    
    /** Clears the value of the 'classification' field */
    public baconhep.TElectron.Builder clearClassification() {
      fieldSetFlags()[46] = false;
      return this;
    }

    /** Gets the value of the 'scID' field */
    public java.lang.Integer getScID() {
      return scID;
    }
    
    /** Sets the value of the 'scID' field */
    public baconhep.TElectron.Builder setScID(int value) {
      validate(fields()[47], value);
      this.scID = value;
      fieldSetFlags()[47] = true;
      return this; 
    }
    
    /** Checks whether the 'scID' field has been set */
    public boolean hasScID() {
      return fieldSetFlags()[47];
    }
    
    /** Clears the value of the 'scID' field */
    public baconhep.TElectron.Builder clearScID() {
      fieldSetFlags()[47] = false;
      return this;
    }

    /** Gets the value of the 'trkID' field */
    public java.lang.Integer getTrkID() {
      return trkID;
    }
    
    /** Sets the value of the 'trkID' field */
    public baconhep.TElectron.Builder setTrkID(int value) {
      validate(fields()[48], value);
      this.trkID = value;
      fieldSetFlags()[48] = true;
      return this; 
    }
    
    /** Checks whether the 'trkID' field has been set */
    public boolean hasTrkID() {
      return fieldSetFlags()[48];
    }
    
    /** Clears the value of the 'trkID' field */
    public baconhep.TElectron.Builder clearTrkID() {
      fieldSetFlags()[48] = false;
      return this;
    }

    @Override
    public TElectron build() {
      try {
        TElectron record = new TElectron();
        record.pt = fieldSetFlags()[0] ? this.pt : (java.lang.Float) defaultValue(fields()[0]);
        record.eta = fieldSetFlags()[1] ? this.eta : (java.lang.Float) defaultValue(fields()[1]);
        record.phi = fieldSetFlags()[2] ? this.phi : (java.lang.Float) defaultValue(fields()[2]);
        record.scEt = fieldSetFlags()[3] ? this.scEt : (java.lang.Float) defaultValue(fields()[3]);
        record.scEta = fieldSetFlags()[4] ? this.scEta : (java.lang.Float) defaultValue(fields()[4]);
        record.scPhi = fieldSetFlags()[5] ? this.scPhi : (java.lang.Float) defaultValue(fields()[5]);
        record.ecalEnergy = fieldSetFlags()[6] ? this.ecalEnergy : (java.lang.Float) defaultValue(fields()[6]);
        record.pfPt = fieldSetFlags()[7] ? this.pfPt : (java.lang.Float) defaultValue(fields()[7]);
        record.pfEta = fieldSetFlags()[8] ? this.pfEta : (java.lang.Float) defaultValue(fields()[8]);
        record.pfPhi = fieldSetFlags()[9] ? this.pfPhi : (java.lang.Float) defaultValue(fields()[9]);
        record.trkIso = fieldSetFlags()[10] ? this.trkIso : (java.lang.Float) defaultValue(fields()[10]);
        record.ecalIso = fieldSetFlags()[11] ? this.ecalIso : (java.lang.Float) defaultValue(fields()[11]);
        record.hcalIso = fieldSetFlags()[12] ? this.hcalIso : (java.lang.Float) defaultValue(fields()[12]);
        record.hcalDepth1Iso = fieldSetFlags()[13] ? this.hcalDepth1Iso : (java.lang.Float) defaultValue(fields()[13]);
        record.chHadIso = fieldSetFlags()[14] ? this.chHadIso : (java.lang.Float) defaultValue(fields()[14]);
        record.gammaIso = fieldSetFlags()[15] ? this.gammaIso : (java.lang.Float) defaultValue(fields()[15]);
        record.neuHadIso = fieldSetFlags()[16] ? this.neuHadIso : (java.lang.Float) defaultValue(fields()[16]);
        record.puIso = fieldSetFlags()[17] ? this.puIso : (java.lang.Float) defaultValue(fields()[17]);
        record.ecalPFClusIso = fieldSetFlags()[18] ? this.ecalPFClusIso : (java.lang.Float) defaultValue(fields()[18]);
        record.hcalPFClusIso = fieldSetFlags()[19] ? this.hcalPFClusIso : (java.lang.Float) defaultValue(fields()[19]);
        record.puppiChHadIso = fieldSetFlags()[20] ? this.puppiChHadIso : (java.lang.Float) defaultValue(fields()[20]);
        record.puppiGammaIso = fieldSetFlags()[21] ? this.puppiGammaIso : (java.lang.Float) defaultValue(fields()[21]);
        record.puppiNeuHadIso = fieldSetFlags()[22] ? this.puppiNeuHadIso : (java.lang.Float) defaultValue(fields()[22]);
        record.puppiChHadIsoNoLep = fieldSetFlags()[23] ? this.puppiChHadIsoNoLep : (java.lang.Float) defaultValue(fields()[23]);
        record.puppiGammaIsoNoLep = fieldSetFlags()[24] ? this.puppiGammaIsoNoLep : (java.lang.Float) defaultValue(fields()[24]);
        record.puppiNeuHadIsoNoLep = fieldSetFlags()[25] ? this.puppiNeuHadIsoNoLep : (java.lang.Float) defaultValue(fields()[25]);
        record.d0 = fieldSetFlags()[26] ? this.d0 : (java.lang.Float) defaultValue(fields()[26]);
        record.dz = fieldSetFlags()[27] ? this.dz : (java.lang.Float) defaultValue(fields()[27]);
        record.sip3d = fieldSetFlags()[28] ? this.sip3d : (java.lang.Float) defaultValue(fields()[28]);
        record.sieie = fieldSetFlags()[29] ? this.sieie : (java.lang.Float) defaultValue(fields()[29]);
        record.e1x5 = fieldSetFlags()[30] ? this.e1x5 : (java.lang.Float) defaultValue(fields()[30]);
        record.e2x5 = fieldSetFlags()[31] ? this.e2x5 : (java.lang.Float) defaultValue(fields()[31]);
        record.e5x5 = fieldSetFlags()[32] ? this.e5x5 : (java.lang.Float) defaultValue(fields()[32]);
        record.r9 = fieldSetFlags()[33] ? this.r9 : (java.lang.Float) defaultValue(fields()[33]);
        record.eoverp = fieldSetFlags()[34] ? this.eoverp : (java.lang.Float) defaultValue(fields()[34]);
        record.hovere = fieldSetFlags()[35] ? this.hovere : (java.lang.Float) defaultValue(fields()[35]);
        record.fbrem = fieldSetFlags()[36] ? this.fbrem : (java.lang.Float) defaultValue(fields()[36]);
        record.dEtaInSeed = fieldSetFlags()[37] ? this.dEtaInSeed : (java.lang.Float) defaultValue(fields()[37]);
        record.dEtaIn = fieldSetFlags()[38] ? this.dEtaIn : (java.lang.Float) defaultValue(fields()[38]);
        record.dPhiIn = fieldSetFlags()[39] ? this.dPhiIn : (java.lang.Float) defaultValue(fields()[39]);
        record.mva = fieldSetFlags()[40] ? this.mva : (java.lang.Float) defaultValue(fields()[40]);
        record.q = fieldSetFlags()[41] ? this.q : (java.lang.Integer) defaultValue(fields()[41]);
        record.isConv = fieldSetFlags()[42] ? this.isConv : (java.lang.Boolean) defaultValue(fields()[42]);
        record.nMissingHits = fieldSetFlags()[43] ? this.nMissingHits : (java.lang.Long) defaultValue(fields()[43]);
        record.typeBits = fieldSetFlags()[44] ? this.typeBits : (java.lang.Long) defaultValue(fields()[44]);
        record.fiducialBits = fieldSetFlags()[45] ? this.fiducialBits : (java.lang.Long) defaultValue(fields()[45]);
        record.classification = fieldSetFlags()[46] ? this.classification : (java.lang.Integer) defaultValue(fields()[46]);
        record.scID = fieldSetFlags()[47] ? this.scID : (java.lang.Integer) defaultValue(fields()[47]);
        record.trkID = fieldSetFlags()[48] ? this.trkID : (java.lang.Integer) defaultValue(fields()[48]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
