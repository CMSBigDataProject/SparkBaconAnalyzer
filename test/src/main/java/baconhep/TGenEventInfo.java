/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package baconhep;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TGenEventInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TGenEventInfo\",\"namespace\":\"baconhep\",\"fields\":[{\"name\":\"id_1\",\"type\":\"int\"},{\"name\":\"id_2\",\"type\":\"int\"},{\"name\":\"x_1\",\"type\":\"float\"},{\"name\":\"x_2\",\"type\":\"float\"},{\"name\":\"scalePDF\",\"type\":\"float\"},{\"name\":\"xs\",\"type\":\"float\"},{\"name\":\"weight\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int id_1;
  @Deprecated public int id_2;
  @Deprecated public float x_1;
  @Deprecated public float x_2;
  @Deprecated public float scalePDF;
  @Deprecated public float xs;
  @Deprecated public float weight;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TGenEventInfo() {}

  /**
   * All-args constructor.
   */
  public TGenEventInfo(java.lang.Integer id_1, java.lang.Integer id_2, java.lang.Float x_1, java.lang.Float x_2, java.lang.Float scalePDF, java.lang.Float xs, java.lang.Float weight) {
    this.id_1 = id_1;
    this.id_2 = id_2;
    this.x_1 = x_1;
    this.x_2 = x_2;
    this.scalePDF = scalePDF;
    this.xs = xs;
    this.weight = weight;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id_1;
    case 1: return id_2;
    case 2: return x_1;
    case 3: return x_2;
    case 4: return scalePDF;
    case 5: return xs;
    case 6: return weight;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id_1 = (java.lang.Integer)value$; break;
    case 1: id_2 = (java.lang.Integer)value$; break;
    case 2: x_1 = (java.lang.Float)value$; break;
    case 3: x_2 = (java.lang.Float)value$; break;
    case 4: scalePDF = (java.lang.Float)value$; break;
    case 5: xs = (java.lang.Float)value$; break;
    case 6: weight = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id_1' field.
   */
  public java.lang.Integer getId1() {
    return id_1;
  }

  /**
   * Sets the value of the 'id_1' field.
   * @param value the value to set.
   */
  public void setId1(java.lang.Integer value) {
    this.id_1 = value;
  }

  /**
   * Gets the value of the 'id_2' field.
   */
  public java.lang.Integer getId2() {
    return id_2;
  }

  /**
   * Sets the value of the 'id_2' field.
   * @param value the value to set.
   */
  public void setId2(java.lang.Integer value) {
    this.id_2 = value;
  }

  /**
   * Gets the value of the 'x_1' field.
   */
  public java.lang.Float getX1() {
    return x_1;
  }

  /**
   * Sets the value of the 'x_1' field.
   * @param value the value to set.
   */
  public void setX1(java.lang.Float value) {
    this.x_1 = value;
  }

  /**
   * Gets the value of the 'x_2' field.
   */
  public java.lang.Float getX2() {
    return x_2;
  }

  /**
   * Sets the value of the 'x_2' field.
   * @param value the value to set.
   */
  public void setX2(java.lang.Float value) {
    this.x_2 = value;
  }

  /**
   * Gets the value of the 'scalePDF' field.
   */
  public java.lang.Float getScalePDF() {
    return scalePDF;
  }

  /**
   * Sets the value of the 'scalePDF' field.
   * @param value the value to set.
   */
  public void setScalePDF(java.lang.Float value) {
    this.scalePDF = value;
  }

  /**
   * Gets the value of the 'xs' field.
   */
  public java.lang.Float getXs() {
    return xs;
  }

  /**
   * Sets the value of the 'xs' field.
   * @param value the value to set.
   */
  public void setXs(java.lang.Float value) {
    this.xs = value;
  }

  /**
   * Gets the value of the 'weight' field.
   */
  public java.lang.Float getWeight() {
    return weight;
  }

  /**
   * Sets the value of the 'weight' field.
   * @param value the value to set.
   */
  public void setWeight(java.lang.Float value) {
    this.weight = value;
  }

  /** Creates a new TGenEventInfo RecordBuilder */
  public static baconhep.TGenEventInfo.Builder newBuilder() {
    return new baconhep.TGenEventInfo.Builder();
  }
  
  /** Creates a new TGenEventInfo RecordBuilder by copying an existing Builder */
  public static baconhep.TGenEventInfo.Builder newBuilder(baconhep.TGenEventInfo.Builder other) {
    return new baconhep.TGenEventInfo.Builder(other);
  }
  
  /** Creates a new TGenEventInfo RecordBuilder by copying an existing TGenEventInfo instance */
  public static baconhep.TGenEventInfo.Builder newBuilder(baconhep.TGenEventInfo other) {
    return new baconhep.TGenEventInfo.Builder(other);
  }
  
  /**
   * RecordBuilder for TGenEventInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TGenEventInfo>
    implements org.apache.avro.data.RecordBuilder<TGenEventInfo> {

    private int id_1;
    private int id_2;
    private float x_1;
    private float x_2;
    private float scalePDF;
    private float xs;
    private float weight;

    /** Creates a new Builder */
    private Builder() {
      super(baconhep.TGenEventInfo.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(baconhep.TGenEventInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id_1)) {
        this.id_1 = data().deepCopy(fields()[0].schema(), other.id_1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id_2)) {
        this.id_2 = data().deepCopy(fields()[1].schema(), other.id_2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.x_1)) {
        this.x_1 = data().deepCopy(fields()[2].schema(), other.x_1);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.x_2)) {
        this.x_2 = data().deepCopy(fields()[3].schema(), other.x_2);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.scalePDF)) {
        this.scalePDF = data().deepCopy(fields()[4].schema(), other.scalePDF);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.xs)) {
        this.xs = data().deepCopy(fields()[5].schema(), other.xs);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.weight)) {
        this.weight = data().deepCopy(fields()[6].schema(), other.weight);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TGenEventInfo instance */
    private Builder(baconhep.TGenEventInfo other) {
            super(baconhep.TGenEventInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.id_1)) {
        this.id_1 = data().deepCopy(fields()[0].schema(), other.id_1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id_2)) {
        this.id_2 = data().deepCopy(fields()[1].schema(), other.id_2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.x_1)) {
        this.x_1 = data().deepCopy(fields()[2].schema(), other.x_1);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.x_2)) {
        this.x_2 = data().deepCopy(fields()[3].schema(), other.x_2);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.scalePDF)) {
        this.scalePDF = data().deepCopy(fields()[4].schema(), other.scalePDF);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.xs)) {
        this.xs = data().deepCopy(fields()[5].schema(), other.xs);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.weight)) {
        this.weight = data().deepCopy(fields()[6].schema(), other.weight);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'id_1' field */
    public java.lang.Integer getId1() {
      return id_1;
    }
    
    /** Sets the value of the 'id_1' field */
    public baconhep.TGenEventInfo.Builder setId1(int value) {
      validate(fields()[0], value);
      this.id_1 = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id_1' field has been set */
    public boolean hasId1() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id_1' field */
    public baconhep.TGenEventInfo.Builder clearId1() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'id_2' field */
    public java.lang.Integer getId2() {
      return id_2;
    }
    
    /** Sets the value of the 'id_2' field */
    public baconhep.TGenEventInfo.Builder setId2(int value) {
      validate(fields()[1], value);
      this.id_2 = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'id_2' field has been set */
    public boolean hasId2() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'id_2' field */
    public baconhep.TGenEventInfo.Builder clearId2() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'x_1' field */
    public java.lang.Float getX1() {
      return x_1;
    }
    
    /** Sets the value of the 'x_1' field */
    public baconhep.TGenEventInfo.Builder setX1(float value) {
      validate(fields()[2], value);
      this.x_1 = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'x_1' field has been set */
    public boolean hasX1() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'x_1' field */
    public baconhep.TGenEventInfo.Builder clearX1() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'x_2' field */
    public java.lang.Float getX2() {
      return x_2;
    }
    
    /** Sets the value of the 'x_2' field */
    public baconhep.TGenEventInfo.Builder setX2(float value) {
      validate(fields()[3], value);
      this.x_2 = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'x_2' field has been set */
    public boolean hasX2() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'x_2' field */
    public baconhep.TGenEventInfo.Builder clearX2() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'scalePDF' field */
    public java.lang.Float getScalePDF() {
      return scalePDF;
    }
    
    /** Sets the value of the 'scalePDF' field */
    public baconhep.TGenEventInfo.Builder setScalePDF(float value) {
      validate(fields()[4], value);
      this.scalePDF = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'scalePDF' field has been set */
    public boolean hasScalePDF() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'scalePDF' field */
    public baconhep.TGenEventInfo.Builder clearScalePDF() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'xs' field */
    public java.lang.Float getXs() {
      return xs;
    }
    
    /** Sets the value of the 'xs' field */
    public baconhep.TGenEventInfo.Builder setXs(float value) {
      validate(fields()[5], value);
      this.xs = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'xs' field has been set */
    public boolean hasXs() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'xs' field */
    public baconhep.TGenEventInfo.Builder clearXs() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'weight' field */
    public java.lang.Float getWeight() {
      return weight;
    }
    
    /** Sets the value of the 'weight' field */
    public baconhep.TGenEventInfo.Builder setWeight(float value) {
      validate(fields()[6], value);
      this.weight = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'weight' field has been set */
    public boolean hasWeight() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'weight' field */
    public baconhep.TGenEventInfo.Builder clearWeight() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public TGenEventInfo build() {
      try {
        TGenEventInfo record = new TGenEventInfo();
        record.id_1 = fieldSetFlags()[0] ? this.id_1 : (java.lang.Integer) defaultValue(fields()[0]);
        record.id_2 = fieldSetFlags()[1] ? this.id_2 : (java.lang.Integer) defaultValue(fields()[1]);
        record.x_1 = fieldSetFlags()[2] ? this.x_1 : (java.lang.Float) defaultValue(fields()[2]);
        record.x_2 = fieldSetFlags()[3] ? this.x_2 : (java.lang.Float) defaultValue(fields()[3]);
        record.scalePDF = fieldSetFlags()[4] ? this.scalePDF : (java.lang.Float) defaultValue(fields()[4]);
        record.xs = fieldSetFlags()[5] ? this.xs : (java.lang.Float) defaultValue(fields()[5]);
        record.weight = fieldSetFlags()[6] ? this.weight : (java.lang.Float) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
