/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
import java.util.List;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MCEvents extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, AnyEvents {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MCEvents\",\"fields\":[{\"name\":\"Info\",\"type\":{\"type\":\"record\",\"name\":\"TEventInfo\",\"namespace\":\"baconhep\",\"fields\":[{\"name\":\"runNum\",\"type\":\"long\"},{\"name\":\"evtNum\",\"type\":\"long\"},{\"name\":\"lumiSec\",\"type\":\"long\"},{\"name\":\"metFilterFailBits\",\"type\":\"long\"},{\"name\":\"nPU\",\"type\":\"long\"},{\"name\":\"nPUm\",\"type\":\"long\"},{\"name\":\"nPUp\",\"type\":\"long\"},{\"name\":\"nPUmean\",\"type\":\"float\"},{\"name\":\"nPUmeanm\",\"type\":\"float\"},{\"name\":\"nPUmeanp\",\"type\":\"float\"},{\"name\":\"pvx\",\"type\":\"float\"},{\"name\":\"pvy\",\"type\":\"float\"},{\"name\":\"pvz\",\"type\":\"float\"},{\"name\":\"bsx\",\"type\":\"float\"},{\"name\":\"bsy\",\"type\":\"float\"},{\"name\":\"bsz\",\"type\":\"float\"},{\"name\":\"pfMET\",\"type\":\"float\"},{\"name\":\"pfMETphi\",\"type\":\"float\"},{\"name\":\"pfMETCov00\",\"type\":\"float\"},{\"name\":\"pfMETCov01\",\"type\":\"float\"},{\"name\":\"pfMETCov11\",\"type\":\"float\"},{\"name\":\"pfMETC\",\"type\":\"float\"},{\"name\":\"pfMETCphi\",\"type\":\"float\"},{\"name\":\"pfMETCCov00\",\"type\":\"float\"},{\"name\":\"pfMETCCov01\",\"type\":\"float\"},{\"name\":\"pfMETCCov11\",\"type\":\"float\"},{\"name\":\"puppET\",\"type\":\"float\"},{\"name\":\"puppETphi\",\"type\":\"float\"},{\"name\":\"puppETCov00\",\"type\":\"float\"},{\"name\":\"puppETCov01\",\"type\":\"float\"},{\"name\":\"puppETCov11\",\"type\":\"float\"},{\"name\":\"puppETC\",\"type\":\"float\"},{\"name\":\"puppETCphi\",\"type\":\"float\"},{\"name\":\"puppETCCov00\",\"type\":\"float\"},{\"name\":\"puppETCCov01\",\"type\":\"float\"},{\"name\":\"puppETCCov11\",\"type\":\"float\"},{\"name\":\"alpacaMET\",\"type\":\"float\"},{\"name\":\"alpacaMETphi\",\"type\":\"float\"},{\"name\":\"pcpMET\",\"type\":\"float\"},{\"name\":\"pcpMETphi\",\"type\":\"float\"},{\"name\":\"rhoIso\",\"type\":\"float\"},{\"name\":\"rhoJet\",\"type\":\"float\"},{\"name\":\"hasGoodPV\",\"type\":\"boolean\"}]}},{\"name\":\"GenEvtInfo\",\"type\":{\"type\":\"record\",\"name\":\"TGenEventInfo\",\"namespace\":\"baconhep\",\"fields\":[{\"name\":\"id_1\",\"type\":\"int\"},{\"name\":\"id_2\",\"type\":\"int\"},{\"name\":\"x_1\",\"type\":\"float\"},{\"name\":\"x_2\",\"type\":\"float\"},{\"name\":\"scalePDF\",\"type\":\"float\"},{\"name\":\"xs\",\"type\":\"float\"},{\"name\":\"weight\",\"type\":\"float\"}]}},{\"name\":\"GenParticle\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TGenParticle\",\"namespace\":\"baconhep\",\"fields\":[{\"name\":\"parent\",\"type\":\"int\"},{\"name\":\"pdgId\",\"type\":\"int\"},{\"name\":\"status\",\"type\":\"int\"},{\"name\":\"pt\",\"type\":\"float\"},{\"name\":\"eta\",\"type\":\"float\"},{\"name\":\"phi\",\"type\":\"float\"},{\"name\":\"mass\",\"type\":\"float\"},{\"name\":\"y\",\"type\":\"float\"}]}}},{\"name\":\"Electron\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TElectron\",\"namespace\":\"baconhep\",\"fields\":[{\"name\":\"pt\",\"type\":\"float\"},{\"name\":\"eta\",\"type\":\"float\"},{\"name\":\"phi\",\"type\":\"float\"},{\"name\":\"scEt\",\"type\":\"float\"},{\"name\":\"scEta\",\"type\":\"float\"},{\"name\":\"scPhi\",\"type\":\"float\"},{\"name\":\"ecalEnergy\",\"type\":\"float\"},{\"name\":\"pfPt\",\"type\":\"float\"},{\"name\":\"pfEta\",\"type\":\"float\"},{\"name\":\"pfPhi\",\"type\":\"float\"},{\"name\":\"trkIso\",\"type\":\"float\"},{\"name\":\"ecalIso\",\"type\":\"float\"},{\"name\":\"hcalIso\",\"type\":\"float\"},{\"name\":\"hcalDepth1Iso\",\"type\":\"float\"},{\"name\":\"chHadIso\",\"type\":\"float\"},{\"name\":\"gammaIso\",\"type\":\"float\"},{\"name\":\"neuHadIso\",\"type\":\"float\"},{\"name\":\"puIso\",\"type\":\"float\"},{\"name\":\"ecalPFClusIso\",\"type\":\"float\"},{\"name\":\"hcalPFClusIso\",\"type\":\"float\"},{\"name\":\"puppiChHadIso\",\"type\":\"float\"},{\"name\":\"puppiGammaIso\",\"type\":\"float\"},{\"name\":\"puppiNeuHadIso\",\"type\":\"float\"},{\"name\":\"puppiChHadIsoNoLep\",\"type\":\"float\"},{\"name\":\"puppiGammaIsoNoLep\",\"type\":\"float\"},{\"name\":\"puppiNeuHadIsoNoLep\",\"type\":\"float\"},{\"name\":\"d0\",\"type\":\"float\"},{\"name\":\"dz\",\"type\":\"float\"},{\"name\":\"sip3d\",\"type\":\"float\"},{\"name\":\"sieie\",\"type\":\"float\"},{\"name\":\"e1x5\",\"type\":\"float\"},{\"name\":\"e2x5\",\"type\":\"float\"},{\"name\":\"e5x5\",\"type\":\"float\"},{\"name\":\"r9\",\"type\":\"float\"},{\"name\":\"eoverp\",\"type\":\"float\"},{\"name\":\"hovere\",\"type\":\"float\"},{\"name\":\"fbrem\",\"type\":\"float\"},{\"name\":\"dEtaInSeed\",\"type\":\"float\"},{\"name\":\"dEtaIn\",\"type\":\"float\"},{\"name\":\"dPhiIn\",\"type\":\"float\"},{\"name\":\"mva\",\"type\":\"float\"},{\"name\":\"q\",\"type\":\"int\"},{\"name\":\"isConv\",\"type\":\"boolean\"},{\"name\":\"nMissingHits\",\"type\":\"long\"},{\"name\":\"typeBits\",\"type\":\"long\"},{\"name\":\"fiducialBits\",\"type\":\"long\"},{\"name\":\"classification\",\"type\":\"int\"},{\"name\":\"scID\",\"type\":\"int\"},{\"name\":\"trkID\",\"type\":\"int\"}]}}},{\"name\":\"Muon\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TMuon\",\"namespace\":\"baconhep\",\"fields\":[{\"name\":\"pt\",\"type\":\"float\"},{\"name\":\"eta\",\"type\":\"float\"},{\"name\":\"phi\",\"type\":\"float\"},{\"name\":\"ptErr\",\"type\":\"float\"},{\"name\":\"staPt\",\"type\":\"float\"},{\"name\":\"staEta\",\"type\":\"float\"},{\"name\":\"staPhi\",\"type\":\"float\"},{\"name\":\"pfPt\",\"type\":\"float\"},{\"name\":\"pfEta\",\"type\":\"float\"},{\"name\":\"pfPhi\",\"type\":\"float\"},{\"name\":\"trkIso\",\"type\":\"float\"},{\"name\":\"ecalIso\",\"type\":\"float\"},{\"name\":\"hcalIso\",\"type\":\"float\"},{\"name\":\"chHadIso\",\"type\":\"float\"},{\"name\":\"gammaIso\",\"type\":\"float\"},{\"name\":\"neuHadIso\",\"type\":\"float\"},{\"name\":\"puIso\",\"type\":\"float\"},{\"name\":\"puppiChHadIso\",\"type\":\"float\"},{\"name\":\"puppiGammaIso\",\"type\":\"float\"},{\"name\":\"puppiNeuHadIso\",\"type\":\"float\"},{\"name\":\"puppiChHadIsoNoLep\",\"type\":\"float\"},{\"name\":\"puppiGammaIsoNoLep\",\"type\":\"float\"},{\"name\":\"puppiNeuHadIsoNoLep\",\"type\":\"float\"},{\"name\":\"d0\",\"type\":\"float\"},{\"name\":\"dz\",\"type\":\"float\"},{\"name\":\"sip3d\",\"type\":\"float\"},{\"name\":\"tkNchi2\",\"type\":\"float\"},{\"name\":\"muNchi2\",\"type\":\"float\"},{\"name\":\"trkKink\",\"type\":\"float\"},{\"name\":\"glbKink\",\"type\":\"float\"},{\"name\":\"trkHitFrac\",\"type\":\"float\"},{\"name\":\"chi2LocPos\",\"type\":\"float\"},{\"name\":\"segComp\",\"type\":\"float\"},{\"name\":\"caloComp\",\"type\":\"float\"},{\"name\":\"q\",\"type\":\"int\"},{\"name\":\"nValidHits\",\"type\":\"int\"},{\"name\":\"typeBits\",\"type\":\"long\"},{\"name\":\"selectorBits\",\"type\":\"long\"},{\"name\":\"pogIDBits\",\"type\":\"long\"},{\"name\":\"nTkHits\",\"type\":\"long\"},{\"name\":\"nPixHits\",\"type\":\"long\"},{\"name\":\"nTkLayers\",\"type\":\"long\"},{\"name\":\"nPixLayers\",\"type\":\"long\"},{\"name\":\"nMatchStn\",\"type\":\"long\"},{\"name\":\"trkID\",\"type\":\"int\"}]}}},{\"name\":\"Tau\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TTau\",\"namespace\":\"baconhep\",\"fields\":[{\"name\":\"pt\",\"type\":\"float\"},{\"name\":\"eta\",\"type\":\"float\"},{\"name\":\"phi\",\"type\":\"float\"},{\"name\":\"m\",\"type\":\"float\"},{\"name\":\"e\",\"type\":\"float\"},{\"name\":\"q\",\"type\":\"int\"},{\"name\":\"dzLeadChHad\",\"type\":\"float\"},{\"name\":\"nSignalChHad\",\"type\":\"long\"},{\"name\":\"nSignalGamma\",\"type\":\"long\"},{\"name\":\"antiEleMVA5\",\"type\":\"float\"},{\"name\":\"antiEleMVA5Cat\",\"type\":\"float\"},{\"name\":\"rawMuonRejection\",\"type\":\"float\"},{\"name\":\"rawIso3Hits\",\"type\":\"float\"},{\"name\":\"rawIsoMVA3oldDMwoLT\",\"type\":\"float\"},{\"name\":\"rawIsoMVA3oldDMwLT\",\"type\":\"float\"},{\"name\":\"rawIsoMVA3newDMwoLT\",\"type\":\"float\"},{\"name\":\"rawIsoMVA3newDMwLT\",\"type\":\"float\"},{\"name\":\"puppiChHadIso\",\"type\":\"float\"},{\"name\":\"puppiGammaIso\",\"type\":\"float\"},{\"name\":\"puppiNeuHadIso\",\"type\":\"float\"},{\"name\":\"puppiChHadIsoNoLep\",\"type\":\"float\"},{\"name\":\"puppiGammaIsoNoLep\",\"type\":\"float\"},{\"name\":\"puppiNeuHadIsoNoLep\",\"type\":\"float\"},{\"name\":\"hpsDisc\",\"type\":\"double\"}]}}},{\"name\":\"Photon\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TPhoton\",\"namespace\":\"baconhep\",\"fields\":[{\"name\":\"pt\",\"type\":\"float\"},{\"name\":\"eta\",\"type\":\"float\"},{\"name\":\"phi\",\"type\":\"float\"},{\"name\":\"scEt\",\"type\":\"float\"},{\"name\":\"scEta\",\"type\":\"float\"},{\"name\":\"scPhi\",\"type\":\"float\"},{\"name\":\"trkIso\",\"type\":\"float\"},{\"name\":\"ecalIso\",\"type\":\"float\"},{\"name\":\"hcalIso\",\"type\":\"float\"},{\"name\":\"chHadIso\",\"type\":\"float\"},{\"name\":\"gammaIso\",\"type\":\"float\"},{\"name\":\"neuHadIso\",\"type\":\"float\"},{\"name\":\"mva\",\"type\":\"float\"},{\"name\":\"hovere\",\"type\":\"float\"},{\"name\":\"sthovere\",\"type\":\"float\"},{\"name\":\"sieie\",\"type\":\"float\"},{\"name\":\"sipip\",\"type\":\"float\"},{\"name\":\"r9\",\"type\":\"float\"},{\"name\":\"fiducialBits\",\"type\":\"long\"},{\"name\":\"typeBits\",\"type\":\"long\"},{\"name\":\"scID\",\"type\":\"int\"},{\"name\":\"hasPixelSeed\",\"type\":\"boolean\"},{\"name\":\"passElectronVeto\",\"type\":\"boolean\"},{\"name\":\"isConv\",\"type\":\"boolean\"}]}}},{\"name\":\"PV\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TVertex\",\"namespace\":\"baconhep\",\"fields\":[{\"name\":\"nTracksFit\",\"type\":\"long\"},{\"name\":\"ndof\",\"type\":\"float\"},{\"name\":\"chi2\",\"type\":\"float\"},{\"name\":\"x\",\"type\":\"float\"},{\"name\":\"y\",\"type\":\"float\"},{\"name\":\"z\",\"type\":\"float\"}]}}},{\"name\":\"AK4CHS\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TJet\",\"namespace\":\"baconhep\",\"fields\":[{\"name\":\"pt\",\"type\":\"float\"},{\"name\":\"eta\",","\"type\":\"float\"},{\"name\":\"phi\",\"type\":\"float\"},{\"name\":\"mass\",\"type\":\"float\"},{\"name\":\"ptRaw\",\"type\":\"float\"},{\"name\":\"unc\",\"type\":\"float\"},{\"name\":\"area\",\"type\":\"float\"},{\"name\":\"d0\",\"type\":\"float\"},{\"name\":\"dz\",\"type\":\"float\"},{\"name\":\"csv\",\"type\":\"float\"},{\"name\":\"bmva\",\"type\":\"float\"},{\"name\":\"cvb\",\"type\":\"float\"},{\"name\":\"cvl\",\"type\":\"float\"},{\"name\":\"qgid\",\"type\":\"float\"},{\"name\":\"axis2\",\"type\":\"float\"},{\"name\":\"ptD\",\"type\":\"float\"},{\"name\":\"mult\",\"type\":\"int\"},{\"name\":\"q\",\"type\":\"float\"},{\"name\":\"mva\",\"type\":\"float\"},{\"name\":\"beta\",\"type\":\"float\"},{\"name\":\"betaStar\",\"type\":\"float\"},{\"name\":\"dR2Mean\",\"type\":\"float\"},{\"name\":\"pullY\",\"type\":\"float\"},{\"name\":\"pullPhi\",\"type\":\"float\"},{\"name\":\"chPullY\",\"type\":\"float\"},{\"name\":\"chPullPhi\",\"type\":\"float\"},{\"name\":\"neuPullY\",\"type\":\"float\"},{\"name\":\"neuPullPhi\",\"type\":\"float\"},{\"name\":\"chEmFrac\",\"type\":\"float\"},{\"name\":\"neuEmFrac\",\"type\":\"float\"},{\"name\":\"chHadFrac\",\"type\":\"float\"},{\"name\":\"neuHadFrac\",\"type\":\"float\"},{\"name\":\"muonFrac\",\"type\":\"float\"},{\"name\":\"genpt\",\"type\":\"float\"},{\"name\":\"geneta\",\"type\":\"float\"},{\"name\":\"genphi\",\"type\":\"float\"},{\"name\":\"genm\",\"type\":\"float\"},{\"name\":\"partonFlavor\",\"type\":\"int\"},{\"name\":\"hadronFlavor\",\"type\":\"int\"},{\"name\":\"nCharged\",\"type\":\"long\"},{\"name\":\"nNeutrals\",\"type\":\"long\"},{\"name\":\"nParticles\",\"type\":\"long\"}]}}},{\"name\":\"AK8CHS\",\"type\":{\"type\":\"array\",\"items\":\"baconhep.TJet\"}},{\"name\":\"AddAK8CHS\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TAddJet\",\"namespace\":\"baconhep\",\"fields\":[{\"name\":\"index\",\"type\":\"long\"},{\"name\":\"mass_prun\",\"type\":\"float\"},{\"name\":\"mass_trim\",\"type\":\"float\"},{\"name\":\"mass_sd0\",\"type\":\"float\"},{\"name\":\"c2_0\",\"type\":\"float\"},{\"name\":\"c2_0P2\",\"type\":\"float\"},{\"name\":\"c2_0P5\",\"type\":\"float\"},{\"name\":\"c2_1P0\",\"type\":\"float\"},{\"name\":\"c2_2P0\",\"type\":\"float\"},{\"name\":\"qjet\",\"type\":\"float\"},{\"name\":\"tau1\",\"type\":\"float\"},{\"name\":\"tau2\",\"type\":\"float\"},{\"name\":\"tau3\",\"type\":\"float\"},{\"name\":\"tau4\",\"type\":\"float\"},{\"name\":\"doublecsv\",\"type\":\"float\"},{\"name\":\"sj1_pt\",\"type\":\"float\"},{\"name\":\"sj1_eta\",\"type\":\"float\"},{\"name\":\"sj1_phi\",\"type\":\"float\"},{\"name\":\"sj1_m\",\"type\":\"float\"},{\"name\":\"sj1_csv\",\"type\":\"float\"},{\"name\":\"sj1_qgid\",\"type\":\"float\"},{\"name\":\"sj1_q\",\"type\":\"float\"},{\"name\":\"sj2_pt\",\"type\":\"float\"},{\"name\":\"sj2_eta\",\"type\":\"float\"},{\"name\":\"sj2_phi\",\"type\":\"float\"},{\"name\":\"sj2_m\",\"type\":\"float\"},{\"name\":\"sj2_csv\",\"type\":\"float\"},{\"name\":\"sj2_qgid\",\"type\":\"float\"},{\"name\":\"sj2_q\",\"type\":\"float\"},{\"name\":\"sj3_pt\",\"type\":\"float\"},{\"name\":\"sj3_eta\",\"type\":\"float\"},{\"name\":\"sj3_phi\",\"type\":\"float\"},{\"name\":\"sj3_m\",\"type\":\"float\"},{\"name\":\"sj3_csv\",\"type\":\"float\"},{\"name\":\"sj3_qgid\",\"type\":\"float\"},{\"name\":\"sj3_q\",\"type\":\"float\"},{\"name\":\"sj4_pt\",\"type\":\"float\"},{\"name\":\"sj4_eta\",\"type\":\"float\"},{\"name\":\"sj4_phi\",\"type\":\"float\"},{\"name\":\"sj4_m\",\"type\":\"float\"},{\"name\":\"sj4_csv\",\"type\":\"float\"},{\"name\":\"sj4_qgid\",\"type\":\"float\"},{\"name\":\"sj4_q\",\"type\":\"float\"},{\"name\":\"pullAngle\",\"type\":\"float\"},{\"name\":\"topTagType\",\"type\":\"long\"},{\"name\":\"top_n_subjets\",\"type\":\"long\"},{\"name\":\"top_m_min\",\"type\":\"float\"},{\"name\":\"top_m_123\",\"type\":\"float\"},{\"name\":\"top_fRec\",\"type\":\"float\"},{\"name\":\"topchi2\",\"type\":\"float\"}]}}},{\"name\":\"CA15CHS\",\"type\":{\"type\":\"array\",\"items\":\"baconhep.TJet\"}},{\"name\":\"AddCA15CHS\",\"type\":{\"type\":\"array\",\"items\":\"baconhep.TAddJet\"}},{\"name\":\"AK4Puppi\",\"type\":{\"type\":\"array\",\"items\":\"baconhep.TJet\"}},{\"name\":\"CA8Puppi\",\"type\":{\"type\":\"array\",\"items\":\"baconhep.TJet\"}},{\"name\":\"AddCA8Puppi\",\"type\":{\"type\":\"array\",\"items\":\"baconhep.TAddJet\"}},{\"name\":\"CA15Puppi\",\"type\":{\"type\":\"array\",\"items\":\"baconhep.TJet\"}},{\"name\":\"AddCA15Puppi\",\"type\":{\"type\":\"array\",\"items\":\"baconhep.TAddJet\"}}],\"aliases\":[\"AnyEvents\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public baconhep.TEventInfo Info;
  @Deprecated public baconhep.TGenEventInfo GenEvtInfo;
  @Deprecated public java.util.List<baconhep.TGenParticle> GenParticle;
  @Deprecated public java.util.List<baconhep.TElectron> Electron;
  @Deprecated public java.util.List<baconhep.TMuon> Muon;
  @Deprecated public java.util.List<baconhep.TTau> Tau;
  @Deprecated public java.util.List<baconhep.TPhoton> Photon;
  @Deprecated public java.util.List<baconhep.TVertex> PV;
  @Deprecated public java.util.List<baconhep.TJet> AK4CHS;
  @Deprecated public java.util.List<baconhep.TJet> AK8CHS;
  @Deprecated public java.util.List<baconhep.TAddJet> AddAK8CHS;
  @Deprecated public java.util.List<baconhep.TJet> CA15CHS;
  @Deprecated public java.util.List<baconhep.TAddJet> AddCA15CHS;
  @Deprecated public java.util.List<baconhep.TJet> AK4Puppi;
  @Deprecated public java.util.List<baconhep.TJet> CA8Puppi;
  @Deprecated public java.util.List<baconhep.TAddJet> AddCA8Puppi;
  @Deprecated public java.util.List<baconhep.TJet> CA15Puppi;
  @Deprecated public java.util.List<baconhep.TAddJet> AddCA15Puppi;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public MCEvents() {}

  /**
   * All-args constructor.
   */
  public MCEvents(baconhep.TEventInfo Info, baconhep.TGenEventInfo GenEvtInfo, java.util.List<baconhep.TGenParticle> GenParticle, java.util.List<baconhep.TElectron> Electron, java.util.List<baconhep.TMuon> Muon, java.util.List<baconhep.TTau> Tau, java.util.List<baconhep.TPhoton> Photon, java.util.List<baconhep.TVertex> PV, java.util.List<baconhep.TJet> AK4CHS, java.util.List<baconhep.TJet> AK8CHS, java.util.List<baconhep.TAddJet> AddAK8CHS, java.util.List<baconhep.TJet> CA15CHS, java.util.List<baconhep.TAddJet> AddCA15CHS, java.util.List<baconhep.TJet> AK4Puppi, java.util.List<baconhep.TJet> CA8Puppi, java.util.List<baconhep.TAddJet> AddCA8Puppi, java.util.List<baconhep.TJet> CA15Puppi, java.util.List<baconhep.TAddJet> AddCA15Puppi) {
    this.Info = Info;
    this.GenEvtInfo = GenEvtInfo;
    this.GenParticle = GenParticle;
    this.Electron = Electron;
    this.Muon = Muon;
    this.Tau = Tau;
    this.Photon = Photon;
    this.PV = PV;
    this.AK4CHS = AK4CHS;
    this.AK8CHS = AK8CHS;
    this.AddAK8CHS = AddAK8CHS;
    this.CA15CHS = CA15CHS;
    this.AddCA15CHS = AddCA15CHS;
    this.AK4Puppi = AK4Puppi;
    this.CA8Puppi = CA8Puppi;
    this.AddCA8Puppi = AddCA8Puppi;
    this.CA15Puppi = CA15Puppi;
    this.AddCA15Puppi = AddCA15Puppi;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Info;
    case 1: return GenEvtInfo;
    case 2: return GenParticle;
    case 3: return Electron;
    case 4: return Muon;
    case 5: return Tau;
    case 6: return Photon;
    case 7: return PV;
    case 8: return AK4CHS;
    case 9: return AK8CHS;
    case 10: return AddAK8CHS;
    case 11: return CA15CHS;
    case 12: return AddCA15CHS;
    case 13: return AK4Puppi;
    case 14: return CA8Puppi;
    case 15: return AddCA8Puppi;
    case 16: return CA15Puppi;
    case 17: return AddCA15Puppi;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Info = (baconhep.TEventInfo)value$; break;
    case 1: GenEvtInfo = (baconhep.TGenEventInfo)value$; break;
    case 2: GenParticle = (java.util.List<baconhep.TGenParticle>)value$; break;
    case 3: Electron = (java.util.List<baconhep.TElectron>)value$; break;
    case 4: Muon = (java.util.List<baconhep.TMuon>)value$; break;
    case 5: Tau = (java.util.List<baconhep.TTau>)value$; break;
    case 6: Photon = (java.util.List<baconhep.TPhoton>)value$; break;
    case 7: PV = (java.util.List<baconhep.TVertex>)value$; break;
    case 8: AK4CHS = (java.util.List<baconhep.TJet>)value$; break;
    case 9: AK8CHS = (java.util.List<baconhep.TJet>)value$; break;
    case 10: AddAK8CHS = (java.util.List<baconhep.TAddJet>)value$; break;
    case 11: CA15CHS = (java.util.List<baconhep.TJet>)value$; break;
    case 12: AddCA15CHS = (java.util.List<baconhep.TAddJet>)value$; break;
    case 13: AK4Puppi = (java.util.List<baconhep.TJet>)value$; break;
    case 14: CA8Puppi = (java.util.List<baconhep.TJet>)value$; break;
    case 15: AddCA8Puppi = (java.util.List<baconhep.TAddJet>)value$; break;
    case 16: CA15Puppi = (java.util.List<baconhep.TJet>)value$; break;
    case 17: AddCA15Puppi = (java.util.List<baconhep.TAddJet>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Info' field.
   */
  public baconhep.TEventInfo getInfo() {
    return Info;
  }

  /**
   * Sets the value of the 'Info' field.
   * @param value the value to set.
   */
  public void setInfo(baconhep.TEventInfo value) {
    this.Info = value;
  }

  /**
   * Gets the value of the 'GenEvtInfo' field.
   */
  public baconhep.TGenEventInfo getGenEvtInfo() {
    return GenEvtInfo;
  }

  /**
   * Sets the value of the 'GenEvtInfo' field.
   * @param value the value to set.
   */
  public void setGenEvtInfo(baconhep.TGenEventInfo value) {
    this.GenEvtInfo = value;
  }

  /**
   * Gets the value of the 'GenParticle' field.
   */
  public java.util.List<baconhep.TGenParticle> getGenParticle() {
    return GenParticle;
  }

  /**
   * Sets the value of the 'GenParticle' field.
   * @param value the value to set.
   */
  public void setGenParticle(java.util.List<baconhep.TGenParticle> value) {
    this.GenParticle = value;
  }

  /**
   * Gets the value of the 'Electron' field.
   */
  public java.util.List<baconhep.TElectron> getElectron() {
    return Electron;
  }

  /**
   * Sets the value of the 'Electron' field.
   * @param value the value to set.
   */
  public void setElectron(java.util.List<baconhep.TElectron> value) {
    this.Electron = value;
  }

  /**
   * Gets the value of the 'Muon' field.
   */
  public java.util.List<baconhep.TMuon> getMuon() {
    return Muon;
  }

  /**
   * Sets the value of the 'Muon' field.
   * @param value the value to set.
   */
  public void setMuon(java.util.List<baconhep.TMuon> value) {
    this.Muon = value;
  }

  /**
   * Gets the value of the 'Tau' field.
   */
  public java.util.List<baconhep.TTau> getTau() {
    return Tau;
  }

  /**
   * Sets the value of the 'Tau' field.
   * @param value the value to set.
   */
  public void setTau(java.util.List<baconhep.TTau> value) {
    this.Tau = value;
  }

  /**
   * Gets the value of the 'Photon' field.
   */
  public java.util.List<baconhep.TPhoton> getPhoton() {
    return Photon;
  }

  /**
   * Sets the value of the 'Photon' field.
   * @param value the value to set.
   */
  public void setPhoton(java.util.List<baconhep.TPhoton> value) {
    this.Photon = value;
  }

  /**
   * Gets the value of the 'PV' field.
   */
  public java.util.List<baconhep.TVertex> getPV() {
    return PV;
  }

  /**
   * Sets the value of the 'PV' field.
   * @param value the value to set.
   */
  public void setPV(java.util.List<baconhep.TVertex> value) {
    this.PV = value;
  }

  /**
   * Gets the value of the 'AK4CHS' field.
   */
  public java.util.List<baconhep.TJet> getAK4CHS() {
    return AK4CHS;
  }

  /**
   * Sets the value of the 'AK4CHS' field.
   * @param value the value to set.
   */
  public void setAK4CHS(java.util.List<baconhep.TJet> value) {
    this.AK4CHS = value;
  }

  /**
   * Gets the value of the 'AK8CHS' field.
   */
  public java.util.List<baconhep.TJet> getAK8CHS() {
    return AK8CHS;
  }

  /**
   * Sets the value of the 'AK8CHS' field.
   * @param value the value to set.
   */
  public void setAK8CHS(java.util.List<baconhep.TJet> value) {
    this.AK8CHS = value;
  }

  /**
   * Gets the value of the 'AddAK8CHS' field.
   */
  public java.util.List<baconhep.TAddJet> getAddAK8CHS() {
    return AddAK8CHS;
  }

  /**
   * Sets the value of the 'AddAK8CHS' field.
   * @param value the value to set.
   */
  public void setAddAK8CHS(java.util.List<baconhep.TAddJet> value) {
    this.AddAK8CHS = value;
  }

  /**
   * Gets the value of the 'CA15CHS' field.
   */
  public java.util.List<baconhep.TJet> getCA15CHS() {
    return CA15CHS;
  }

  /**
   * Sets the value of the 'CA15CHS' field.
   * @param value the value to set.
   */
  public void setCA15CHS(java.util.List<baconhep.TJet> value) {
    this.CA15CHS = value;
  }

  /**
   * Gets the value of the 'AddCA15CHS' field.
   */
  public java.util.List<baconhep.TAddJet> getAddCA15CHS() {
    return AddCA15CHS;
  }

  /**
   * Sets the value of the 'AddCA15CHS' field.
   * @param value the value to set.
   */
  public void setAddCA15CHS(java.util.List<baconhep.TAddJet> value) {
    this.AddCA15CHS = value;
  }

  /**
   * Gets the value of the 'AK4Puppi' field.
   */
  public java.util.List<baconhep.TJet> getAK4Puppi() {
    return AK4Puppi;
  }

  /**
   * Sets the value of the 'AK4Puppi' field.
   * @param value the value to set.
   */
  public void setAK4Puppi(java.util.List<baconhep.TJet> value) {
    this.AK4Puppi = value;
  }

  /**
   * Gets the value of the 'CA8Puppi' field.
   */
  public java.util.List<baconhep.TJet> getCA8Puppi() {
    return CA8Puppi;
  }

  /**
   * Sets the value of the 'CA8Puppi' field.
   * @param value the value to set.
   */
  public void setCA8Puppi(java.util.List<baconhep.TJet> value) {
    this.CA8Puppi = value;
  }

  /**
   * Gets the value of the 'AddCA8Puppi' field.
   */
  public java.util.List<baconhep.TAddJet> getAddCA8Puppi() {
    return AddCA8Puppi;
  }

  /**
   * Sets the value of the 'AddCA8Puppi' field.
   * @param value the value to set.
   */
  public void setAddCA8Puppi(java.util.List<baconhep.TAddJet> value) {
    this.AddCA8Puppi = value;
  }

  /**
   * Gets the value of the 'CA15Puppi' field.
   */
  public java.util.List<baconhep.TJet> getCA15Puppi() {
    return CA15Puppi;
  }

  /**
   * Sets the value of the 'CA15Puppi' field.
   * @param value the value to set.
   */
  public void setCA15Puppi(java.util.List<baconhep.TJet> value) {
    this.CA15Puppi = value;
  }

  /**
   * Gets the value of the 'AddCA15Puppi' field.
   */
  public java.util.List<baconhep.TAddJet> getAddCA15Puppi() {
    return AddCA15Puppi;
  }

  /**
   * Sets the value of the 'AddCA15Puppi' field.
   * @param value the value to set.
   */
  public void setAddCA15Puppi(java.util.List<baconhep.TAddJet> value) {
    this.AddCA15Puppi = value;
  }

  /** Creates a new MCEvents RecordBuilder */
  public static MCEvents.Builder newBuilder() {
    return new MCEvents.Builder();
  }
  
  /** Creates a new MCEvents RecordBuilder by copying an existing Builder */
  public static MCEvents.Builder newBuilder(MCEvents.Builder other) {
    return new MCEvents.Builder(other);
  }
  
  /** Creates a new MCEvents RecordBuilder by copying an existing MCEvents instance */
  public static MCEvents.Builder newBuilder(MCEvents other) {
    return new MCEvents.Builder(other);
  }
  
  /**
   * RecordBuilder for MCEvents instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MCEvents>
    implements org.apache.avro.data.RecordBuilder<MCEvents> {

    private baconhep.TEventInfo Info;
    private baconhep.TGenEventInfo GenEvtInfo;
    private java.util.List<baconhep.TGenParticle> GenParticle;
    private java.util.List<baconhep.TElectron> Electron;
    private java.util.List<baconhep.TMuon> Muon;
    private java.util.List<baconhep.TTau> Tau;
    private java.util.List<baconhep.TPhoton> Photon;
    private java.util.List<baconhep.TVertex> PV;
    private java.util.List<baconhep.TJet> AK4CHS;
    private java.util.List<baconhep.TJet> AK8CHS;
    private java.util.List<baconhep.TAddJet> AddAK8CHS;
    private java.util.List<baconhep.TJet> CA15CHS;
    private java.util.List<baconhep.TAddJet> AddCA15CHS;
    private java.util.List<baconhep.TJet> AK4Puppi;
    private java.util.List<baconhep.TJet> CA8Puppi;
    private java.util.List<baconhep.TAddJet> AddCA8Puppi;
    private java.util.List<baconhep.TJet> CA15Puppi;
    private java.util.List<baconhep.TAddJet> AddCA15Puppi;

    /** Creates a new Builder */
    private Builder() {
      super(MCEvents.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(MCEvents.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Info)) {
        this.Info = data().deepCopy(fields()[0].schema(), other.Info);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.GenEvtInfo)) {
        this.GenEvtInfo = data().deepCopy(fields()[1].schema(), other.GenEvtInfo);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.GenParticle)) {
        this.GenParticle = data().deepCopy(fields()[2].schema(), other.GenParticle);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Electron)) {
        this.Electron = data().deepCopy(fields()[3].schema(), other.Electron);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Muon)) {
        this.Muon = data().deepCopy(fields()[4].schema(), other.Muon);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Tau)) {
        this.Tau = data().deepCopy(fields()[5].schema(), other.Tau);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.Photon)) {
        this.Photon = data().deepCopy(fields()[6].schema(), other.Photon);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.PV)) {
        this.PV = data().deepCopy(fields()[7].schema(), other.PV);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.AK4CHS)) {
        this.AK4CHS = data().deepCopy(fields()[8].schema(), other.AK4CHS);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.AK8CHS)) {
        this.AK8CHS = data().deepCopy(fields()[9].schema(), other.AK8CHS);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.AddAK8CHS)) {
        this.AddAK8CHS = data().deepCopy(fields()[10].schema(), other.AddAK8CHS);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.CA15CHS)) {
        this.CA15CHS = data().deepCopy(fields()[11].schema(), other.CA15CHS);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.AddCA15CHS)) {
        this.AddCA15CHS = data().deepCopy(fields()[12].schema(), other.AddCA15CHS);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.AK4Puppi)) {
        this.AK4Puppi = data().deepCopy(fields()[13].schema(), other.AK4Puppi);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.CA8Puppi)) {
        this.CA8Puppi = data().deepCopy(fields()[14].schema(), other.CA8Puppi);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.AddCA8Puppi)) {
        this.AddCA8Puppi = data().deepCopy(fields()[15].schema(), other.AddCA8Puppi);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.CA15Puppi)) {
        this.CA15Puppi = data().deepCopy(fields()[16].schema(), other.CA15Puppi);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.AddCA15Puppi)) {
        this.AddCA15Puppi = data().deepCopy(fields()[17].schema(), other.AddCA15Puppi);
        fieldSetFlags()[17] = true;
      }
    }
    
    /** Creates a Builder by copying an existing MCEvents instance */
    private Builder(MCEvents other) {
            super(MCEvents.SCHEMA$);
      if (isValidValue(fields()[0], other.Info)) {
        this.Info = data().deepCopy(fields()[0].schema(), other.Info);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.GenEvtInfo)) {
        this.GenEvtInfo = data().deepCopy(fields()[1].schema(), other.GenEvtInfo);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.GenParticle)) {
        this.GenParticle = data().deepCopy(fields()[2].schema(), other.GenParticle);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Electron)) {
        this.Electron = data().deepCopy(fields()[3].schema(), other.Electron);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Muon)) {
        this.Muon = data().deepCopy(fields()[4].schema(), other.Muon);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Tau)) {
        this.Tau = data().deepCopy(fields()[5].schema(), other.Tau);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.Photon)) {
        this.Photon = data().deepCopy(fields()[6].schema(), other.Photon);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.PV)) {
        this.PV = data().deepCopy(fields()[7].schema(), other.PV);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.AK4CHS)) {
        this.AK4CHS = data().deepCopy(fields()[8].schema(), other.AK4CHS);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.AK8CHS)) {
        this.AK8CHS = data().deepCopy(fields()[9].schema(), other.AK8CHS);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.AddAK8CHS)) {
        this.AddAK8CHS = data().deepCopy(fields()[10].schema(), other.AddAK8CHS);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.CA15CHS)) {
        this.CA15CHS = data().deepCopy(fields()[11].schema(), other.CA15CHS);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.AddCA15CHS)) {
        this.AddCA15CHS = data().deepCopy(fields()[12].schema(), other.AddCA15CHS);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.AK4Puppi)) {
        this.AK4Puppi = data().deepCopy(fields()[13].schema(), other.AK4Puppi);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.CA8Puppi)) {
        this.CA8Puppi = data().deepCopy(fields()[14].schema(), other.CA8Puppi);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.AddCA8Puppi)) {
        this.AddCA8Puppi = data().deepCopy(fields()[15].schema(), other.AddCA8Puppi);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.CA15Puppi)) {
        this.CA15Puppi = data().deepCopy(fields()[16].schema(), other.CA15Puppi);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.AddCA15Puppi)) {
        this.AddCA15Puppi = data().deepCopy(fields()[17].schema(), other.AddCA15Puppi);
        fieldSetFlags()[17] = true;
      }
    }

    /** Gets the value of the 'Info' field */
    public baconhep.TEventInfo getInfo() {
      return Info;
    }
    
    /** Sets the value of the 'Info' field */
    public MCEvents.Builder setInfo(baconhep.TEventInfo value) {
      validate(fields()[0], value);
      this.Info = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'Info' field has been set */
    public boolean hasInfo() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'Info' field */
    public MCEvents.Builder clearInfo() {
      Info = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'GenEvtInfo' field */
    public baconhep.TGenEventInfo getGenEvtInfo() {
      return GenEvtInfo;
    }
    
    /** Sets the value of the 'GenEvtInfo' field */
    public MCEvents.Builder setGenEvtInfo(baconhep.TGenEventInfo value) {
      validate(fields()[1], value);
      this.GenEvtInfo = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'GenEvtInfo' field has been set */
    public boolean hasGenEvtInfo() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'GenEvtInfo' field */
    public MCEvents.Builder clearGenEvtInfo() {
      GenEvtInfo = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'GenParticle' field */
    public java.util.List<baconhep.TGenParticle> getGenParticle() {
      return GenParticle;
    }
    
    /** Sets the value of the 'GenParticle' field */
    public MCEvents.Builder setGenParticle(java.util.List<baconhep.TGenParticle> value) {
      validate(fields()[2], value);
      this.GenParticle = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'GenParticle' field has been set */
    public boolean hasGenParticle() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'GenParticle' field */
    public MCEvents.Builder clearGenParticle() {
      GenParticle = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'Electron' field */
    public java.util.List<baconhep.TElectron> getElectron() {
      return Electron;
    }
    
    /** Sets the value of the 'Electron' field */
    public MCEvents.Builder setElectron(java.util.List<baconhep.TElectron> value) {
      validate(fields()[3], value);
      this.Electron = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'Electron' field has been set */
    public boolean hasElectron() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'Electron' field */
    public MCEvents.Builder clearElectron() {
      Electron = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'Muon' field */
    public java.util.List<baconhep.TMuon> getMuon() {
      return Muon;
    }
    
    /** Sets the value of the 'Muon' field */
    public MCEvents.Builder setMuon(java.util.List<baconhep.TMuon> value) {
      validate(fields()[4], value);
      this.Muon = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'Muon' field has been set */
    public boolean hasMuon() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'Muon' field */
    public MCEvents.Builder clearMuon() {
      Muon = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'Tau' field */
    public java.util.List<baconhep.TTau> getTau() {
      return Tau;
    }
    
    /** Sets the value of the 'Tau' field */
    public MCEvents.Builder setTau(java.util.List<baconhep.TTau> value) {
      validate(fields()[5], value);
      this.Tau = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'Tau' field has been set */
    public boolean hasTau() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'Tau' field */
    public MCEvents.Builder clearTau() {
      Tau = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'Photon' field */
    public java.util.List<baconhep.TPhoton> getPhoton() {
      return Photon;
    }
    
    /** Sets the value of the 'Photon' field */
    public MCEvents.Builder setPhoton(java.util.List<baconhep.TPhoton> value) {
      validate(fields()[6], value);
      this.Photon = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'Photon' field has been set */
    public boolean hasPhoton() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'Photon' field */
    public MCEvents.Builder clearPhoton() {
      Photon = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'PV' field */
    public java.util.List<baconhep.TVertex> getPV() {
      return PV;
    }
    
    /** Sets the value of the 'PV' field */
    public MCEvents.Builder setPV(java.util.List<baconhep.TVertex> value) {
      validate(fields()[7], value);
      this.PV = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'PV' field has been set */
    public boolean hasPV() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'PV' field */
    public MCEvents.Builder clearPV() {
      PV = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'AK4CHS' field */
    public java.util.List<baconhep.TJet> getAK4CHS() {
      return AK4CHS;
    }
    
    /** Sets the value of the 'AK4CHS' field */
    public MCEvents.Builder setAK4CHS(java.util.List<baconhep.TJet> value) {
      validate(fields()[8], value);
      this.AK4CHS = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'AK4CHS' field has been set */
    public boolean hasAK4CHS() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'AK4CHS' field */
    public MCEvents.Builder clearAK4CHS() {
      AK4CHS = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'AK8CHS' field */
    public java.util.List<baconhep.TJet> getAK8CHS() {
      return AK8CHS;
    }
    
    /** Sets the value of the 'AK8CHS' field */
    public MCEvents.Builder setAK8CHS(java.util.List<baconhep.TJet> value) {
      validate(fields()[9], value);
      this.AK8CHS = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'AK8CHS' field has been set */
    public boolean hasAK8CHS() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'AK8CHS' field */
    public MCEvents.Builder clearAK8CHS() {
      AK8CHS = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'AddAK8CHS' field */
    public java.util.List<baconhep.TAddJet> getAddAK8CHS() {
      return AddAK8CHS;
    }
    
    /** Sets the value of the 'AddAK8CHS' field */
    public MCEvents.Builder setAddAK8CHS(java.util.List<baconhep.TAddJet> value) {
      validate(fields()[10], value);
      this.AddAK8CHS = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'AddAK8CHS' field has been set */
    public boolean hasAddAK8CHS() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'AddAK8CHS' field */
    public MCEvents.Builder clearAddAK8CHS() {
      AddAK8CHS = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'CA15CHS' field */
    public java.util.List<baconhep.TJet> getCA15CHS() {
      return CA15CHS;
    }
    
    /** Sets the value of the 'CA15CHS' field */
    public MCEvents.Builder setCA15CHS(java.util.List<baconhep.TJet> value) {
      validate(fields()[11], value);
      this.CA15CHS = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'CA15CHS' field has been set */
    public boolean hasCA15CHS() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'CA15CHS' field */
    public MCEvents.Builder clearCA15CHS() {
      CA15CHS = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'AddCA15CHS' field */
    public java.util.List<baconhep.TAddJet> getAddCA15CHS() {
      return AddCA15CHS;
    }
    
    /** Sets the value of the 'AddCA15CHS' field */
    public MCEvents.Builder setAddCA15CHS(java.util.List<baconhep.TAddJet> value) {
      validate(fields()[12], value);
      this.AddCA15CHS = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'AddCA15CHS' field has been set */
    public boolean hasAddCA15CHS() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'AddCA15CHS' field */
    public MCEvents.Builder clearAddCA15CHS() {
      AddCA15CHS = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'AK4Puppi' field */
    public java.util.List<baconhep.TJet> getAK4Puppi() {
      return AK4Puppi;
    }
    
    /** Sets the value of the 'AK4Puppi' field */
    public MCEvents.Builder setAK4Puppi(java.util.List<baconhep.TJet> value) {
      validate(fields()[13], value);
      this.AK4Puppi = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'AK4Puppi' field has been set */
    public boolean hasAK4Puppi() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'AK4Puppi' field */
    public MCEvents.Builder clearAK4Puppi() {
      AK4Puppi = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'CA8Puppi' field */
    public java.util.List<baconhep.TJet> getCA8Puppi() {
      return CA8Puppi;
    }
    
    /** Sets the value of the 'CA8Puppi' field */
    public MCEvents.Builder setCA8Puppi(java.util.List<baconhep.TJet> value) {
      validate(fields()[14], value);
      this.CA8Puppi = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'CA8Puppi' field has been set */
    public boolean hasCA8Puppi() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'CA8Puppi' field */
    public MCEvents.Builder clearCA8Puppi() {
      CA8Puppi = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'AddCA8Puppi' field */
    public java.util.List<baconhep.TAddJet> getAddCA8Puppi() {
      return AddCA8Puppi;
    }
    
    /** Sets the value of the 'AddCA8Puppi' field */
    public MCEvents.Builder setAddCA8Puppi(java.util.List<baconhep.TAddJet> value) {
      validate(fields()[15], value);
      this.AddCA8Puppi = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'AddCA8Puppi' field has been set */
    public boolean hasAddCA8Puppi() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'AddCA8Puppi' field */
    public MCEvents.Builder clearAddCA8Puppi() {
      AddCA8Puppi = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'CA15Puppi' field */
    public java.util.List<baconhep.TJet> getCA15Puppi() {
      return CA15Puppi;
    }
    
    /** Sets the value of the 'CA15Puppi' field */
    public MCEvents.Builder setCA15Puppi(java.util.List<baconhep.TJet> value) {
      validate(fields()[16], value);
      this.CA15Puppi = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'CA15Puppi' field has been set */
    public boolean hasCA15Puppi() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'CA15Puppi' field */
    public MCEvents.Builder clearCA15Puppi() {
      CA15Puppi = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'AddCA15Puppi' field */
    public java.util.List<baconhep.TAddJet> getAddCA15Puppi() {
      return AddCA15Puppi;
    }
    
    /** Sets the value of the 'AddCA15Puppi' field */
    public MCEvents.Builder setAddCA15Puppi(java.util.List<baconhep.TAddJet> value) {
      validate(fields()[17], value);
      this.AddCA15Puppi = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'AddCA15Puppi' field has been set */
    public boolean hasAddCA15Puppi() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'AddCA15Puppi' field */
    public MCEvents.Builder clearAddCA15Puppi() {
      AddCA15Puppi = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    @Override
    public MCEvents build() {
      try {
        MCEvents record = new MCEvents();
        record.Info = fieldSetFlags()[0] ? this.Info : (baconhep.TEventInfo) defaultValue(fields()[0]);
        record.GenEvtInfo = fieldSetFlags()[1] ? this.GenEvtInfo : (baconhep.TGenEventInfo) defaultValue(fields()[1]);
        record.GenParticle = fieldSetFlags()[2] ? this.GenParticle : (java.util.List<baconhep.TGenParticle>) defaultValue(fields()[2]);
        record.Electron = fieldSetFlags()[3] ? this.Electron : (java.util.List<baconhep.TElectron>) defaultValue(fields()[3]);
        record.Muon = fieldSetFlags()[4] ? this.Muon : (java.util.List<baconhep.TMuon>) defaultValue(fields()[4]);
        record.Tau = fieldSetFlags()[5] ? this.Tau : (java.util.List<baconhep.TTau>) defaultValue(fields()[5]);
        record.Photon = fieldSetFlags()[6] ? this.Photon : (java.util.List<baconhep.TPhoton>) defaultValue(fields()[6]);
        record.PV = fieldSetFlags()[7] ? this.PV : (java.util.List<baconhep.TVertex>) defaultValue(fields()[7]);
        record.AK4CHS = fieldSetFlags()[8] ? this.AK4CHS : (java.util.List<baconhep.TJet>) defaultValue(fields()[8]);
        record.AK8CHS = fieldSetFlags()[9] ? this.AK8CHS : (java.util.List<baconhep.TJet>) defaultValue(fields()[9]);
        record.AddAK8CHS = fieldSetFlags()[10] ? this.AddAK8CHS : (java.util.List<baconhep.TAddJet>) defaultValue(fields()[10]);
        record.CA15CHS = fieldSetFlags()[11] ? this.CA15CHS : (java.util.List<baconhep.TJet>) defaultValue(fields()[11]);
        record.AddCA15CHS = fieldSetFlags()[12] ? this.AddCA15CHS : (java.util.List<baconhep.TAddJet>) defaultValue(fields()[12]);
        record.AK4Puppi = fieldSetFlags()[13] ? this.AK4Puppi : (java.util.List<baconhep.TJet>) defaultValue(fields()[13]);
        record.CA8Puppi = fieldSetFlags()[14] ? this.CA8Puppi : (java.util.List<baconhep.TJet>) defaultValue(fields()[14]);
        record.AddCA8Puppi = fieldSetFlags()[15] ? this.AddCA8Puppi : (java.util.List<baconhep.TAddJet>) defaultValue(fields()[15]);
        record.CA15Puppi = fieldSetFlags()[16] ? this.CA15Puppi : (java.util.List<baconhep.TJet>) defaultValue(fields()[16]);
        record.AddCA15Puppi = fieldSetFlags()[17] ? this.AddCA15Puppi : (java.util.List<baconhep.TAddJet>) defaultValue(fields()[17]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
